{"title": "10x Performance Increases: Optimizing a Static Site", "content": "<p id=\"bdbd\" class=\"graf graf--p graf-after--h3\">A couple months ago, I was traveling outside of the U.S. and wanted to show a friend a link on my personal (static) site. I tried navigating to my website, but it took much longer than I anticipated. There\u2019s absolutely nothing dynamic about it\u200a\u2014\u200ait has animations and some responsive design, but the content always stays the same. In Italy, at 8mb/s, it was a different picture entirely. I was pretty appalled at the results, ~6s to DOMContentLoaded, and 8.2s for a full page load. There were 50 requests for a\u00a0<em class=\"markup--em markup--p-em\">static site</em>, with 2.9mb of total data transferred. I was accustomed to my 1Gb/s, low latency internet in Los Angeles connecting to my server in San Francisco.</p>\n<figure id=\"83ad\" class=\"graf graf--figure graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*sxIvkkEHivt-AUTGisUgUg.png\" data-width=\"1042\" data-height=\"785\" data-action=\"zoom\" data-action-value=\"1*sxIvkkEHivt-AUTGisUgUg.png\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"75\" height=\"55\"></canvas><img class=\"alignnone size-full wp-image-201\" src=\"https://emolike.net/wp-content/uploads/2018/03/1sxIvkkEHivt-AUTGisUgUg.png\" width=\"1000\" height=\"753\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/1sxIvkkEHivt-AUTGisUgUg.png 1000w, https://emolike.net/wp-content/uploads/2018/03/1sxIvkkEHivt-AUTGisUgUg-300x226.png 300w, https://emolike.net/wp-content/uploads/2018/03/1sxIvkkEHivt-AUTGisUgUg-768x578.png 768w, https://emolike.net/wp-content/uploads/2018/03/1sxIvkkEHivt-AUTGisUgUg-200x151.png 200w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></div>\n</div>\n</figure>\n<p id=\"1b33\" class=\"graf graf--p graf-after--figure\">This was my first foray into optimizations. Up to this point, any time I wanted to add a library or resource, I would just throw it in and point to it with\u00a0<em class=\"markup--em markup--p-em\">src=\u201d\u2026\u201d</em>. I had paid zero attention to any form of performance, from caching to inlining to lazy loading.</p>\n<p id=\"5c4f\" class=\"graf graf--p graf-after--p\">I started looking around for people with similar experiences. Unfortunately, a lot of the literature on static optimizations gets dated fairly quickly\u200a\u2014\u200arecommendations from 2010 or 2011 discussed libraries or made assumptions that simply weren\u2019t true anymore, or just repeated the same maxims over and over.</p>\n<p id=\"3b9c\" class=\"graf graf--p graf-after--p\">However, I did find two great sources of information\u200a\u2014\u200a<a class=\"markup--anchor markup--p-anchor\" href=\"https://hpbn.co/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://hpbn.co\">High Performance Browser Networking</a>\u00a0and\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://danluu.com/octopress-speedup/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://danluu.com/octopress-speedup/\">Dan Luu\u2019s similar experience with optimizing static sites</a>. While I didn\u2019t go as far as Dan in stripping formatting and content, I did manage to get my page load to be roughly 10x faster, to about a fifth of a second for DOMContentLoaded and only 355ms for full page load.</p>\n<figure id=\"3ba5\" class=\"graf graf--figure graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*LljXapRoovLOfns4dty-OQ.png\" data-width=\"1152\" data-height=\"806\" data-action=\"zoom\" data-action-value=\"1*LljXapRoovLOfns4dty-OQ.png\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"75\" height=\"51\"></canvas><img class=\"alignnone size-full wp-image-202\" src=\"https://emolike.net/wp-content/uploads/2018/03/1LljXapRoovLOfns4dty-OQ.png\" width=\"1000\" height=\"699\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/1LljXapRoovLOfns4dty-OQ.png 1000w, https://emolike.net/wp-content/uploads/2018/03/1LljXapRoovLOfns4dty-OQ-300x210.png 300w, https://emolike.net/wp-content/uploads/2018/03/1LljXapRoovLOfns4dty-OQ-768x537.png 768w, https://emolike.net/wp-content/uploads/2018/03/1LljXapRoovLOfns4dty-OQ-200x140.png 200w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></div>\n</div>\n</figure>\n<h3 id=\"ad76\" class=\"graf graf--h3 graf-after--figure\">The Process</h3>\n<p id=\"9220\" class=\"graf graf--p graf-after--h3\">The first step of the process was to profile the site. I wanted to figure out what was taking the longest, and how to best parallelize everything. I ran various tools to profile my site and test it from various locations around the world, including:</p>\n<ul class=\"postList\">\n<li id=\"980a\" class=\"graf graf--li graf-after--p\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://tools.pingdom.com/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://tools.pingdom.com/\">https://tools.pingdom.com/</a></li>\n<li id=\"b980\" class=\"graf graf--li graf-after--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"http://www.webpagetest.org/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"http://www.webpagetest.org/\">www.webpagetest.org/</a></li>\n<li id=\"9854\" class=\"graf graf--li graf-after--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://tools.keycdn.com/speed\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://tools.keycdn.com/speed\">https://tools.keycdn.com/speed</a></li>\n<li id=\"659b\" class=\"graf graf--li graf-after--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://developers.google.com/web/tools/lighthouse/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://developers.google.com/web/tools/lighthouse/\">https://developers.google.com/web/tools/lighthouse/</a></li>\n<li id=\"ba53\" class=\"graf graf--li graf-after--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://developers.google.com/speed/pagespeed/insights/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://developers.google.com/speed/pagespeed/insights/\">https://developers.google.com/speed/pagespeed/insights/</a></li>\n<li id=\"e004\" class=\"graf graf--li graf-after--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://webspeedtest.cloudinary.com/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://webspeedtest.cloudinary.com/\">https://webspeedtest.cloudinary.com/</a></li>\n</ul>\n<p id=\"ec12\" class=\"graf graf--p graf-after--li\">Some of these offered suggestions on improvements, but there\u2019s only so much you can do when your static site has 50 requests for everything from a spacer gif left as a remnant from the 90s to assets that aren\u2019t used (I was loading 6 fonts and only using 1)</p>\n<figure id=\"d498\" class=\"graf graf--figure graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*61ngDdpQfLqBo-I8F_tuqw.png\" data-width=\"1900\" data-height=\"2052\" data-action=\"zoom\" data-action-value=\"1*61ngDdpQfLqBo-I8F_tuqw.png\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"69\" height=\"75\"></canvas><img class=\"alignnone size-full wp-image-203\" src=\"https://emolike.net/wp-content/uploads/2018/03/161ngDdpQfLqBo-I8F_tuqw.png\" width=\"1000\" height=\"1080\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/161ngDdpQfLqBo-I8F_tuqw.png 1000w, https://emolike.net/wp-content/uploads/2018/03/161ngDdpQfLqBo-I8F_tuqw-278x300.png 278w, https://emolike.net/wp-content/uploads/2018/03/161ngDdpQfLqBo-I8F_tuqw-768x829.png 768w, https://emolike.net/wp-content/uploads/2018/03/161ngDdpQfLqBo-I8F_tuqw-948x1024.png 948w, https://emolike.net/wp-content/uploads/2018/03/161ngDdpQfLqBo-I8F_tuqw-200x216.png 200w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></div>\n</div><figcaption class=\"imageCaption\">Timeline for my site\u200a\u2014\u200aI tested this on the Web Archive as I didn\u2019t screenshot the original one, but it looks similar enough to what I saw a few months\u00a0ago.</figcaption></figure>\n<p id=\"8fb0\" class=\"graf graf--p graf-after--figure\">I wanted to improve everything that I had control over\u200a\u2014\u200afrom the contents and speed of the javascript to the actual web server (Nginx) and DNS settings.</p>\n<h3 id=\"c709\" class=\"graf graf--h3 graf-after--p\">Optimizations</h3>\n<h4 id=\"012a\" class=\"graf graf--h4 graf-after--h3\">Minify and Coalesce Resources</h4>\n<p id=\"a8d3\" class=\"graf graf--p graf-after--h4\">The first I noticed was that I was making a dozen requests each for CSS and JS (without any form of HTTP keepalive), and to various sites, some of which were https. This added multiple round trips to various CDNs or servers, and some JS files were requesting others, which caused the blocking cascade seen above.</p>\n<p id=\"024f\" class=\"graf graf--p graf-after--p\">I used\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://webpack.js.org/\">webpack</a>\u00a0to coalesce all my resources into a single js file. Any time I make a change to my content, it automatically minifies and turns all my dependencies into a single file.</p>\n<pre><code data-enlighter-language=\"null\">const UglifyJsPlugin = require('uglifyjs-webpack-plugin');\r\n\r\nmodule.exports = {\r\n    entry: './js/app.js',\r\n    output: {\r\n        path: __dirname + '/dist',\r\n        filename: 'bundle.js'\r\n    },\r\n    module: {\r\n        loaders: [\r\n            {\r\n                test: /\\.css$/,\r\n                loaders: [\r\n                    'style-loader',\r\n                    'css-loader'\r\n                ]\r\n            },\r\n            {\r\n                test: /(fonts|images)/,\r\n                loaders: [\r\n                    'url-loader'\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    plugins: [\r\n        new UglifyJsPlugin({\r\n            test: /\\.js($|\\?)/i\r\n        })\r\n    ]\r\n\r\n};</code></pre>\n<p id=\"d4e1\" class=\"graf graf--p graf-after--figure\">I played around with different options\u200a\u2014\u200acurrently, this single bundle.js file is in the &lt;head&gt; of my site, and is blocking. It\u2019s final size is 829kb, and that includes every single non-image asset (fonts, css, all libraries and dependencies, and js). The vast majority of this is are the font-awesome fonts, which make up 724 of the 829kb.</p>\n<p id=\"1c7b\" class=\"graf graf--p graf-after--p\">I went through the font awesome fonts and css and stripped all but the three icons I was using\u200a\u2014\u200afa-github, fa-envelope, and fa-code. I used a service called\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"http://fontello.com/\" target=\"_blank\" rel=\"noopener\" data-href=\"http://fontello.com/\">fontello</a>\u00a0to only pull the icons I needed. New size? 94kb.</p>\n<p id=\"e2ad\" class=\"graf graf--p graf-after--p\">The way the site is currently built, it won\u2019t look correct if we only have stylesheets, so I accepted the blocking nature of a single bundle.js. Load times are ~118ms, which is more than an order of magnitude better than above.</p>\n<p id=\"2914\" class=\"graf graf--p graf-after--p\">This also had a few added benefits\u200a\u2014\u200aI was no longer pointing to 3rd party resources or CDNs, so the user would not need to 1) perform a DNS query to that resource, 2) Perform the https handshake, and 3) actually wait for the full download from that resource.</p>\n<p id=\"6914\" class=\"graf graf--p graf-after--p\">While CDNs and distributed caching might make sense for large scale, distributed sites, it does not make sense for my small static site. The additional hundred milliseconds or so are a worthwhile tradeoff.</p>\n<h4 id=\"c14f\" class=\"graf graf--h4 graf-after--p\">Compress Resources</h4>\n<p id=\"35d5\" class=\"graf graf--p graf-after--h4\"><span class=\"markup--quote markup--p-quote is-other\" data-creator-ids=\"anon\">I was loading an 8mb sized headshot and then displaying it at 10% width/height. This wasn\u2019t just a lack of optimization\u200a\u2014\u200athis was\u00a0<em class=\"markup--em markup--p-em\">almost negligent usage of users bandwidth</em>.</span></p>\n<figure id=\"d2b6\" class=\"graf graf--figure graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*h79KSROW3oY6KWfQm6u5yA.png\" data-width=\"2490\" data-height=\"676\" data-is-featured=\"true\" data-action=\"zoom\" data-action-value=\"1*h79KSROW3oY6KWfQm6u5yA.png\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"75\" height=\"19\"></canvas><img class=\"alignnone size-full wp-image-204\" src=\"https://emolike.net/wp-content/uploads/2018/03/1h79KSROW3oY6KWfQm6u5yA.png\" width=\"1000\" height=\"271\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/1h79KSROW3oY6KWfQm6u5yA.png 1000w, https://emolike.net/wp-content/uploads/2018/03/1h79KSROW3oY6KWfQm6u5yA-300x81.png 300w, https://emolike.net/wp-content/uploads/2018/03/1h79KSROW3oY6KWfQm6u5yA-768x208.png 768w, https://emolike.net/wp-content/uploads/2018/03/1h79KSROW3oY6KWfQm6u5yA-200x54.png 200w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></div>\n</div>\n</figure>\n<p id=\"0406\" class=\"graf graf--p graf-after--figure\">I compressed all my images using\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://webspeedtest.cloudinary.com/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://webspeedtest.cloudinary.com/\">https://webspeedtest.cloudinary.com/</a>\u200a\u2014\u200ait also suggested I switch to\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://developers.google.com/speed/webp/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://developers.google.com/speed/webp/\">webp</a>, but I wanted to remain as compatible with as many browsers as possible, so I stuck to jpg.</p>\n<h4 id=\"7e73\" class=\"graf graf--h4 graf-after--p\">Improve Web Server\u200a\u2014\u200aHTTP2, TLS, and\u00a0More</h4>\n<p id=\"d180\" class=\"graf graf--p graf-after--h4\">The first thing I did was transition to https\u200a\u2014\u200awhen I started, I was running Nginx bare on port 80, just serving files from /var/www/html</p>\n<pre><code data-enlighter-language=\"null\">server{\r\n    listen 80;\r\n    server_name jonlu.ca www.jonlu.ca;\r\n\r\n    root /var/www/html;\r\n    index index.html index.htm;\r\n    location ~ /.git/ {\r\n          deny all;\r\n    }\r\n    location ~ / {\r\n        allow all;\r\n    }\r\n}</code></pre>\n<p id=\"15d8\" class=\"graf graf--p graf-after--figure\">I started by setting up https and redirecting all http requests to https. I got my TLS certificate from\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://letsencrypt.org/\">Let\u2019s Encrypt\u00a0</a>(an absolutely amazing organization that just started signing\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579\" target=\"_blank\" rel=\"noopener\" data-href=\"https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579\">wildcard certificates</a>\u00a0as well!)</p>\n<figure id=\"f5ff\" class=\"graf graf--figure graf--iframe graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<pre><code data-enlighter-language=\"null\">server {\r\n    listen 443 ssl http2;\r\n    listen [::]:443 ssl http2;\r\n    server_name jonlu.ca www.jonlu.ca;\r\n\r\n    root /var/www/html;\r\n    index index.html index.htm;\r\n\r\n    location ~ /.git {\r\n        deny all;\r\n    }\r\n    \r\n    location / {\r\n        allow all;\r\n    }\r\n\r\n    ssl_certificate /etc/letsencrypt/live/jonlu.ca/fullchain.pem; # managed by Certbot\r\n    ssl_certificate_key /etc/letsencrypt/live/jonlu.ca/privkey.pem; # managed by Certbot\r\n}</code></pre>\n<p> </p>\n</div>\n</figure>\n<p id=\"1947\" class=\"graf graf--p graf-after--figure\">Justy by adding the http2 directive, Nginx was able to take advantage of all the modern, baked in advantages of the newest HTTP features. Note that if you want to take advantage of HTTP2 (previously SPDY), you\u00a0<em class=\"markup--em markup--p-em\">must</em>\u00a0use HTTPS. Read more about it\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://hpbn.co/http2/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://hpbn.co/http2/\">here</a>.</p>\n<h4 id=\"5a77\" class=\"graf graf--h4 graf-after--p\">Utilize Caching &amp; Compression Directives</h4>\n<p id=\"e820\" class=\"graf graf--p graf-after--h4\">What more could be accomplished through just Nginx? The first things that jump out are caching and compression directives.</p>\n<p id=\"0fb8\" class=\"graf graf--p graf-after--p\">I was sending raw, uncompressed HTML. With just a single\u00a0<em class=\"markup--em markup--p-em\">gzip on;\u00a0</em>line, I was able to go from 16000 bytes to 8000 bytes, a decrease of 50%.</p>\n<p id=\"4e21\" class=\"graf graf--p graf-after--p\">Additionally, my site changes fairly infrequently, so I wanted the resources to be cached for as long as possible. This would make it so that, on subsequent visits, users would not need to redownload all assets (especially bundle.js).</p>\n<p id=\"b22c\" class=\"graf graf--p graf-after--p\">My updated server config looks like this. Note that I won\u2019t touch on all the changes I made, such as TCP settings changes, gzip directives, and file cache. If you\u2019d like to know more about these,\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://www.nginx.com/blog/tuning-nginx/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.nginx.com/blog/tuning-nginx/\">read this article on tuning Nginx.</a></p>\n<pre><code data-enlighter-language=\"null\">worker_processes auto;\r\npid /run/nginx.pid;\r\nworker_rlimit_nofile 30000;\r\n\r\nevents {\r\n    worker_connections 65535;\r\n    multi_accept on;\r\n    use epoll;\r\n}\r\n\r\nhttp {\r\n\r\n    ##\r\n    # Basic Settings\r\n    ##\r\n\r\n    sendfile on;\r\n    tcp_nopush on;\r\n    tcp_nodelay on;\r\n    keepalive_timeout 65;\r\n    types_hash_max_size 2048;\r\n\r\n    # Turn of server tokens specifying nginx version\r\n    server_tokens off;\r\n\r\n    open_file_cache max=200000 inactive=20s;\r\n    open_file_cache_valid 30s;\r\n    open_file_cache_min_uses 2;\r\n    open_file_cache_errors on;\r\n\r\n    include /etc/nginx/mime.types;\r\n    default_type application/octet-stream;\r\n\r\n    add_header Referrer-Policy \"no-referrer\";\r\n\r\n    ##\r\n    # SSL Settings\r\n    ##\r\n\r\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\n    ssl_prefer_server_ciphers on;\r\n    ssl_dhparam /location/to/dhparam.pem;\r\n    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\r\n\r\n    ssl_session_timeout 1d;\r\n    ssl_session_cache shared:SSL:50m;\r\n    ssl_stapling on;\r\n    ssl_stapling_verify on;\r\n    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';\r\n\r\n    ssl_certificate /location/to/fullchain.pem;\r\n    ssl_certificate_key /location/to/privkey.pem;\r\n\r\n    ##\r\n    # Logging Settings\r\n    ##\r\n\r\n    access_log /var/log/nginx/access.log;\r\n    error_log /var/log/nginx/error.log;\r\n\r\n    ##\r\n    # Gzip Settings\r\n    ##\r\n\r\n    gzip on;\r\n    gzip_disable \"msie6\";\r\n\r\n    gzip_vary on;\r\n    gzip_proxied any;\r\n    gzip_comp_level 6;\r\n    gzip_buffers 16 8k;\r\n    gzip_http_version 1.1;\r\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;\r\n    gzip_min_length 256;\r\n\r\n    ##\r\n    # Virtual Host Configs\r\n    ##\r\n\r\n    include /etc/nginx/conf.d/*.conf;\r\n    include /etc/nginx/sites-enabled/*;\r\n}</code></pre>\n<p id=\"d0dc\" class=\"graf graf--p graf-after--figure\">And the corresponding server block</p>\n<pre><code data-enlighter-language=\"null\">server {\r\n    listen 443 ssl http2;\r\n\r\n    server_name jonlu.ca www.jonlu.ca;\r\n\r\n    root /var/www/html;\r\n    index index.html index.htm;\r\n\r\n    location ~ /.git/ {\r\n        deny all;\r\n    }\r\n\r\n    location ~* /(images|js|css|fonts|assets|dist) {\r\n        expires 15d;\r\n    }\r\n\r\n}</code></pre>\n<h4 id=\"6113\" class=\"graf graf--h4 graf-after--figure\">Lazy Loading</h4>\n<p id=\"9d14\" class=\"graf graf--p graf-after--h4\">Lastly there was a small change to my actual site that would improve things by a non-negligible amount. There are 5 images that aren\u2019t seen until you press on their corresponding tabs, but that were loaded at the same time as everything else (due to their being in a &lt;img src=\u201d\u2026\u201d&gt; tag.</p>\n<p id=\"35a8\" class=\"graf graf--p graf-after--p\">I wrote a short script to modify the attribute with every element with the\u00a0<em class=\"markup--em markup--p-em\">lazyload class.</em></p>\n<pre><code data-enlighter-language=\"js\" data-enlighter-theme=\"enlighter\">$(document).ready(function() {\r\n    $('.lazyload').each(function() {\r\n        //* set the img src from data-src\r\n        $(this).attr('src', $(this).attr('data-src'));\r\n    });\r\n});</code></pre>\n<p id=\"863a\" class=\"graf graf--p graf-after--figure\">So once the document had completed loading, it would modify the &lt;img&gt; tags so that they went from &lt;img data-src=\u201d\u2026\u201d&gt; to &lt;img src=\u201d\u2026\u201d&gt;, and load it in the background.</p>\n<h3 id=\"d214\" class=\"graf graf--h3 graf-after--p\">Conclusion</h3>\n<p id=\"7888\" class=\"graf graf--p graf-after--h3\">This improved my page load times from more than 8 seconds to ~350ms on first page load, and an insane ~200ms on subsequent ones. I really recommend reading through all of\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://hpbn.co/#toc\" target=\"_blank\" rel=\"noopener\" data-href=\"https://hpbn.co/#toc\">High Performance Browser Networking</a>\u200a\u2014\u200ait\u2019s a fairly quick read, and provides an incredibly well written overview of the modern internet, and optimizing at every layer of the modern internet model.</p>\n<p id=\"3ace\" class=\"graf graf--p graf-after--p\"><em class=\"markup--em markup--p-em\">Did I miss anything? See anything that violates best practices or that could improve my performance even more? Feel free to reach out\u200a\u2014\u200a</em><a class=\"markup--user markup--p-user\" href=\"https://medium.com/@jonluca\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.com/@jonluca\" data-anchor-type=\"2\" data-user-id=\"3db6a3a642ec\" data-action-value=\"3db6a3a642ec\" data-action=\"show-user-card\" data-action-type=\"hover\"><em class=\"markup--em markup--p-em\">JonLuca De Caro</em></a><em class=\"markup--em markup--p-em\">!</em></p>\n<blockquote><p>source:\u00a0<a href=\"https://hackernoon.com/optimizing-a-static-site-d5ab6899f249\">https://hackernoon.com/optimizing-a-static-site-d5ab6899f249</a></p></blockquote>\n", "slug": "10x-performance-increases-optimizing-a-static-site", "date": 1521387888, "cats": [14]}