{"title": "ASP.NET MVC 5: Using a Simple Repository Pattern for Performing Database Operations", "content": "<p><b>Abstract:\u00a0</b>The Repository pattern decouples your ASP.NET MVC application and shields it from changes by creating a boundary between your data access code and the other parts of your application.</p>\n<p>Recently a client of mine asked for a solution to isolate the direct dependency of the Data Access Layer with the rest of the layers of the application. In this article we will discuss one of the concepts I suggested to him for an ASP.NET MVC application.</p>\n<p>Typically in multi-layer applications, the business logic or Domain logic retrieves data from various sources, e.g. Database, Web/WCF services, etc. In this type of direct access, the business logic is tightly coupled with the data access code which may result in code maintenance issues; because if the Database or Service changes, then the dependency code also needs to be changed. So the point here is that how to minimize this maintenance effort?</p>\n<p> </p>\n<ul>\n<li>Implementing an isolation layer for the data access which can be effectively tested.</li>\n<li>Implement consistent data access logic irrespective of the data source locations.</li>\n<li>Implementing maintainable code by separating business logic from data access logic.</li>\n<li>Implementing an easy domain model development for complex business logic.</li>\n</ul>\n<p>The following diagram gives a general overview of the repository pattern:</p>\n<p><img class=\"alignnone size-full wp-image-1168\" src=\"https://emolike.net/wp-content/uploads/2018/12/repository-pattern.png\" width=\"1000\" height=\"549\" alt=\"repository-pattern\" title=\"repository-pattern\" srcset=\"https://emolike.net/wp-content/uploads/2018/12/repository-pattern.png 1000w, https://emolike.net/wp-content/uploads/2018/12/repository-pattern-300x165.png 300w, https://emolike.net/wp-content/uploads/2018/12/repository-pattern-768x422.png 768w, https://emolike.net/wp-content/uploads/2018/12/repository-pattern-492x270.png 492w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></p>\n<p>The repository layer isolates Business layer from the Data Access Layer. The Repository contains Data Mapper entity. This entity can be used as a model entity for providing schema of the data for performing CRUD operations, by using the CRUD operations defined in the repository. The Business layer performs Data Access using repository layer. If the application makes use of WCF/Web services for data access, then repository can be used to isolate these service references from the Business layer.</p>\n<h3>Repository in case of ASP.NET MVC</h3>\n<p>In case of ASP.NET MVC, we uses the Model layer for interacting with Data Access and Controller talks to the Model for performing the Data Access operations. In MVC, it is important to think of the repository pattern so that if the Model layers needs some breaking changes, then it should have minimum or no maintenance impact on the controller layer. In MVC, finally the Controller is responsible for exposing data to the View or accessing Http posted data from View and send it further to the Model. So here, if the Controller has tight-coupling dependency on the Model, then any change in the Model will impact the Controller and hence sometimes the View too. In this case, we can use the Repository pattern as shown in the following diagram:</p>\n<p><img class=\"alignnone size-full wp-image-1169\" src=\"https://emolike.net/wp-content/uploads/2018/12/repository-aspnet-mvc.png\" width=\"1280\" height=\"713\" alt=\"repository-aspnet-mvc\" title=\"repository-aspnet-mvc\" srcset=\"https://emolike.net/wp-content/uploads/2018/12/repository-aspnet-mvc.png 1280w, https://emolike.net/wp-content/uploads/2018/12/repository-aspnet-mvc-300x167.png 300w, https://emolike.net/wp-content/uploads/2018/12/repository-aspnet-mvc-768x428.png 768w, https://emolike.net/wp-content/uploads/2018/12/repository-aspnet-mvc-1024x570.png 1024w, https://emolike.net/wp-content/uploads/2018/12/repository-aspnet-mvc-485x270.png 485w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /></p>\n<p>The above diagram explains the repository process flow. When using EntityFramework in MVC, we have Model Entities available which can be used by all layers of the application. Once the Web Server passed the request to Controller for Actions (e.g. Read/Write), the Controller calls repository and passes the Model Entity to it. It is recommended that the Controller should use\u00a0<b><a href=\"https://www.dotnetcurry.com/aspnet-mvc/786/dependency-injection-aspnet-mvc-introduction\">Dependency Injection</a></b>\u00a0to instantiate the Repository and call methods from it. The Repository further passes the Model Entity to Data Access implemented using Entity Framework for performing operation requested by the Controller. Here Repository must also use\u00a0<a href=\"https://www.dotnetcurry.com/aspnet-mvc/786/dependency-injection-aspnet-mvc-introduction\"><b>Dependency Injection</b></a><b>\u00a0</b>to instantiate the\u00a0<b>DbContext</b>\u00a0of Entity Framework. To implement Dependency Injection, any DI framework can be used e.g.\u00a0<a href=\"http://www.devcurry.com/2013/01/aspnet-mvc-getting-started-with-unity.html\" target=\"_blank\" rel=\"nofollow noopener\">Unity</a>,\u00a0<a href=\"https://www.dotnetcurry.com/aspnet-mvc/829/dependency-injection-ninject-aspnet-mvc\">Ninject</a>, etc.</p>\n<h3>Implementing Repository in ASP.NET MVC</h3>\n<p><b>Step 1:\u00a0</b>Open Visual Studio and create a new Empty MVC application. Name this as MVC_Repository. In this application, add a new Sql Server database of name Application.mdf. In this database add new table called EmployeeInfo as shown in the following schema:</p>\n<pre><code data-enlighter-language=\"null\">CREATE TABLE [dbo].[EmployeeInfo] (\r\n    [EmpNo]       INT          IDENTITY (1, 1) NOT NULL,\r\n    [EmpName]     VARCHAR (50) NOT NULL,\r\n    [Salary]      INT          NOT NULL,\r\n    [DeptName]    VARCHAR (50) NOT NULL,\r\n    [Designation] VARCHAR (50) NOT NULL,\r\n    PRIMARY KEY CLUSTERED ([EmpNo] ASC)\r\n);</code></pre>\n<p>Insert the following Test Data in this table as shown in the following statement</p>\n<div>\n<pre><code data-enlighter-language=\"null\">INSERT INTO [dbo].[EmployeeInfo] ([EmpNo], [EmpName], [Salary], [DeptName], [Designation]) VALUES (1, N'MS', 45000, N'Tech', N'Manager')\r\nINSERT INTO [dbo].[EmployeeInfo] ([EmpNo], [EmpName], [Salary], [DeptName], [Designation]) VALUES (2, N'LS', 55000, N'HR', N'Manager')\r\nINSERT INTO [dbo].[EmployeeInfo] ([EmpNo], [EmpName], [Salary], [DeptName], [Designation]) VALUES (3, N'TS', 85000, N'Store', N'Manager')\r\n</code></pre>\n<p><b>Step 2:\u00a0</b>In the Models folder, add a new ADO.NET Entity Data Model. This will start the wizard, in this wizard select Application.mdf database and the EmployeeInfo table. After completion of the wizard, we will generate code using EntityFramework. This will generate Entity Model class of name EmployeeInfo as shown in the following code:</p>\n<pre><code data-enlighter-language=\"csharp\">public partial class EmployeeInfo\r\n{\r\n    public int EmpNo { get; set; }\r\n    public string EmpName { get; set; }\r\n    public int Salary { get; set; }\r\n    public string DeptName { get; set; }\r\n    public string Designation { get; set; }\r\n}</code></pre>\n<p>The\u00a0<b>DbContext\u00a0</b>class gets generated as shown in the following code:</p>\n<div>\n<pre><code data-enlighter-language=\"csharp\">public partial class ApplicationEntities : DbContext\r\n{\r\n    public ApplicationEntities()\r\n        : base(\"name=ApplicationEntities\")\r\n    {\r\n    }\r\n \r\n    protected override void OnModelCreating(DbModelBuilder modelBuilder)\r\n    {\r\n        throw new UnintentionalCodeFirstException();\r\n    }\r\n \r\n    public virtual DbSet&lt;EmployeeInfo&gt; EmployeeInfoes { get; set; }\r\n}</code></pre>\n<p>This completes the Data Access layer creation. The\u00a0<b>DbContext</b>\u00a0class manages the Database table mapping and data read/write operations.</p>\n<p id=\"mvcplus\" class=\"alsoread\">\n<p><b>Step 3:\u00a0</b>Since we will be using\u00a0<b>Dependency Injection</b>\u00a0for instantiating the Repository object and DbContext object, we need to add a Unity Container in this project using NuGet Package manager as shown in the following image:</p>\n<p><img class=\"alignnone size-full wp-image-1170\" src=\"https://emolike.net/wp-content/uploads/2018/12/unity-dependency.png\" width=\"1126\" height=\"748\" alt=\"unity-dependency\" title=\"unity-dependency\" srcset=\"https://emolike.net/wp-content/uploads/2018/12/unity-dependency.png 1126w, https://emolike.net/wp-content/uploads/2018/12/unity-dependency-300x199.png 300w, https://emolike.net/wp-content/uploads/2018/12/unity-dependency-768x510.png 768w, https://emolike.net/wp-content/uploads/2018/12/unity-dependency-1024x680.png 1024w, https://emolike.net/wp-content/uploads/2018/12/unity-dependency-406x270.png 406w\" sizes=\"(max-width: 1126px) 100vw, 1126px\" /></p>\n<p>This will add UnityConfig.cs file in the App_Start folder of the project. We will visit this file in the forthcoming steps.</p>\n<p><b>Step 4:\u00a0</b>To isolate the Data Access from the MVC controllers, we need to now create Repository. To implement this in the project, add a folder of the name\u00a0<b>Repositories.\u00a0</b>In this folder, add a new interface file of the name IRepository.cs. In this file, add the following code:</p>\n<pre><code data-enlighter-language=\"csharp\">using System.Collections.Generic;\r\n \r\nnamespace MVC_Repository.Repositories\r\n{\r\n    //The Generic Interface Repository for Performing Read/Add/Delete operations\r\n    public interface IRepository&lt;TEnt, in TPk&gt; where TEnt :class\r\n    {\r\n        IEnumerable&lt;TEnt&gt; Get();\r\n        TEnt Get(TPk id);\r\n        void Add(TEnt entity);\r\n        void Remove(TEnt entity);\r\n    }\r\n}</code></pre>\n<p>The above code is the generic interface which has\u00a0<b>TEny\u00a0</b>and\u00a0<b>TPk\u00a0</b>generic type.\u00a0<b>TEnt\u00a0</b>is set with the constraints as\u00a0<b>class.\u00a0</b>This interface defines methods for Read/Write operations. We are implementing this interface as generic interface so that we can use it for all model entities for performing CRUD operations.</p>\n<p>In the folder, add a new class file of name EmployeeInfoRepository.cs. Add the following code in it:</p>\n<pre><code data-enlighter-language=\"csharp\">using Microsoft.Practices.Unity;\r\nusing MVC_Repository.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n \r\nnamespace MVC_Repository.Repositories\r\n{\r\n    //The EmployeeInfo Repository Class. This is used to \r\n    //Isolate the EntityFramework based Data Access Layer from\r\n    //the MVC Controller class\r\n    public class EmployeeInfoRepository : IRepository&lt;EmployeeInfo,int&gt;\r\n    {\r\n        [Dependency]\r\n        public ApplicationEntities context{get;set;}\r\n \r\n        public IEnumerable&lt;EmployeeInfo&gt; Get()\r\n        {\r\n            return context.EmployeeInfoes.ToList();\r\n        }\r\n \r\n        public EmployeeInfo Get(int id)\r\n        {\r\n            return context.EmployeeInfoes.Find(id);\r\n        }\r\n \r\n        public void Add(EmployeeInfo entity)\r\n        {\r\n            context.EmployeeInfoes.Add(entity);\r\n            context.SaveChanges();\r\n        }\r\n \r\n        public void Remove(EmployeeInfo entity)\r\n        {\r\n            var obj = context.EmployeeInfoes.Find(entity.EmpNo);\r\n            context.EmployeeInfoes.Remove(obj);\r\n            context.SaveChanges();\r\n        }\r\n    }\r\n}</code></pre>\n<p>The above EmployeeInfoRepository class implements IRepository interface by passing\u00a0<b>TEnt</b>\u00a0value as\u00a0<b>EmployeeInfo</b>, and\u00a0<b>TPk\u00a0</b>value as\u00a0<b>int</b>, so that we can implement Read/Write operations for EmployeeInfo model entity and use the\u00a0<b>int</b>\u00a0type for\u00a0<b>id\u00a0</b>parameter<b>\u00a0</b>to read Employee based<b>\u00a0</b>on<b>\u00a0id</b>.</p>\n<p>The most important part in the above code is the following:</p>\n<pre><code data-enlighter-language=\"csharp\">[Dependency]\r\npublic ApplicationEntities context{get;set;}</code></pre>\n<p>Using the\u00a0<b>[Dependency]</b>\u00a0attribute means that the\u00a0<b>context\u00a0</b>property of the type\u00a0<b>ApplicationEntities\u00a0</b>is target for Dependency injection in the current type. When the Unity Container instantiates, the property types marked with [Dependency] is instantiated and injected.</p>\n<p><b>Step 5:\u00a0</b>Open the UnityConfig.cs from the App_Start folder, and register the EmployeeInfoRepository in the UnityContainer as shown in the following code: (highlighted)</p>\n<pre><code data-enlighter-language=\"csharp\">public static void RegisterComponents()\r\n{\r\n    var container = new UnityContainer();\r\n    //Register the Repository in the Unity Container\r\n    container.RegisterType&lt;IRepository&lt;EmployeeInfo,int&gt;,EmployeeInfoRepository&gt;();\r\n    DependencyResolver.SetResolver(new UnityDependencyResolver(container));\r\n}</code></pre>\n<p>Open the Global.asax and add the following line in Application_Start</p>\n<div>\n<pre><code data-enlighter-language=\"null\">UnityConfig.RegisterComponents(); //Method call to Complete the Component Registration</code></pre>\n<p><b>Step 6:\u00a0</b>In the Controllers folder add a new Empty MVC controller of the name EmployeeInfoController.cs. Add the following code in it:</p>\n<div>\n<pre><code data-enlighter-language=\"csharp\">using System.Web.Mvc;\r\n \r\nusing MVC_Repository.Models;\r\nusing MVC_Repository.Repositories;\r\n \r\nnamespace MVC_Repository.Controllers\r\n{\r\n    public class EmployeeInfoController : Controller\r\n    {\r\n        //Property of the type IRepository &lt;TEnt, in TPk&gt;\r\n        private IRepository&lt;EmployeeInfo, int&gt; _repository;\r\n \r\n        //The Dependency Injection of the IRepository&lt;TEnt, in TPk&gt;\r\n        public EmployeeInfoController(IRepository&lt;EmployeeInfo, int&gt; repo)\r\n        {\r\n            _repository = repo;\r\n        }\r\n \r\n        // GET: EmployeeInfo\r\n        public ActionResult Index()\r\n        {\r\n            var Emps = _repository.Get();\r\n \r\n            return View(Emps);\r\n        }\r\n \r\n        public ActionResult Create()\r\n        {\r\n            var Emp = new EmployeeInfo();\r\n            return View(Emp);\r\n        }\r\n \r\n \r\n        [HttpPost]\r\n        public ActionResult Create(EmployeeInfo Emp)\r\n        {\r\n            _repository.Add(Emp);\r\n            return RedirectToAction(\"Index\");\r\n        }\r\n \r\n        public ActionResult Delete(int id)\r\n        {\r\n            var Emp = _repository.Get(id);\r\n            return View(Emp);\r\n        }\r\n \r\n        [HttpPost]\r\n        public ActionResult Delete(int id,EmployeeInfo emp)\r\n        {\r\n            var Emp = _repository.Get(id);\r\n            _repository.Remove(Emp);\r\n            return RedirectToAction(\"Index\");\r\n        }\r\n    }\r\n}</code></pre>\n<p>The above controller class uses the EmployeeInfoRepository using Dependency Injection with constructor injection. Using this implementation of Repository, we have implemented isolation between the Controller class and the Data Access using entity Framework. All action method from the controller uses an instance of the Repository for performing Read/Write operations. Generate Views from Index, Create and Delete action methods by using Model class as EmployeeInfo as shown in the following image</p>\n<p><img class=\"alignnone size-full wp-image-1171\" src=\"https://emolike.net/wp-content/uploads/2018/12/add-view.png\" width=\"743\" height=\"457\" alt=\"add-view\" title=\"add-view\" srcset=\"https://emolike.net/wp-content/uploads/2018/12/add-view.png 743w, https://emolike.net/wp-content/uploads/2018/12/add-view-300x185.png 300w, https://emolike.net/wp-content/uploads/2018/12/add-view-439x270.png 439w\" sizes=\"(max-width: 743px) 100vw, 743px\" /></p>\n<p>Run and Test the Index, Create and Delete operations.</p>\n<p><b>Conclusion:\u00a0</b>The Repository pattern decouples your application and shield it from changes by creating a boundary between your data access code and the other parts of your application.</p>\n<p><a title=\"ASP.NET MVC Repository Pattern\" href=\"https://github.com/dotnetcurry/ASP.NET-MVC-Repository-pattern\" target=\"_blank\" rel=\"nofollow noopener\"><strong>Download the entire source code of this article</strong></a><strong>\u00a0</strong>(Github)</p>\n<p>Source :\u00a0<a href=\"https://www.dotnetcurry.com/aspnet-mvc/1155/aspnet-mvc-repository-pattern-perform-database-operations\">https://www.dotnetcurry.com/aspnet-mvc/1155/aspnet-mvc-repository-pattern-perform-database-operations</a></p>\n</div>\n</div>\n</div>\n</div>\n", "slug": "asp-net-mvc-5-using-a-simple-repository-pattern-for-performing-database-operations", "date": 1543681060, "cats": [12, 13, 17, 16, 14]}