{"title": "AWS Lambda Go vs. Node.js performance benchmark", "content": "<div id=\"at_zurlpreview\">\n<h2>AWS Lambda Go vs. Node.js performance benchmark: updated \ud83d\udd25</h2>\n<h3 style=\"display: none;\">AWS Lambda Go vs. Node.js performance benchmark: updated \ud83d\udd25</h3>\n<p class=\"imgp\"><img class=\"alignnone size-full wp-image-453\" src=\"https://emolike.net/wp-content/uploads/2018/04/1dW_FBqoUjyIWkOhDcvl9nA-2.png\" width=\"1200\" height=\"745\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/1dW_FBqoUjyIWkOhDcvl9nA-2.png 1200w, https://emolike.net/wp-content/uploads/2018/04/1dW_FBqoUjyIWkOhDcvl9nA-2-300x186.png 300w, https://emolike.net/wp-content/uploads/2018/04/1dW_FBqoUjyIWkOhDcvl9nA-2-768x477.png 768w, https://emolike.net/wp-content/uploads/2018/04/1dW_FBqoUjyIWkOhDcvl9nA-2-1024x636.png 1024w, https://emolike.net/wp-content/uploads/2018/04/1dW_FBqoUjyIWkOhDcvl9nA-2-435x270.png 435w\" sizes=\"(max-width: 1200px) 100vw, 1200px\" /></p>\n<p class=\"imgd\">Just this week AWS announced the release of Go for their Lambda service.</p>\n<p class=\"imgs\">Source: <a href=\"https://hackernoon.com/aws-lambda-go-vs-node-js-performance-benchmark-1c8898341982\" target=\"_blank\" rel=\"noopener\">hackernoon.com/aws-lambda-go-vs-node-js-performance-benchmark-1c8898341982</a></p>\n</div>\n<h3 id=\"3527\" class=\"graf graf--h3 graf-after--figure\">Test Code: S3 and Dynamo interaction</h3>\n<p id=\"b916\" class=\"graf graf--p graf-after--h3\">As mentioned in the comments, the Fibonacci sequence is nice as a starter but doesn\u2019t really represent a real world scenario. So I whipped up an extra example. This Lambda function</p>\n<ol class=\"postList\">\n<li id=\"a34f\" class=\"graf graf--li graf-after--p\">Grabs a ~50kb image from S3.</li>\n<li id=\"c9d5\" class=\"graf graf--li graf-after--li\">Writes its LastModified timestamp to a DynamoDB table.</li>\n</ol>\n<p id=\"91ea\" class=\"graf graf--p graf-after--li\">This mimics a typical scenario for upload sites or general file processing. The test setup is exactly the same as the Fibonacci test, with just an added S3 bucket and Dynamo table. Both versions use the standard AWS SDK for each language respectively. The Dynamo table has its write capacity pumped up to 1000 units to allow for enough throughput.</p>\n<p id=\"d508\" class=\"graf graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">Node.js</strong></p>\n<pre><code data-enlighter-language=\"null\">const AWS = require('aws-sdk')\r\nconst s3 = new AWS.S3()\r\nconst dynamodb = new AWS.DynamoDB()\r\n\r\nexports.handler = (event, context, callback) =&gt; {\r\n  fetchS3()\r\n    .then(data =&gt; {\r\n      console.log(data)\r\n      return putDynamoDB(data.LastModified.toString())\r\n    })\r\n    .then(data =&gt; {\r\n      console.log(data)\r\n\r\n      const result = {\r\n        \"isBase64Encoded\": false,\r\n        \"statusCode\": 200,\r\n        \"headers\": {},\r\n        \"body\": \"done\"\r\n      }\r\n\r\n      callback(null, result);\r\n    })\r\n};\r\n\r\n\r\nfunction fetchS3 (cb) {\r\n  return new Promise((resolve, reject) =&gt; {\r\n    const params = {\r\n      Bucket: 'staging.vamp.io',\r\n      Key: 'img/006-mock-ups/VAMP-light-laptop-v091-hero.png'\r\n    }\r\n    s3.getObject(params, (err, data) =&gt;{\r\n      if (err) return reject(err)\r\n      resolve(data)  \r\n    })\r\n  })\r\n}\r\n\r\nfunction putDynamoDB (msg) {\r\n  return new Promise((resolve, reject) =&gt; {\r\n    const params = {\r\n      Item: {\r\n       \"message\": {\r\n         S: msg\r\n        }\r\n      }, \r\n      TableName: \"loadtestlambda\"\r\n     };\r\n\r\n     dynamodb.putItem(params, (err, data) =&gt; {\r\n      if (err) return reject(err)\r\n      resolve(data)  \r\n     })\r\n  })\r\n}</code></pre>\n<p id=\"ba75\" class=\"graf graf--p graf-after--figure\">The\u00a0<strong class=\"markup--strong markup--p-strong\">Go</strong>\u00a0code:</p>\n<pre><code data-enlighter-language=\"null\">package main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"github.com/aws/aws-lambda-go/events\"\r\n  \"github.com/aws/aws-lambda-go/lambda\"\r\n  \"github.com/aws/aws-sdk-go/aws\"\r\n  \"github.com/aws/aws-sdk-go/aws/session\"\r\n  \"github.com/aws/aws-sdk-go/service/dynamodb\"\r\n  \"github.com/aws/aws-sdk-go/service/s3\"\r\n  \"io/ioutil\"\r\n)\r\n\r\nfunc Handler() (events.APIGatewayProxyResponse, error) {\r\n  resultS3, err := fetchS3()\r\n  if err != nil {\r\n    fmt.Println(err)\r\n  }\r\n  fmt.Println(resultS3)\r\n\r\n  _, err = ioutil.ReadAll(resultS3.Body)\r\n  if err != nil {\r\n    fmt.Println(err)\r\n  }\r\n\r\n  resultDD, err := putDynamoDB(resultS3.LastModified.String())\r\n  if err != nil {\r\n    fmt.Println(err)\r\n  }\r\n  fmt.Println(resultDD)\r\n\r\n  return events.APIGatewayProxyResponse{\r\n    Body:       \"done\",\r\n    StatusCode: 200,\r\n  }, nil\r\n}\r\n\r\nfunc main() {\r\n  lambda.Start(Handler)\r\n}\r\n\r\nfunc fetchS3() (*s3.GetObjectOutput, error) {\r\n  svcS3 := s3.New(session.New())\r\n  input := &amp;s3.GetObjectInput{\r\n    Bucket: aws.String(\"staging.vamp.io\"),\r\n    Key:    aws.String(\"img/006-mock-ups/VAMP-light-laptop-v091-hero.png\"),\r\n  }\r\n\r\n  return svcS3.GetObject(input)\r\n}\r\n\r\nfunc putDynamoDB(msg string) (*dynamodb.PutItemOutput, error) {\r\n  svcDynamo := dynamodb.New(session.New())\r\n  input := &amp;dynamodb.PutItemInput{\r\n    Item: map[string]*dynamodb.AttributeValue{\r\n      \"message\": {\r\n        S: aws.String(msg),\r\n      },\r\n    },\r\n    TableName: aws.String(\"loadtestlambda\"),\r\n  }\r\n\r\n  return svcDynamo.PutItem(input)\r\n}</code></pre>\n<h3 id=\"6fe1\" class=\"graf graf--h3 graf-after--figure\">Test Results: S3 &amp; Dynamo interaction</h3>\n<p><img class=\"alignnone wp-image-457 size-full\" src=\"https://emolike.net/wp-content/uploads/2018/04/download-2.png\" alt=\"\" width=\"881\" height=\"403\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/download-2.png 881w, https://emolike.net/wp-content/uploads/2018/04/download-2-300x137.png 300w, https://emolike.net/wp-content/uploads/2018/04/download-2-768x351.png 768w, https://emolike.net/wp-content/uploads/2018/04/download-2-590x270.png 590w\" sizes=\"(max-width: 881px) 100vw, 881px\" /></p>\n<p id=\"0c6d\" class=\"graf graf--p graf-after--h3\">This is a much clearer result than the former test, it is only in the 99% percentile that both tests are somewhat equal but still far apart. All values below this threshold are all in favour of Go. This is where users that have high volume AWS functions could really save money when switching to Go, as their bill could effectively be cut by up to ~40%.</p>\n<section class=\"section section--body section--first\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p id=\"37cc\" class=\"graf graf--p graf-after--pre\"><em class=\"markup--em markup--p-em\">NOTE: Updated after adding a reader to the io.Reader body in the Go code as per a remark in the comment</em><span class=\"markup--quote markup--p-quote is-other\" data-creator-ids=\"2e0ed32cac6\"><em class=\"markup--em markup--p-em\">\u00a0</em></span><em class=\"markup--em markup--p-em\">section. This had virtually no impact on the results, probably due to excessive S3 caching. Not expect, but hey, what is?</em></p>\n<h3 id=\"8bcd\" class=\"graf graf--h3 graf-after--p\">Dynamic vs.\u00a0Compiled</h3>\n<p id=\"9ec2\" class=\"graf graf--p graf-after--h3\">What\u2019s not really apparent in any of the AWS marketing blurb is that you actually provide AWS Lambda with a precompiled Go binary. AWS does not compile the Go source files for you and this has a couple of consequences.</p>\n<p id=\"b432\" class=\"graf graf--p graf-after--p\">Firstly, AWS Lambda is actually not \u201creally\u201d running Go code. Instead it\u2019s running a binary that listens on a specific port and is passed a message in a specific wire format. This is actually pretty good as it opens up the possibility for AWS adding other compiled languages like Rust or C++ later down the road, building on their current Go engine.</p>\n<p id=\"a90b\" class=\"graf graf--p graf-after--p\">Secondly, on a less positive note, having pre-compiled binaries means you cannot use the rather excellent built in code editor. This mini IDE courtesy of AWS\u2019s recent Cloud9 acquisition is top of the class and really makes the Lambda service page feel a bit like JsFiddle or CodePen, but for backend code that could run in production at the touch of a button. I\u2019m a big IntelliJ / WebStorm user, but Cloud9\u2019s stuff is really, really good. \ud83d\udc4d</p>\n<figure id=\"01c6\" class=\"graf graf--figure graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*zOAp2PdIpsnesG__ogvKvg.png\" data-width=\"1502\" data-height=\"1077\" data-action=\"zoom\" data-action-value=\"1*zOAp2PdIpsnesG__ogvKvg.png\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"75\" height=\"53\"></canvas><img class=\"alignnone size-full wp-image-455\" src=\"https://emolike.net/wp-content/uploads/2018/04/1zOAp2PdIpsnesG__ogvKvg-3.png\" width=\"1000\" height=\"717\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/1zOAp2PdIpsnesG__ogvKvg-3.png 1000w, https://emolike.net/wp-content/uploads/2018/04/1zOAp2PdIpsnesG__ogvKvg-3-300x215.png 300w, https://emolike.net/wp-content/uploads/2018/04/1zOAp2PdIpsnesG__ogvKvg-3-768x551.png 768w, https://emolike.net/wp-content/uploads/2018/04/1zOAp2PdIpsnesG__ogvKvg-3-377x270.png 377w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></div>\n</div><figcaption class=\"imageCaption\">AWS Lambda built in code\u00a0editor</figcaption></figure>\n<h3 id=\"e30b\" class=\"graf graf--h3 graf-after--figure\">Conclusion</h3>\n<p id=\"367f\" class=\"graf graf--p graf-after--h3 graf--trailing\">Go support for AWS Lambda opens up a pretty significant cost saving and performance benefit for those running workloads on Lambda. Exciting stuff will be happening!</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body section--last\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p id=\"334a\" class=\"graf graf--p graf--leading\">If you liked this article, please show your appreciation by\u00a0<strong class=\"markup--strong markup--p-strong\">clapping\u00a0</strong>\ud83d\udc4f below!</p>\n<p id=\"9527\" class=\"graf graf--p graf-after--p\">Tim is a product advocate for\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://vamp.io/?utm_campaign=govsnode&amp;utm_source=Hackernoon\" target=\"_blank\" rel=\"noopener\" data-href=\"https://vamp.io?utm_campaign=govsnode&amp;utm_source=Hackernoon\">https://vamp.io</a>, the smart &amp; stress free application releasing for modern cloud platforms.</p>\n</div>\n</div>\n</section>\n", "slug": "aws-lambda-go-vs-node-js-performance-benchmark", "date": 1524830283, "cats": [0, 18, 23, 14]}