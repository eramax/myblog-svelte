{"title": "Build and Deploy an ASP .Net Core Web Application as Docker Container using Microsoft Azure", "content": "<h2>Introduction</h2>\n<p>This is the final part in the series of articles about building an ASP .Net Core Web Application and deploying it as a Docker container using Microsoft Azure. Here, we are going to setup a\u00a0<a href=\"https://dev.azure.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft Azure DevOps</a>\u00a0release pipeline to automate the deployment of our application as a container on\u00a0<a href=\"https://azure.microsoft.com/en-in/services/app-service/web/\" target=\"_blank\" rel=\"noopener noreferrer\">Azure Web App Service</a>.</p>\n<p>If you have been following along, you must have:</p>\n<ul>\n<li>a GitHub repository with an ASP .Net Core (or something similar) web application</li>\n<li>a\u00a0<a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"noopener noreferrer\">Dockerfile</a>\u00a0to build an Image for your application</li>\n<li>Azure DevOps Pipelines integration with\u00a0<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\u00a0to automatically trigger a build</li>\n<li>a Continuous Integration pipeline in Azure DevOps to build Docker Image and push it to Docker Hub</li>\n</ul>\n<p>Three parts in series:</p>\n<ol>\n<li><a href=\"https://www.quickdevnotes.com/deploy-net-core-web-application-using-azure-and-docker/\" target=\"_blank\" rel=\"noopener noreferrer\">develop an ASP .Net Core web application and containerize it with Docker</a></li>\n<li><a href=\"https://www.quickdevnotes.com/setup-microsoft-azure-build-pipeline/\" target=\"_blank\" rel=\"noopener noreferrer\">setup Continuous Integration with Microsoft Azure DevOps Pipeline and GitHub</a></li>\n<li><a href=\"https://www.quickdevnotes.com/setup-release-pipeline-with-azure-devops/\" target=\"_blank\" rel=\"noopener noreferrer\">setup Continuous Deployment pipeline to deploy the application as Docker container on Azure Web App Service</a></li>\n</ol>\n<p> </p>\n<h2>Deploy manually on Azure Web App Service</h2>\n<p>Before we get into any automation, let\u2019s first deploy our application manually and see if it\u2019s working. In order to do that, go to\u00a0<a href=\"https://portal.azure.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft Azure portal</a>\u00a0and provide the login details.</p>\n<p>From the navigation panel, select App Services and then select Add. On the window that follows:</p>\n<ul>\n<li>provide a name for your application</li>\n<li>select subscription</li>\n<li>you may create a new resource group or use an existing resource group</li>\n<li>select the required OS</li>\n<li>for\u00a0<strong>Publish</strong>, select\u00a0<strong>Docker Image</strong></li>\n</ul>\n<figure id=\"attachment_763\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-763\"><img class=\"alignnone size-full wp-image-1483\" src=\"https://emolike.net/wp-content/uploads/2019/06/add-app-service.png\" width=\"854\" height=\"801\" alt=\"Add Azure App Service\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/add-app-service.png 854w, https://emolike.net/wp-content/uploads/2019/06/add-app-service-300x281.png 300w, https://emolike.net/wp-content/uploads/2019/06/add-app-service-768x720.png 768w\" sizes=\"(max-width: 854px) 100vw, 854px\" /><figcaption id=\"caption-attachment-763\" class=\"wp-caption-text\">Adding Azure App Service</figcaption></figure>\n<p>Next step is to select\u00a0<strong>Configure Container</strong>, and provide details about the Docker image you want to use for your application. By default,\u00a0<strong>Single Container\u00a0</strong>is active. Select\u00a0<strong>Docker Hub\u00a0</strong>as the image registry, or which ever is applicable. Select, if your registry is private or public and then provide the name of your Docker image.</p>\n<figure id=\"attachment_768\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-768\"><img class=\"alignnone size-full wp-image-1484\" src=\"https://emolike.net/wp-content/uploads/2019/06/config-container.png\" width=\"1117\" height=\"393\" alt=\"Container configuration \" srcset=\"https://emolike.net/wp-content/uploads/2019/06/config-container.png 1117w, https://emolike.net/wp-content/uploads/2019/06/config-container-300x106.png 300w, https://emolike.net/wp-content/uploads/2019/06/config-container-768x270.png 768w, https://emolike.net/wp-content/uploads/2019/06/config-container-1024x360.png 1024w\" sizes=\"(max-width: 1117px) 100vw, 1117px\" /><figcaption id=\"caption-attachment-768\" class=\"wp-caption-text\">Container configuration</figcaption></figure>\n<p>Once you click\u00a0<strong>Apply</strong>, you are redirected to previous page. Click\u00a0<strong>Create</strong>\u00a0and the deployment will start after a few validations that will not take too long.</p>\n<p>Once the deployment is complete, you get a notification. After that, if you refresh the App Services page, the newly created app will be in the list.</p>\n<figure id=\"attachment_766\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-766\"><img class=\"alignnone size-full wp-image-1485\" src=\"https://emolike.net/wp-content/uploads/2019/06/deployment-success.png\" width=\"1216\" height=\"304\" alt=\"Deployment notification \" srcset=\"https://emolike.net/wp-content/uploads/2019/06/deployment-success.png 1216w, https://emolike.net/wp-content/uploads/2019/06/deployment-success-300x75.png 300w, https://emolike.net/wp-content/uploads/2019/06/deployment-success-768x192.png 768w, https://emolike.net/wp-content/uploads/2019/06/deployment-success-1024x256.png 1024w\" sizes=\"(max-width: 1216px) 100vw, 1216px\" /><figcaption id=\"caption-attachment-766\" class=\"wp-caption-text\">Deployment notification</figcaption></figure>\n<p><em>Congratulations!!\u00a0</em>You just deployed your application as a Docker container on Microsoft Azure App Services.</p>\n<p> </p>\n<h2>Testing the application</h2>\n<p>It\u2019s time to check, if your application is actually working or not. From the App Services page, select your app. Now, from the top right of the overview pane grab the URL for your application.</p>\n<figure id=\"attachment_764\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-764\"><img class=\"alignnone size-full wp-image-1486\" src=\"https://emolike.net/wp-content/uploads/2019/06/app-url.png\" width=\"1216\" height=\"304\" alt=\"Get Azure App URL\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/app-url.png 1216w, https://emolike.net/wp-content/uploads/2019/06/app-url-300x75.png 300w, https://emolike.net/wp-content/uploads/2019/06/app-url-768x192.png 768w, https://emolike.net/wp-content/uploads/2019/06/app-url-1024x256.png 1024w\" sizes=\"(max-width: 1216px) 100vw, 1216px\" /><figcaption id=\"caption-attachment-764\" class=\"wp-caption-text\">Get Azure App URL</figcaption></figure>\n<p>Open the URL in your favourite browser and you must have your application working. Here is mine:</p>\n<figure id=\"attachment_758\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-758\"><img class=\"alignnone size-full wp-image-1487\" src=\"https://emolike.net/wp-content/uploads/2019/06/working-app-e1555958144693.png\" width=\"1447\" height=\"748\" alt=\"Manually deployed application\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/working-app-e1555958144693.png 1447w, https://emolike.net/wp-content/uploads/2019/06/working-app-e1555958144693-300x155.png 300w, https://emolike.net/wp-content/uploads/2019/06/working-app-e1555958144693-768x397.png 768w, https://emolike.net/wp-content/uploads/2019/06/working-app-e1555958144693-1024x529.png 1024w\" sizes=\"(max-width: 1447px) 100vw, 1447px\" /><figcaption id=\"caption-attachment-758\" class=\"wp-caption-text\">Manually deployed application</figcaption></figure>\n<p>If the application is not working, the first thing you want to check is the logs. For that, go to\u00a0<strong>Settings</strong>\u00a0<strong>&gt;</strong>\u00a0<strong>Container Settings</strong>\u00a0and you see the Logs. Here is how it looks:</p>\n<figure id=\"attachment_759\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-759\"><img class=\"alignnone size-full wp-image-1488\" src=\"https://emolike.net/wp-content/uploads/2019/06/app-logs.png\" width=\"1212\" height=\"761\" alt=\"Deployment Logs for Container\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/app-logs.png 1212w, https://emolike.net/wp-content/uploads/2019/06/app-logs-300x188.png 300w, https://emolike.net/wp-content/uploads/2019/06/app-logs-768x482.png 768w, https://emolike.net/wp-content/uploads/2019/06/app-logs-1024x643.png 1024w\" sizes=\"(max-width: 1212px) 100vw, 1212px\" /><figcaption id=\"caption-attachment-759\" class=\"wp-caption-text\">Deployment Logs for Container</figcaption></figure>\n<p> </p>\n<h2>Adding Service Connection</h2>\n<p>For the release pipeline to be able to deploy your application automatically on Azure App services, it requires to have access to the Azure resources.</p>\n<p>In order to grant the access, go to\u00a0<strong>Project Properties\u00a0</strong><strong>&gt; Service Connections</strong>\u00a0and then select New service connection.</p>\n<p>From the list, select Azure Resource Manager and fill the details on the modal window that follows. Select scope level as Subscription and then select your subscription. Later select the resource group in which you have created the App Service for your application.</p>\n<figure id=\"attachment_760\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-760\"><img class=\"alignnone size-full wp-image-1489\" src=\"https://emolike.net/wp-content/uploads/2019/06/service-connection.png\" width=\"1094\" height=\"682\" alt=\"Add Service Connection for Azure Resources\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/service-connection.png 1094w, https://emolike.net/wp-content/uploads/2019/06/service-connection-300x187.png 300w, https://emolike.net/wp-content/uploads/2019/06/service-connection-768x479.png 768w, https://emolike.net/wp-content/uploads/2019/06/service-connection-1024x638.png 1024w\" sizes=\"(max-width: 1094px) 100vw, 1094px\" /><figcaption id=\"caption-attachment-760\" class=\"wp-caption-text\">Add Service Connection for Azure Resources</figcaption></figure>\n<p> </p>\n<h2>Azure DevOps Release Pipeline</h2>\n<p>Alright then! It\u2019s time to automate our next release by creating a release pipeline in Azure. Go to\u00a0<a href=\"https://dev.azure.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Azure DevOps</a>, select your organisation and project.</p>\n<p>Under Pipelines select\u00a0<strong>Releases</strong>\u00a0and then click on\u00a0<strong>New pipeline</strong>. Let\u2019s start by giving your pipeline a nice name, using the text field at the top.</p>\n<p> </p>\n<h3>Adding a Build Artifact</h3>\n<p>Now, let\u2019s add an artifact to the pipeline. Click on\u00a0<strong>Add an artifact</strong>\u00a0and select Docker Hub as the source type. From the dropdown select service connection for Docker Hub which we had setup in the\u00a0<a href=\"https://www.quickdevnotes.com/setup-microsoft-azure-build-pipeline/\" target=\"_blank\" rel=\"noopener noreferrer\">previous article</a>.</p>\n<figure id=\"attachment_765\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-765\"><img class=\"alignnone size-full wp-image-1490\" src=\"https://emolike.net/wp-content/uploads/2019/06/add-artifact.png\" width=\"1442\" height=\"797\" alt=\"Adding an artifact for Release Pipeline\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/add-artifact.png 1442w, https://emolike.net/wp-content/uploads/2019/06/add-artifact-300x166.png 300w, https://emolike.net/wp-content/uploads/2019/06/add-artifact-768x424.png 768w, https://emolike.net/wp-content/uploads/2019/06/add-artifact-1024x566.png 1024w\" sizes=\"(max-width: 1442px) 100vw, 1442px\" /><figcaption id=\"caption-attachment-765\" class=\"wp-caption-text\">Adding an artifact for Release Pipeline</figcaption></figure>\n<p>Select the namespace and repository you want have setup for your application. For\u00a0<strong>default version</strong>, you may either select \u201cLatest\u201d or \u201cSpecify at the time of release creation\u201d. It depends on your requirement.</p>\n<p>If you select \u201cLatest\u201d, you have to ensure that you always tag your Docker images as \u201clatest\u201d in the build pipeline. I prefer to use the other option.</p>\n<p> </p>\n<h3>Adding tasks to Pipeline</h3>\n<p>We now have to add a stage to the release pipeline. Click on \u201cAdd a stage\u201d and select \u201c<strong>Azure Web App on Container Deploy</strong>\u201d and give it a name. And switch to\u00a0<strong>Tasks\u00a0</strong>tab.</p>\n<p>The first entry in the task list is the agent setup, for which we are going to select\u00a0<strong>Hosted Ubuntu 1604\u00a0</strong>as the agent pool. You can leave the rest as is.</p>\n<p>Now, select the second task and under Azure subscription, select the service connection we have setup in earlier steps. After that, it gives you the list of applications to select from. The most important is Image name. Therefore, please ensure that it is exactly same as what you have setup in the build pipeline.</p>\n<figure id=\"attachment_761\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-761\"><img class=\"alignnone size-full wp-image-1491\" src=\"https://emolike.net/wp-content/uploads/2019/06/task-definition.png\" width=\"1185\" height=\"801\" alt=\"Release Pipeline Task Definition\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/task-definition.png 1185w, https://emolike.net/wp-content/uploads/2019/06/task-definition-300x203.png 300w, https://emolike.net/wp-content/uploads/2019/06/task-definition-768x519.png 768w, https://emolike.net/wp-content/uploads/2019/06/task-definition-1024x692.png 1024w\" sizes=\"(max-width: 1185px) 100vw, 1185px\" /><figcaption id=\"caption-attachment-761\" class=\"wp-caption-text\">Release Pipeline Task Definition</figcaption></figure>\n<p>We are almost done here. However, there is one missing. We have not yet enabled the automatic trigger for the release pipeline to start. Let\u2019s do that now.</p>\n<p>Go back to Pipeline tab. If you now click the lightning bolt symbol at top right of artifact, it allows you to enable Continuous deployment trigger. So, go ahead and do that.</p>\n<figure id=\"attachment_767\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-767\"><img class=\"alignnone size-full wp-image-1492\" src=\"https://emolike.net/wp-content/uploads/2019/06/release-trigger.png\" width=\"1135\" height=\"522\" alt=\"Continuous deployment trigger\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/release-trigger.png 1135w, https://emolike.net/wp-content/uploads/2019/06/release-trigger-300x138.png 300w, https://emolike.net/wp-content/uploads/2019/06/release-trigger-768x353.png 768w, https://emolike.net/wp-content/uploads/2019/06/release-trigger-1024x471.png 1024w\" sizes=\"(max-width: 1135px) 100vw, 1135px\" /><figcaption id=\"caption-attachment-767\" class=\"wp-caption-text\">Continuous deployment trigger</figcaption></figure>\n<p>You can also add certain filters to the trigger if you want. But for now, I will keep it easy and simple. Finally, save the release pipeline.</p>\n<p> </p>\n<h2>Testing the CI/CD Pipeline (end-to-end test)</h2>\n<p>Finally, it\u2019s time to test everything we have done so far. In order to do so:</p>\n<ul>\n<li>change something in your application</li>\n<li>push the changes to master branch</li>\n<li>the build pipeline starts and pushes a new image to Docker Hub</li>\n<li>push to Docker Hub triggers the release pipeline</li>\n<li>the latest changes of your application are now visible</li>\n</ul>\n<p>Take your time and change something that you can use to verify if everything is working. In fact, you can also refer the logs of your Azure App Service, to validate which tag of the Docker image is running at the moment.</p>\n<figure id=\"attachment_762\" class=\"wp-caption aligncenter\" aria-describedby=\"caption-attachment-762\"><img class=\"alignnone size-full wp-image-1493\" src=\"https://emolike.net/wp-content/uploads/2019/06/deployment.png\" width=\"1251\" height=\"768\" alt=\"Logs of new deployment with Release Pipeline\" srcset=\"https://emolike.net/wp-content/uploads/2019/06/deployment.png 1251w, https://emolike.net/wp-content/uploads/2019/06/deployment-300x184.png 300w, https://emolike.net/wp-content/uploads/2019/06/deployment-768x471.png 768w, https://emolike.net/wp-content/uploads/2019/06/deployment-1024x629.png 1024w\" sizes=\"(max-width: 1251px) 100vw, 1251px\" /><figcaption id=\"caption-attachment-762\" class=\"wp-caption-text\">Logs of new deployment with Release Pipeline</figcaption></figure>\n<p>For instance, in the above image, notice the logs highlighted with green squares. This shows that the Azure DevOps Pipelines that I have setup is working.</p>\n<p><em>Many many congratulations!! We have successfully achieved a milestone.</em></p>\n<p> </p>\n<h2>Conclusion</h2>\n<p>To begin with, we developed an ASP .Net Core based web application and put our code in a GitHub repository. After that, we setup a build pipeline to automatically build a Docker image for our application and later push it to Docker Hub. Next, in this article we have created a release pipeline to automatically deploy our application as a Docker container on Azure Web App service.</p>\n<p>I hope it\u2019s working for you as well, however, if you are facing an issue at any part of this series, I will be really glad to help you out.</p>\n<p> </p>\n<p>Source : <a href=\"https://www.quickdevnotes.com/setup-release-pipeline-with-azure-devops/\">https://www.quickdevnotes.com/setup-release-pipeline-with-azure-devops/</a></p>\n<p> </p>\n", "slug": "build-and-deploy-an-asp-net-core-web-application-as-docker-container-using-microsoft-azure", "date": 1557086347, "cats": [12, 7, 0, 8]}