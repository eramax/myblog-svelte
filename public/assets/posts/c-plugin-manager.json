{"title": "C# Plugin Manager", "content": "<p>Plugins and modules are widely used in almost any type of application. They enhance them with additional features. Beside adding features, plugins have the big advantage, that they separate code in a very clean and testable way. Even hundreds of plugins can be managed without problems, as their functionality is encapsuled in a single place.</p>\n<p>This tutorial will explain you, how to implement a C# plugin- and module application-architecure, which is quite simple, clean and easy to maintain!</p>\n<p><strong>Differences between plugins and modules</strong></p>\n<p><i>Plugins</i>\u00a0add small functionalities to a software. An example could be a plugin which adds business-logic to a CRM- or an ERP-system. The registration is very lightweight normally.</p>\n<p><i>Modules</i>\u00a0have more functionality. Possibly adding a whole new part to a system like i.e. a logistics-module. The registration comes often with some meta-data about the module and brings resources such as icons, menupoints etc.</p>\n<h2>Application Plugin Architecture</h2>\n<p>The following diagram shows, how a plugin/module based architecture looks like. It is made up of our application with the pluginmanager, the plugins and the SDK. The pluginmanager searches for, loads, registers and executes available plugins.</p>\n<p><img class=\"alignnone size-full wp-image-966\" src=\"https://emolike.net/wp-content/uploads/2018/09/ApplicationPluginArchitecture.png\" alt=\"Application Plugin Architecture\" width=\"376\" height=\"311\" srcset=\"https://emolike.net/wp-content/uploads/2018/09/ApplicationPluginArchitecture.png 376w, https://emolike.net/wp-content/uploads/2018/09/ApplicationPluginArchitecture-300x248.png 300w, https://emolike.net/wp-content/uploads/2018/09/ApplicationPluginArchitecture-326x270.png 326w\" sizes=\"(max-width: 376px) 100vw, 376px\" /></p>\n<p>Notice that the application and the plugins share the SDK, which provides everything the plugin needs to know (i.E. interfaces and parameter-classes). It is normally implemented in a separate library and referenced in each plugin-project.</p>\n<h2>Solution files tree</h2>\n<p><img class=\"alignnone size-full wp-image-960\" src=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0663\u0664\u0663\u0662\u0660.png\" alt=\"\" width=\"355\" height=\"784\" srcset=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0663\u0664\u0663\u0662\u0660.png 355w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0663\u0664\u0663\u0662\u0660-136x300.png 136w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0663\u0664\u0663\u0662\u0660-122x270.png 122w\" sizes=\"(max-width: 355px) 100vw, 355px\" /></p>\n<h2>First Implementing an AppSDK in C#</h2>\n<p>we create AppSDK as a library project\u00a0then we should create an interface for any plugin (AppSDK/interfaces.cs)</p>\n<pre><code data-enlighter-language=\"csharp\">public interface IPlugin\r\n{\r\n    string pluginName();\r\n    void run();\r\n    void load(IConfig conf);\r\n    void unload();\r\n}</code></pre>\n<p>so each plugin should have to implement pluginName, run , load with configurations, unload methods.</p>\n<p>We are going to create some other interfaces (AppSDK/interfaces.cs)</p>\n<pre><code data-enlighter-language=\"csharp\">namespace AppSDK\r\n{\r\n    public interface ILoger\r\n    {\r\n        void log(string message);\r\n    }\r\n    public interface IUser\r\n    {\r\n        int getUserId();\r\n        string getUserName();\r\n    }\r\n    public interface IUserManager\r\n    {\r\n        IUser getUser();\r\n    }\r\n    public interface IConfig\r\n    {\r\n        ILoger getLoger();\r\n        IUserManager getUserManager();\r\n        string getDbConnectionString();\r\n    }\r\n\r\n}</code></pre>\n<p>Then we will implement theses interfaces in our AppSDK with the default implementation but we are later can use alternative implementations coming from the plugins we will attach.(AppSDK/App.cs)</p>\n<pre><code data-enlighter-language=\"csharp\">public class Loger : ILoger\r\n {\r\n     public void log(string message)\r\n     {\r\n         Console.WriteLine(\"Loger: \" + message);\r\n     }\r\n }\r\n public class Config : IConfig\r\n {\r\n     public ILoger getLoger()\r\n     {\r\n         return new Loger();\r\n     }\r\n\r\n     public IUserManager getUserManager()\r\n     {\r\n         throw new NotImplementedException();\r\n     }\r\n\r\n     public string getDbConnectionString()\r\n     {\r\n         return @\"Data Source=.\\SQLEXPRESS;Initial Catalog=AppDb;Integrated Security=True;\";\r\n     }\r\n }</code></pre>\n<h4>Implementing the Plugin Manager\u00a0<em>(AppSDK/App.cs)</em></h4>\n<pre><code data-enlighter-language=\"csharp\">public static class PluginManager\r\n   {\r\n       private static Dictionary&lt;string, IPlugin&gt; _plugins = new Dictionary&lt;string, IPlugin&gt;();\r\n       private static Config _config = new Config();\r\n       public static bool LoadPlugin(string dllFile)\r\n       {\r\n           try\r\n           {\r\n               Assembly.LoadFrom(dllFile);\r\n               foreach(Assembly a in AppDomain.CurrentDomain.GetAssemblies())\r\n               {\r\n                   foreach(Type t in a.GetTypes())\r\n                   {\r\n                       if(t.GetInterface(\"IPlugin\") != null)\r\n                       {\r\n                           IPlugin plugin = Activator.CreateInstance(t) as IPlugin;\r\n                           _plugins.Add(plugin.pluginName(), plugin);\r\n                           _plugins[plugin.pluginName()].load(_config);\r\n                       }\r\n                   }\r\n               }\r\n           }\r\n           catch (Exception ex) { return false; }\r\n           return true;\r\n       }\r\n       public static Dictionary&lt;string, IPlugin&gt; listPlugins()\r\n       {\r\n           return _plugins;\r\n       }\r\n   }</code></pre>\n<p>as we can see each plugin needs some configurations to work like userManager class, DbConnectionString, LoggerClass so we used IoC to attach these required objects with out configuration object.</p>\n<h2>Second Implementing a plugin in C#</h2>\n<p>we are going to implement a simple plugin that will be used to get connection string from the app and then connect to MS SQL Server and print console message.</p>\n<p>we create this plugin as a library project\u00a0 (SQLServerClient_plugin/SQLServerClient.cs)</p>\n<pre><code data-enlighter-language=\"csharp\">using System;\r\nusing AppSDK;\r\nusing System.Data.SqlClient;\r\n\r\nnamespace SQLServerClient_plugin\r\n{\r\n    public class SQLServerClient : IPlugin\r\n    {\r\n        private ILoger _logger;\r\n        private string _connectionString;\r\n        private IUserManager _userManager;\r\n\r\n        public void load(IConfig conf)\r\n        {\r\n            _logger = conf.getLoger();\r\n            _connectionString = conf.getDbConnectionString();\r\n        }\r\n        public void setConnectionString(string connectionString)\r\n        {\r\n            _connectionString = connectionString;\r\n        }\r\n\r\n        public string pluginName()\r\n        {\r\n            return \"SQLServerClient\";\r\n        }\r\n           \r\n        public void run()\r\n        {\r\n            connect(_connectionString);\r\n        }\r\n        public void connect(string connectionString)\r\n        {\r\n            try\r\n            {\r\n                SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();\r\n                Console.Write(\"Connecting to SQL Server ... \");\r\n                using (SqlConnection connection = new SqlConnection(connectionString))\r\n                {\r\n                    connection.Open();\r\n                    Console.WriteLine(\"Done.\");\r\n                }\r\n            }\r\n            catch (SqlException e)\r\n            {\r\n                Console.WriteLine(e.ToString());\r\n            }\r\n\r\n            Console.WriteLine(\"All done. Press any key to finish...\");\r\n            Console.ReadKey(true);\r\n        }\r\n\r\n        public void unload()\r\n        {\r\n            \r\n        }\r\n    }\r\n}\r\n</code></pre>\n<p>we can see that each plugin should implement IPlugin interface and therefore it should add AppSDK reference in its dependencies.</p>\n<p>The main logic and work of the plugin will be in run method.</p>\n<h2>Third Implementing a App Client in C#</h2>\n<p>Now we created the AppSDK and implemented one or more plugins, so now we are going to create Application Client\u00a0 as console application which will use the AppSDK and will request to load some plugins and will run theses plugins.</p>\n<pre><code data-enlighter-language=\"csharp\">using System;\r\nusing System.Collections.Generic;\r\nusing AppSDK;\r\n\r\nnamespace App\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            PluginManager.LoadPlugin(@\"C:\\Users\\Administrator\\Documents\\Visual Studio 2015\\Projects\\AppSDK\\SQLServerClient_plugin\\bin\\Debug\\SQLServerClient_plugin.dll\");\r\n            Dictionary&lt;string, IPlugin&gt; plugins = PluginManager.listPlugins();\r\n            foreach (KeyValuePair&lt;string, IPlugin&gt; p in plugins)\r\n            {\r\n                Console.WriteLine(p.Key);\r\n                p.Value.run();\r\n            }\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n}\r\n</code></pre>\n<p>As we can see we called PluginManager to load the SQLServerClient_plugin dll file, then we called a method in the AppSDK to retrieve all loaded plugins and we are going to console each plugin name and then run it.</p>\n<h2>Final Step compile and run</h2>\n<p>To compile this project we have to configure Visual Studio to compile all projects in the workspace with the following steps.</p>\n<p>From Tools -&gt; Options -&gt; Project and Solutions -&gt; Build and Run -&gt;</p>\n<p> </p>\n<p><img class=\"alignnone size-full wp-image-962\" src=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0668\u0662\u0668.png\" alt=\"\" width=\"755\" height=\"442\" srcset=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0668\u0662\u0668.png 755w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0668\u0662\u0668-300x176.png 300w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0668\u0662\u0668-461x270.png 461w\" sizes=\"(max-width: 755px) 100vw, 755px\" /></p>\n<p>Then set the default application to startup to App project and then build the project</p>\n<p><img class=\"alignnone size-full wp-image-963\" src=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0669\u0664\u0661.png\" alt=\"\" width=\"1382\" height=\"236\" srcset=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0669\u0664\u0661.png 1382w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0669\u0664\u0661-300x51.png 300w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0669\u0664\u0661-768x131.png 768w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0669\u0664\u0661-1024x175.png 1024w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0660\u0669\u0664\u0661-604x103.png 604w\" sizes=\"(max-width: 1382px) 100vw, 1382px\" /></p>\n<p>Then Run the project</p>\n<p><img class=\"alignnone size-full wp-image-964\" src=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0661\u0660\u0661\u0663.png\" alt=\"\" width=\"673\" height=\"341\" srcset=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0661\u0660\u0661\u0663.png 673w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0661\u0660\u0661\u0663-300x152.png 300w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0663\u0661\u0664\u0661\u0660\u0661\u0663-533x270.png 533w\" sizes=\"(max-width: 673px) 100vw, 673px\" /></p>\n<p>Congratulations, We succeeded to load a plugin on the fly and execute this plugin logic.</p>\n<p>Source Code pushed to\u00a0<a href=\"https://gitlab.com/eramax/pluginsystem\">https://gitlab.com/eramax/pluginsystem</a></p>\n<p>Best Wishes.</p>\n", "slug": "c-plugin-manager", "date": 1537704761, "cats": [0, 13, 14, 17]}