{"title": "C# RSS generator in less than than 50 lines of code", "content": "<p>What kind of technical blog doesn&#8217;t have RSS feed? Well, this one didn&#8217;t have one. This short post will present single method for generating RSS feed we are using, and answer why we are not using existing solution.</p>\n<p>After googling for existing solutions for generating RSS feed, one of the first solution was to use\u00a0<a href=\"https://github.com/shawnwildermuth/RssSyndication\">Wildermuth&#8217;s RssSyndication</a>\u00a0library. After trying to install nuget package\u00a0<code>WilderMinds.RssSyndication</code>\u00a0I quickly realized it won&#8217;t work, because latest version of the library is targeting .NETStandard 2.0 and our blog is hosted on .NET Core 1.1. We could upgrade to .NET Core 2.0, but then we would either have to either 1) switch server because we have more than one app on this server running on .NET Core 1.1 or 2) publish our app as\u00a0<a href=\"https://docs.microsoft.com/en-us/dotnet/core/deploying/\">self-contained-binaries</a>. We didn&#8217;t like our options. Another solution would have been to use older version of\u00a0<code>WilderMinds.RssSyndication</code>.</p>\n<p>Quickly digging trough commits brought me to\u00a0<a href=\"https://github.com/shawnwildermuth/RssSyndication/commit/b08e311b564bd019196e9e3f4ba542fb10192f72\">the commit</a>\u00a0which was updating\u00a0<code>WilderMinds.RssSyndication</code>\u00a0from .NETStandard 1.3 to .NETStandard 2.0. As you can see there aren&#8217;t any significant changes there except the target versions. So, why aren&#8217;t we using older version of the library? Because if we stay with older version of the library, we might miss bug-fixes, so we could either open an issue on the GitHub repo and politely ask Shawn to bring back the support of older .NETStandard or create our own generator. Creating our own generator was probably the faster solution. Here is the code that generates\u00a0<a href=\"https://hackingmonkeys.com/rss\">our RSS feed</a>.</p>\n<pre><code data-enlighter-language=\"csharp\">private string BuildRssFeedContent()\r\n{\r\n    string url = \"https://hackingmonkeys.com/\";\r\n    string description = \"Monkey's code, monkey's hacks, monkey's thoughts. .NET (Core) and stuff...\";\r\n    \r\n    var posts = GetRenderedPages(); // cached\r\n\r\n    var feed = new XDocument(new XElement(\"rss\"));\r\n    feed.Root.Add(new XAttribute(\"version\", \"2.0\"));\r\n    \r\n    string copyYear = \"2018\";\r\n    if (DateTime.Today.Year &gt; 2018) \r\n    {\r\n        copyYear = \"2018-\" + DateTime.Today.Year;\r\n    }\r\n    XNamespace atomNs = \"http://www.w3.org/2005/Atom\";\r\n    var ch = new XElement(\"channel\");\r\n    ch.Add(new XElement(\"title\", \"HackingMonkeys Blog\"));\r\n    ch.Add(new XElement(\"link\", url));\r\n    ch.Add(new XElement(atomNs + \"link\", \r\n        new XAttribute(\"href\", url + \"rss\"), \r\n        new XAttribute(\"rel\", \"self\"), \r\n        new XAttribute(\"type\", \"application/rss+xml\")));\r\n    ch.Add(new XElement(\"description\", new XCData(description)));\r\n    ch.Add(new XElement(\"copyright\", $\"Copyright {copyYear} hackingmonkeys.com\"));\r\n    ch.Add(new XElement(\"language\", \"en\"));\r\n    ch.Add(new XElement(\"lastBuildDate\", posts.First().CreatedDate.ToString(\"r\")));\r\n    ch.Add(new XElement(\"pubDate\", posts.First().CreatedDate.ToString(\"r\")));\r\n    ch.Add(new XElement(\"generator\", \"manually hacked by hackingmonkeys\"));\r\n    ch.Add(new XElement(\"managingEditor\", $\"{_email} (${_name})\"));\r\n    ch.Add(new XElement(\"webMaster\", $\"{_email} (${_name})\"));\r\n    ch.Add(new XElement(\"ttl\", (60*4).ToString()));\r\n    feed.Root.Add(ch);\r\n    foreach (var post in posts)\r\n    {\r\n        var postElement = new XElement(\"item\");\r\n        postElement.Add(new XElement(\"title\", new XCData(post.Title)));\r\n        postElement.Add(new XElement(\"link\", $\"{url}blog/{post.FormatedCreatedDate}/{post.Id}\"));\r\n        postElement.Add(new XElement(\"description\", new XCData(post.ShortHtml)));\r\n        // postElement.Add(new XElement(\"author\", \"\"));\r\n        foreach (var c in post.Tags) postElement.Add(new XElement(\"category\", new XCData(c)));\r\n        postElement.Add(new XElement(\"pubDate\", post.CreatedDate.ToString(\"r\")));\r\n        ch.Add(postElement);\r\n    }\r\n    return \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?&gt;\" + Environment.NewLine + feed.ToString();\r\n}</code></pre>\n<p>This method was inspired by\u00a0<a href=\"https://retifrav.github.io/blog/2018/01/07/csharp-dotnet-core-rss-publish-zen/\">this post</a>,\u00a0<a href=\"https://stackoverflow.com/a/38332687\">this SO answer</a>, and\u00a0<a href=\"https://github.com/shawnwildermuth/RssSyndication/blob/master/src/WilderMinds.RssSyndication/Feed.cs\">WilderMinds.RssSyndication Feed class</a>. Comparing our code with\u00a0<a href=\"https://github.com/shawnwildermuth/RssSyndication/blob/master/src/WilderMinds.RssSyndication/Feed.cs\">Feed class</a>\u00a0from\u00a0<code>WilderMinds.RssSyndication</code>\u00a0you can notice a few differences:</p>\n<ul>\n<li><code>channel</code>\u00a0node has a few more elements (<code>lastBuildDate</code>,\u00a0<code>managingEditor</code>,\u00a0<code>language</code>, etc&#8230;)</li>\n<li><code>channel</code>\u00a0has\u00a0<code>link</code>\u00a0with\u00a0<code>rel=\"self\"</code>\u00a0and\u00a0<code>Atom</code>\u00a0namespace, as it was asked by online\u00a0<a href=\"https://validator.w3.org/feed/\">validator</a></li>\n<li>some nodes that could contain\u00a0<code>HTML</code>\u00a0are using\u00a0<code>CData</code>\u00a0in oder to avoid possible XML escaping problems</li>\n</ul>\n<p>Source : <a href=\"https://hackingmonkeys.com/blog/2018-03-29/rss-generator-in-less-than-50-lines-of-code\">https://hackingmonkeys.com/blog/2018-03-29/rss-generator-in-less-than-50-lines-of-code</a></p>\n", "slug": "c-rss-generator-in-less-than-than-50-lines-of-code", "date": 1559258263, "cats": [12, 13, 14]}