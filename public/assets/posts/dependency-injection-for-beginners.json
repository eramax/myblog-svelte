{"title": "Dependency injection for beginners", "content": "<p>You\u2019re in the car business, your job is to make cars on-demand. The object-oriented programmer in you says: \u201cno problem, I\u2019ll make a blueprint that I can use to make as much cars as I want!\u201d.</p>\n<pre><code data-enlighter-language=\"null\">class Car\r\n{\r\n    public function drive()\r\n    {\r\n        // ...\r\n    }\r\n}</code></pre>\n<p>For this car to work, it needs an engine and wheels. Now, there are several approaches to achieve that goal. You could, for example, do the following:</p>\n<pre><code data-enlighter-language=\"null\">class Car\r\n{\r\n    public function __construct()\r\n    {\r\n        $this-&gt;engine = new Engine();\r\n\r\n        $this-&gt;wheels = [\r\n            new Wheel(), new Wheel(), \r\n            new Wheel(), new Wheel(),\r\n        ];\r\n    }\r\n\r\n    public function drive() { ... }\r\n}</code></pre>\n<p>There\u2019s the blueprint for every car you\u2019ll make! Next up, your boss comes to you and says there\u2019s a new client and he wants an electrical car.</p>\n<p>So you end up doing this.</p>\n<pre><code data-enlighter-language=\"null\">class ElectricalCar extends Car\r\n{\r\n    public function __construct()\r\n    {\r\n        parent::__construct();\r\n\r\n        $this-&gt;engine = new ElectricalEngine();\r\n    }\r\n}</code></pre>\n<p>\u201cBeautifully solved\u201d\u2014you think. There\u2019s of course that redundant normal engine that\u2019s created when calling\u00a0<code>parent::__construct()</code>, but at least you could re-use the wheels!</p>\n<p>I think you can see where this is going. The next client wants a car with some fancy wheel covers, another one would like a diesel engine with those same wheel covers, another one requests a race car, and the last one wants a self driving car.<br />\nOh\u2014there also was a client who wanted to buy an engine to build a boat with himself, but you told your boss that wouldn\u2019t be possible.</p>\n<p>After a while, there\u2019s a ton of blueprints in your office, each describing a very specific variation of a car. You started with a neatly ordered pile of blueprints. But after a while you had to group them in different folders and boxes, because it was taking too long to find the blueprint you\u2019re looking for.</p>\n<p>Object oriented programmers often fall into this trap of inheritance, ending in a completely messed up codebase. So let\u2019s look at a better approach. Maybe you\u2019ve heard about \u201ccomposition over inheritance\u201d before?</p>\n<blockquote><p>Composition over inheritance is the principle that classes should achieve polymorphic behavior and code reuse by their composition rather than inheritance from a base or parent class\u2014<a href=\"https://en.wikipedia.org/wiki/Composition_over_inheritance\" target=\"_blank\" rel=\"noreferrer noopener\">Wikipedia</a></p></blockquote>\n<p>That\u2019s a lot of buzzwords. Let\u2019s just look at our car example. The principle states that\u00a0<code>Car</code>\u00a0should achieve its polymorphic behaviour by being composed of other classes.</p>\n<p>The word\u00a0<em>polymorphic</em>\u00a0literally means \u201cmany shapes\u201d and implies that\u00a0<code>Car</code>\u00a0should be able to do\u00a0<code>drive</code>\u00a0in many different ways, depending on the context it\u2019s used in.</p>\n<p>With\u00a0<em>code reuse</em>, we\u2019re trying to make code reusable; so that we don\u2019t end up with tens of classes doing almost exectly the same.</p>\n<h2>What does this have to do with dependency injection?</h2>\n<p>Instead of making a unique blueprint that describes every single possible variation of a car, we\u2019d rather have\u00a0<code>Car</code>\u00a0do one thing, and do it good: drive.</p>\n<p>This means it shouldn\u2019t be the car\u2019s concern how its engine is built, what wheels it has attached. It should only know the follwing thing:</p>\n<blockquote><p>Given a working engine and four wheels, I\u2019m able to drive!</p></blockquote>\n<p>We could say that in order for\u00a0<code>Car</code>\u00a0to work, it\u00a0<em>needs</em>\u00a0an engine and wheels. In other words:\u00a0<code>Car</code>\u00a0depends on\u00a0<code>Engine</code>\u00a0and a collection of\u00a0<code>Wheels</code>.</p>\n<p>Those dependencies should be\u00a0<em>given</em>\u00a0to the car. Or, said otherwise: injected.</p>\n<pre><code data-enlighter-language=\"null\">class Car\r\n{\r\n    public function __construct(\r\n        Engine $engine, \r\n        array $wheels\r\n    ) {\r\n        $this-&gt;engine = $engine;\r\n        $this-&gt;wheels = $wheels;\r\n    }\r\n\r\n    public function drive()\r\n    {\r\n        $this-&gt;engine-&gt;connectTo($this-&gt;wheels);\r\n\r\n        $this-&gt;engine-&gt;start();\r\n\r\n        $this-&gt;engine-&gt;accelerate();\r\n    }\r\n}</code></pre>\n<p>Would you like a race car? No problem!</p>\n<pre><code data-enlighter-language=\"null\">$raceCar = new Car(new TurboEngine(), [\r\n    new RacingWheel(), new RacingWheel(),\r\n    new RacingWheel(), new RacingWheel(),\r\n]);</code></pre>\n<p>That client who wanted special wheel covers? You\u2019ve got that covered!</p>\n<pre><code data-enlighter-language=\"null\">$smugCar = new Car(new Engine(), [\r\n    new FancyWheel(), new FancyWheel(),\r\n    new FancyWheel(), new FancyWheel(),\r\n]);</code></pre>\n<p>You\u2019ve got\u00a0<em>a lot</em>\u00a0more flexibility now!</p>\n<p>Dependency injection is the idea of giving a class its requirements from the outside, instead of having that class being responsible for them itself.</p>\n<h2>What dependency injection is not</h2>\n<p>Built upon this simple principle, there are frameworks and tools that take it to the next level. You might, for example, have heard about the following things before.</p>\n<h3>Shared dependencies</h3>\n<p>One of the most beneficial side effects of injecting dependencies, is that the outside context can control them. This means that you can give the same instance of a class to several others that have a dependency on that class.</p>\n<p>Shared- or reusable dependencies are the ones most often getting the label \u201cdependency injection\u201d. Though it\u2019s certainly a very good practice, sharing a dependency is not actually the core meaning of dependency injection.</p>\n<h3>The dependency container</h3>\n<p>Sometimes it\u2019s also called \u201cinversion of control\u201d container, though that\u2019s not an accurate name.</p>\n<p>Whatever the exact name, the container is a set of class definitions. It\u2019s a big box that knows how objects in your application can be constructed with other dependencies. While such a container definitely has a lot of use cases, it\u2019s not necessary to do dependency injection.</p>\n<h3>Auto wiring</h3>\n<p>To give developers even more flexibility, some containers allow for smart, automatically determined, class definitions. This means you don\u2019t have to manually describe how every class should be constructed. These containers will scan your code, and determine which dependencies are needed by looking at type hints and doc blocks.</p>\n<p>A lot of magic happens here, but auto wiring can be a useful tool for rapid application development.</p>\n<h3>Service location</h3>\n<p>Instead of injecting dependencies into a class, there are some tools and frameworks that allow a class to ask the container to \u201cgive it an instance of another class\u201d.</p>\n<p>This might seem beneficial at first, because our class doesn\u2019t need to know how to construct a certain dependency anymore. However: by allowing a class to ask for dependencies on its own account, we\u2019re back to square one.</p>\n<p>For service location to work, our class needs to know about the systems on the outside. It doesn\u2019t differ a lot from calling\u00a0<code>new</code>in the class itself. This idea is actually the opposite of what dependency injection tries to achieve. It\u2019s a misuse of what the container is meant to do.</p>\n<h3>Inject everything</h3>\n<p>As it goes in real-life projects, you\u2019ll notice that dependency injection in not\u00a0<em>always</em>\u00a0the solution for your problem.</p>\n<p>It\u2019s important to realise that there\u2019s limits to the benefits of everything. You should always be alert that you\u2019re not taking this to the extreme, as there are valid cases in which a pragmatic approach\u00a0<em>is</em>\u00a0the better solution.</p>\n<h2>In closing</h2>\n<p>The core idea behind dependency injection is very simple, yet allows for better maintainable, testable and decoupled code to be written.</p>\n<p>Because it\u2019s such a powerful pattern, it\u2019s only natural that lots of tools emerge around it. I believe it\u2019s a good thing to first understand the underlying principle, before using the tools built upon it. And I hope this blog post has helped with that.</p>\n<p>If there are any thoughts coming to your mind that you want to share, feel free to reach out to me on via\u00a0<a href=\"https://twitter.com/brendt_gd\" target=\"_blank\" rel=\"noreferrer noopener\">Twitter</a>\u00a0or\u00a0<a href=\"mailto:brendt@stitcher.io\">e-mail</a>.</p>\n<p>Also special thanks to\u00a0<a href=\"https://www.reddit.com/user/ImSuperObjective2\" target=\"_blank\" rel=\"noreferrer noopener\">/u/ImSuperObjective2</a>\u00a0on Reddit and my colleague\u00a0<a href=\"https://twitter.com/sebdedeyne\" target=\"_blank\" rel=\"noreferrer noopener\">Sebastian</a>\u00a0for proof reading this post.</p>\n<div id=\"at_zurlpreview\">\n<h2>Dependency injection for beginners - stitcher.io</h2>\n<h3 style=\"display: none;\">Dependency injection for beginners - stitcher.io</h3>\n<p class=\"imgp\"><img class=\"alignnone size-full wp-image-562\" src=\"https://emolike.net/wp-content/uploads/2018/05/dependency-injection-for-beginners.png\" width=\"1280\" height=\"800\" srcset=\"https://emolike.net/wp-content/uploads/2018/05/dependency-injection-for-beginners.png 1280w, https://emolike.net/wp-content/uploads/2018/05/dependency-injection-for-beginners-300x188.png 300w, https://emolike.net/wp-content/uploads/2018/05/dependency-injection-for-beginners-768x480.png 768w, https://emolike.net/wp-content/uploads/2018/05/dependency-injection-for-beginners-1024x640.png 1024w, https://emolike.net/wp-content/uploads/2018/05/dependency-injection-for-beginners-432x270.png 432w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /></p>\n<p class=\"imgd\">A close look at what dependency injection is about\u2014and what not.</p>\n<p class=\"imgs\">Source: <a href=\"https://www.stitcher.io/blog/dependency-injection-for-beginners\" target=\"_blank\" rel=\"noopener\">www.stitcher.io/blog/dependency-injection-for-beginners</a></p>\n</div>\n", "slug": "dependency-injection-for-beginners", "date": 1525799580, "cats": [0, 14, 17]}