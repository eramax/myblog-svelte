{"title": "DIY React state manager", "content": "<p id=\"b289\" class=\"graf graf--p graf-after--h3\">This is a tutorial aim to demystify what libraries like react-redux does under the hood and learn about the new context apis</p>\n<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<h4 id=\"60a8\" class=\"graf graf--h4 graf--leading\">Why even\u00a0bother</h4>\n<p id=\"de9c\" class=\"graf graf--p graf-after--h4\">I think there are a couple of reasons why you should be interested in how state management works.</p>\n<ol class=\"postList\">\n<li id=\"afc8\" class=\"graf graf--li graf-after--p\">If you know how it works under the hood, a lot of problems that you might have will be more simple to debug, especially if you\u2019re moving away from a consolidated library to a new library which is more edgy you could face some problems</li>\n<li id=\"6971\" class=\"graf graf--li graf-after--li\">Global state is great but sometimes you don\u2019t want to pollute it for ephemeral things, for example if you have a couple of components that needs to be rendered just in some occasions (loaders, small user stories) you may want to put it put of the global state use the internal state, this has pros (independency) and cons (multiple responsibilities of the component, not clear separation between data and view)</li>\n<li id=\"7271\" class=\"graf graf--li graf-after--li\">Find new ways to avoid P<a class=\"markup--anchor markup--li-anchor\" href=\"https://blog.kentcdodds.com/prop-drilling-bb62e02cb691\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://blog.kentcdodds.com/prop-drilling-bb62e02cb691\">rop Drilling</a>\u00a0when necessary, after playing around I found new ways to manage my dependencies</li>\n</ol>\n<h4 id=\"e09e\" class=\"graf graf--h4 graf-after--li\">What does a state manager even do\u00a0then?</h4>\n<p id=\"e070\" class=\"graf graf--p graf-after--h4 graf--trailing\">A state management is just a way to move the state from the component to outside of the component. In case you don\u2019t know what a react state management is you can read\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://jobs.zalando.com/tech/blog/state-management-react/?gh_src=4n3gxh1\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://jobs.zalando.com/tech/blog/state-management-react/?gh_src=4n3gxh1\">this article from Zalando</a>.</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<h3 id=\"6dec\" class=\"graf graf--h3 graf--leading\">Here we\u00a0go</h3>\n<p id=\"b7e3\" class=\"graf graf--p graf-after--h3\">Few points before starting:</p>\n<ul class=\"postList\">\n<li id=\"c93d\" class=\"graf graf--li graf-after--p\">The article will follow the code in\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://github.com/unsign3d/react-context-global-state/\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"https://github.com/unsign3d/react-context-global-state/\">this repo</a></li>\n<li id=\"41b1\" class=\"graf graf--li graf-after--li\">We are using the new\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"https://reactjs.org/docs/context.html\">Context Api</a>,</li>\n</ul>\n<pre><code data-enlighter-language=\"null\">import React from 'react'\r\n\r\nconst AppContext = React.createContext({})\r\n\r\nexport class AppContextProvider extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.updateState = this.updateState.bind(this)\r\n\r\n    this.state = {\r\n      actions: {\r\n        updateState: this.updateState\r\n      },\r\n      data: {\r\n        ...this.props.initialState\r\n      }\r\n    }\r\n  }\r\n\r\n  updateState(props) {\r\n    console.group();\r\n    console.log('diff: ', props)\r\n    this.setState((prevState) =&gt; { \r\n      console.log('previous state:', prevState.data)\r\n      const newState = {\r\n        actions: {...this.state.actions}, \r\n        data: {\r\n          ...this.state.data,\r\n          ...props,\r\n        }\r\n      }\r\n      console.log('new state:', newState)\r\n      return newState\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      &lt;AppContext.Provider value={this.state}&gt;\r\n        {this.props.children}\r\n      &lt;/AppContext.Provider&gt;\r\n    )\r\n  } \r\n}\r\n\r\nexport const AppContextConsumer = AppContext.Consumer</code></pre>\n<p id=\"e44f\" class=\"graf graf--p graf-after--figure\">This is the entry point of everything and we are doing mainly this:</p>\n<ul class=\"postList\">\n<li id=\"0209\" class=\"graf graf--li graf-after--p\">We are storing the state (within the component state)</li>\n<li id=\"04be\" class=\"graf graf--li graf-after--li\">We are creating a context provider with some rudimentary APIs</li>\n<li id=\"d022\" class=\"graf graf--li graf-after--li\">We are passing on the consumer</li>\n</ul>\n<h4 id=\"40cf\" class=\"graf graf--h4 graf-after--li\">The provider</h4>\n<p id=\"8774\" class=\"graf graf--p graf-after--h4\">You may have encountered a context provider if you ever set up a react-redux project. The behaviour it\u2019s quite straight forward, every children component will be able to ask for the state. If you\u2019re just using the context api it will be just the context.</p>\n<p id=\"f590\" class=\"graf graf--p graf-after--p\">If you look at the code you will note that we need to give some features to the basic context provider:</p>\n<ul class=\"postList\">\n<li id=\"bdd5\" class=\"graf graf--li graf-after--p\">Binding of the context to a component state</li>\n<li id=\"b154\" class=\"graf graf--li graf-after--li\">Exposing an api to change the state</li>\n<li id=\"98fc\" class=\"graf graf--li graf-after--li\">Basic debugging logs</li>\n</ul>\n<h4 id=\"4917\" class=\"graf graf--h4 graf-after--li\">The consumer</h4>\n<p id=\"7606\" class=\"graf graf--p graf-after--h4\">The consumer is actually the most boring part of it, you can basically use the Context consumer as is, you just need to include your component and you will have a block with the context.</p>\n<p id=\"4fa4\" class=\"graf graf--p graf-after--p\">My dislike for this approach comes from 2 major points</p>\n<ul class=\"postList\">\n<li id=\"52d2\" class=\"graf graf--li graf-after--p\">Separation between data logic (in this case context) and view logic</li>\n<li id=\"9a40\" class=\"graf graf--li graf-after--li\">Future proofing the code, if you want to change to a new state manager you should be able to just change the glue code and not rewriting your components</li>\n<li id=\"eb58\" class=\"graf graf--li graf-after--li\">[bonus] having a connected object actually gives you much more flexibility and you can combine in one place data from different sources without the component caring where they came from</li>\n</ul>\n<p id=\"b450\" class=\"graf graf--p graf-after--li\">DISCLAIMER: My implementation is fairly opinionated by react-redux, you can use different patterns</p>\n<pre><code data-enlighter-language=\"null\">import React from 'react'\r\nimport {AppContextConsumer} from './AppContext'\r\n \r\nconst connect = (consumer, mapContextToProps = () =&gt; ({})) =&gt; (\r\n  &lt;AppContextConsumer&gt;{(context) =&gt; (\r\n    React.createElement(consumer, mapContextToProps(context))\r\n  )}\r\n  &lt;/AppContextConsumer&gt;\r\n)\r\n\r\nexport default connect</code></pre>\n<pre><code data-enlighter-language=\"null\">import connect from '../connect'\r\nimport Cat from './Cat'\r\n\r\nconst mapContextToProps = (props) =&gt; (context) =&gt; ({\r\n  name: props.name,\r\n  family: context.data.family\r\n})\r\n\r\nconst ConnectedCat = (props) =&gt; (connect(Cat, mapContextToProps(props)))\r\n\r\nexport default ConnectedCat\r\nview raw</code></pre>\n<pre><code data-enlighter-language=\"null\">import React from 'react';\r\n\r\nconst Cat = ({name, family}) =&gt; (\r\n  &lt;div&gt;\r\n    &lt;p&gt;I'm a cat and my name is {name} &lt;br /&gt; and my family is {family}&lt;/p&gt;\r\n  &lt;/div&gt;\r\n)\r\nexport default Cat</code></pre>\n<section class=\"section section--body\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p id=\"b86a\" class=\"graf graf--p graf-after--figure\">There are a few concepts from this 3 pieces of code</p>\n<ul class=\"postList\">\n<li id=\"ecc2\" class=\"graf graf--li graf-after--p\">You can use the \u201cvanilla version\u201d of the context exactly like I created the connect function, the connect function will just DRY out the usage</li>\n<li id=\"b315\" class=\"graf graf--li graf-after--li\">You can map context to props manually, this means that you can add external props and mix them to the context state (as in react-redux)</li>\n<li id=\"3570\" class=\"graf graf--li graf-after--li graf--trailing\">Cat.js is vanilla React, he doesn\u2019t care about how the data got there, he knows what data is from the input and how to use it</li>\n</ul>\n</div>\n</div>\n</section>\n<section class=\"section section--body\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<h3 id=\"97b8\" class=\"graf graf--h3 graf--leading\">Closing remarks</h3>\n<p id=\"619e\" class=\"graf graf--p graf-after--h3\">I hope to have demystified the magic behind what is a state manager and how to use the new Context Api.</p>\n<p id=\"f673\" class=\"graf graf--p graf-after--p graf--trailing\">I hope that you will also be able to more critical choose which tool is best for you between state manager, context api and just prop drilling</p>\n</div>\n</div>\n</section>\n<section class=\"section section--body section--last\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p id=\"10f0\" class=\"graf graf--p graf--leading graf--trailing\">Many thanks to\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://medium.com/@marcopoliefesto\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://medium.com/@marcopoliefesto\">https://medium.com/@marcopoliefesto</a>\u00a0for proofreading and giving cool feedback on this article</p>\n<p>Source :\u00a0<a href=\"https://medium.com/@unsigned/diy-react-state-manager-22abcfad09bb\">https://medium.com/@unsigned/diy-react-state-manager-22abcfad09bb</a></p>\n</div>\n</div>\n</section>\n</div>\n</div>\n</section>\n", "slug": "diy-react-state-manager", "date": 1545485043, "cats": [18, 13, 29, 16, 14]}