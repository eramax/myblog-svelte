{"title": "Dynamic Validator", "content": "<p>Hello Again,</p>\n<p>In this tutorial I am using dependency injection to add rules for any class and use these rules later in validation process.</p>\n<pre><code data-enlighter-language=\"csharp\">using System;\r\nusing System.Collections.Generic;\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace DynamicValidator\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Emp e1 = new Emp();\r\n\r\n            e1.id = 123;\r\n            bool vv = e1.validate();\r\n            Console.WriteLine(\"Validate: \" + vv.ToString());\r\n\r\n            e1.name = \"Ahmed\";\r\n            vv = e1.validate();\r\n            Console.WriteLine(\"Validate: \" + vv.ToString());\r\n\r\n            e1.email = \"eng@gmail.com\";\r\n            vv = e1.validate();\r\n            Console.WriteLine(\"Validate: \" + vv.ToString());\r\n            Console.ReadKey();\r\n\r\n        }\r\n    }\r\n    public interface RuleType\r\n    {\r\n        bool Validate(object v);\r\n    }\r\n    public class RegexRule: RuleType \r\n    {\r\n        private string _RegexString;\r\n        public RegexRule(string r) { _RegexString = r; }\r\n        public bool Validate(object v)\r\n        {\r\n            if (v == null) return false;\r\n            Regex regex = new Regex(_RegexString);\r\n            Match match = regex.Match(v.ToString());\r\n            if (match.Success) return true;\r\n            else return false;\r\n        }\r\n    }\r\n    public class Required : RuleType\r\n    {\r\n        private bool _required;\r\n        public Required(bool r) { _required = r; }\r\n        public bool Validate(object v)\r\n        {\r\n            if (!_required) return true;\r\n            if (v != null &amp;&amp; (String.IsNullOrEmpty(v.ToString()) || String.IsNullOrWhiteSpace(v.ToString()))) return false;\r\n            else return true;\r\n        }\r\n    }\r\n    public static class RulesMapper\r\n    {\r\n        public static Dictionary&lt;string, List&lt;RuleType&gt;&gt; rule_map = new Dictionary&lt;string, List&lt;RuleType&gt;&gt;();\r\n        public static bool validate(string type , object obj)\r\n        {\r\n            foreach (RuleType r in rule_map[type])\r\n                if (!r.Validate(obj)) return false;\r\n            return true;\r\n        }\r\n        public static void AddRule(string type , List&lt;RuleType&gt; rules)\r\n        {\r\n            List&lt;RuleType&gt; tmp = new List&lt;RuleType&gt;();\r\n            if (!rule_map.TryGetValue(type, out tmp)) rule_map.Add(type, rules);\r\n            else tmp.AddRange(rules);\r\n        }\r\n    }\r\n    public class Emp\r\n    {\r\n        public int id;\r\n        public string name;\r\n        public string email;\r\n\r\n        public Emp()\r\n        {\r\n            List&lt;RuleType&gt; _RuleList0 = new List&lt;RuleType&gt;();\r\n            _RuleList0.Add(new Required(true));\r\n            RulesMapper.AddRule(typeof(Emp) + \":\" + nameof(id), _RuleList0);\r\n\r\n            List&lt;RuleType&gt; _RuleList1 = new List&lt;RuleType&gt;();\r\n            _RuleList1.Add(new Required(true));\r\n            RulesMapper.AddRule(typeof(Emp) + \":\" + nameof(name), _RuleList1);\r\n\r\n            List&lt;RuleType&gt; _RuleList2 = new List&lt;RuleType&gt;();\r\n            _RuleList2.Add(new RegexRule(@\"^([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w){2,3})+)$\"));\r\n            _RuleList2.Add(new Required(true));\r\n            RulesMapper.AddRule(typeof(Emp) + \":\" + nameof(email), _RuleList2);\r\n        }\r\n\r\n        public bool validate()\r\n        {\r\n            if (RulesMapper.validate(typeof(Emp) + \":\" + nameof(id), id) &amp;&amp;\r\n                RulesMapper.validate(typeof(Emp) + \":\" + nameof(name), name) &amp;&amp;\r\n                RulesMapper.validate(typeof(Emp) + \":\" + nameof(email), email) ) return true;\r\n            return false;\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n</code></pre>\n<p><strong>The Output</strong></p>\n<p><img class=\"alignnone size-full wp-image-848\" src=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0660\u0665\u0662\u0663\u0665\u0664\u0662\u0662.png\" alt=\"\" width=\"685\" height=\"343\" srcset=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0660\u0665\u0662\u0663\u0665\u0664\u0662\u0662.png 685w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0660\u0665\u0662\u0663\u0665\u0664\u0662\u0662-300x150.png 300w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0660\u0665\u0662\u0663\u0665\u0664\u0662\u0662-539x270.png 539w\" sizes=\"(max-width: 685px) 100vw, 685px\" /></p>\n", "slug": "dynamic-validator", "date": 1536184520, "cats": [12, 13, 16]}