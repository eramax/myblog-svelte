{"title": "Everyone can now run JavaScript on Cloudflare with Workers", "content": "<p><img class=\"alignnone size-full wp-image-173\" src=\"https://emolike.net/wp-content/uploads/2018/03/workers-social.png\" alt=\"Edge computing for everyone.\" width=\"1280\" height=\"640\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/workers-social.png 1280w, https://emolike.net/wp-content/uploads/2018/03/workers-social-300x150.png 300w, https://emolike.net/wp-content/uploads/2018/03/workers-social-768x384.png 768w, https://emolike.net/wp-content/uploads/2018/03/workers-social-1024x512.png 1024w, https://emolike.net/wp-content/uploads/2018/03/workers-social-200x100.png 200w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /></p>\n<h3 id=\"whatsaworker\">What&#8217;s a Worker?</h3>\n<p>Cloudflare Workers derive their name from Web Workers, and more specifically Service Workers, the W3C standard API for scripts that run in the background in a web browser and intercept HTTP requests. Cloudflare Workers are written against the same standard API, but run on Cloudflare&#8217;s servers, not in a browser.</p>\n<p>Here are the tools you get to work with:</p>\n<ul>\n<li>Execute any JavaScript code, using the latest standard language features.</li>\n<li>Intercept and modify HTTP request and response URLs, status, headers, and body content.</li>\n<li>Respond to requests directly from your Worker, or forward them elsewhere.</li>\n<li>Send HTTP requests to third-party servers.</li>\n<li>Send multiple requests, in serial or parallel, and use the responses to compose a final response to the original request.</li>\n<li>Send asynchronous requests after the response has already been returned to the client (for example, for logging or analytics).</li>\n<li>Control other Cloudflare features, such as caching behavior.</li>\n</ul>\n<p>The possible uses for Workers are infinite, and we&#8217;re excited to see what our customers come up with. Here are some ideas we&#8217;ve seen in the beta:</p>\n<ul>\n<li>Route different types of requests to different origin servers.</li>\n<li>Expand HTML templates on the edge, to reduce bandwidth costs at your origin.</li>\n<li>Apply access control to cached content.</li>\n<li>Redirect a fraction of users to a staging server.</li>\n<li>Perform A/B testing between two entirely different back-ends.</li>\n<li>Build \u201cserverless\u201d applications that rely entirely on web APIs.</li>\n<li>Create custom security filters to block unwanted traffic unique to your app.</li>\n<li>Rewrite requests to improve cache hit rate.</li>\n<li>Implement custom load balancing and failover logic.</li>\n<li>Apply quick fixes to your application without having to update your production servers.</li>\n<li>Collect analytics without running code in the user&#8217;s browser.</li>\n<li>Much more..</li>\n</ul>\n<p>source:\u00a0https://blog.cloudflare.com/cloudflare-workers-unleashed/</p>\n", "slug": "everyone-can-now-run-javascript-on-cloudflare-with-workers", "date": 1520969301, "cats": [7, 14]}