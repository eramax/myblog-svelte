{"title": "Fastest way to create instance of a Type in Runtime C#", "content": "<p>When working with refactoring and loading and creating instances of types in run time using c# the important factor you should take care of is the performance and time needed to create this instance.</p>\n<p>we always need to create objects of a type and we should use the method that will not take too much time to create this object.</p>\n<p>In this thread, I am going to explain the most famous ways to do this and we will see the performance for each method.</p>\n<h3>Our targeted classes</h3>\n<p>First we have two classes X and Y as following:</p>\n<pre><code data-enlighter-language=\"csharp\">public class X : baseClass&lt;X&gt;\r\n{\r\n    public X() { }\r\n    public X(int z) { this.Z = z; }\r\n    public int Z;\r\n}\r\n\r\npublic class Y : X \r\n{\r\n    public Y() { }\r\n    public Y(int z) : base(z) { }\r\n}</code></pre>\n<h3>First Method using direct method NEW()</h3>\n<pre><code data-enlighter-language=\"csharp\">static void CreateWithNew(int t)\r\n{\r\n    var stopwatch = new Stopwatch();\r\n    stopwatch.Start();\r\n    for (int i = 0; i &lt; t; i++)\r\n    {\r\n        var r1 = new X();\r\n        var r2 = new Y();\r\n    }\r\n    stopwatch.Stop();\r\n    Console.WriteLine(\"{0}, {1}\", stopwatch.Elapsed, \"NEW()\");\r\n}</code></pre>\n<h3>Second Method using refactoring with\u00a0Activator.CreateInstance</h3>\n<pre><code data-enlighter-language=\"csharp\">static void CreateWithActivator(int t)\r\n{\r\n    var stopwatch = new Stopwatch();\r\n    stopwatch.Start();\r\n    for (int i=0;i&lt;t; i++)\r\n    {\r\n        var r1 = Activator.CreateInstance(typeof(X)) as X;\r\n        var r2 = Activator.CreateInstance(typeof(Y)) as Y;\r\n    }\r\n    stopwatch.Stop();\r\n    Console.WriteLine(\"{0}, {1}\", stopwatch.Elapsed, \"Activator.CreateInstance\");\r\n}</code></pre>\n<h3>Third Method using Invoking of the\u00a0constructor</h3>\n<pre><code data-enlighter-language=\"csharp\">static void CreateWithConstractor(int t)\r\n{\r\n    var stopwatch = new Stopwatch();\r\n    stopwatch.Start();\r\n    for (int i = 0; i &lt; t; i++)\r\n    {\r\n        var r1 = GetNewObject(typeof(X)) as X;\r\n        var r2 = GetNewObject(typeof(Y)) as Y;\r\n    }\r\n    stopwatch.Stop();\r\n    Console.WriteLine(\"{0}, {1}\", stopwatch.Elapsed, \"InvokeConstractor\");\r\n}\r\npublic static object GetNewObject(Type t)\r\n{\r\n    try\r\n    {\r\n        return t.GetConstructor(new Type[] { }).Invoke(new object[] { });\r\n    }\r\n    catch\r\n    {\r\n        return null;\r\n    }\r\n}</code></pre>\n<h3>Forth Method using compiled expressions</h3>\n<pre><code data-enlighter-language=\"csharp\">static void CreateWithCompiledExpression(int t)\r\n{\r\n    var stopwatch = new Stopwatch();\r\n    stopwatch.Start();\r\n    for (int i = 0; i &lt; t; i++)\r\n    {\r\n        var r1 = XCreator() as X;\r\n        var r2 = YCreator() as Y;\r\n    }\r\n    stopwatch.Stop();\r\n    Console.WriteLine(\"{0}, {1}\", stopwatch.Elapsed, \"CompiledExpression\");\r\n}\r\nstatic readonly Func&lt;X&gt; XCreator = Expression.Lambda&lt;Func&lt;X&gt;&gt;(\r\n   Expression.New(typeof(X).GetConstructor(Type.EmptyTypes))\r\n ).Compile();\r\n\r\nstatic readonly Func&lt;Y&gt; YCreator = Expression.Lambda&lt;Func&lt;Y&gt;&gt;(\r\n   Expression.New(typeof(Y).GetConstructor(Type.EmptyTypes))\r\n ).Compile();</code></pre>\n<h3>Fifth and my lovely method using Clone</h3>\n<p>to use clone the classes should implement the IClonable interface</p>\n<pre><code data-enlighter-language=\"csharp\">static void CreateWithClone(int t)\r\n{\r\n    var stopwatch = new Stopwatch();\r\n    X x = new X();\r\n    Y y = new Y();\r\n    stopwatch.Start();\r\n    for (int i = 0; i &lt; t; i++)\r\n    {\r\n        var r1 = x.Clone() as X;\r\n        var r2 = y.Clone() as Y;\r\n    }\r\n    stopwatch.Stop();\r\n    Console.WriteLine(\"{0}, {1}\", stopwatch.Elapsed, \"Clone\");\r\n}</code></pre>\n<p>So we implemented\u00a0IClonable interface\u00a0 in the base class like that :</p>\n<pre><code data-enlighter-language=\"csharp\">public class baseClass&lt;T&gt; : ICloneable where T : new()\r\n{\r\n    public object Clone()\r\n    {\r\n        return default(T);\r\n    }\r\n}\r\npublic class X : baseClass&lt;X&gt;\r\n{\r\n    public X() { }\r\n    public X(int z) { this.Z = z; }\r\n    public int Z;\r\n}\r\n\r\npublic class Y : X \r\n{\r\n    public Y() { }\r\n    public Y(int z) : base(z) { }\r\n}</code></pre>\n<h3>Main Method:</h3>\n<pre><code data-enlighter-language=\"csharp\">static void Main(string[] args)\r\n{\r\n    int countOfTest = 10000;\r\n    Console.WriteLine(\"count Of Tests : \" + countOfTest);\r\n    CreateWithNew(countOfTest);\r\n    CreateWithActivator(countOfTest);\r\n    CreateWithConstractor(countOfTest);\r\n    CreateWithCompiledExpression(countOfTest);\r\n    CreateWithClone(countOfTest);\r\n\r\n    Console.ReadLine();\r\n}</code></pre>\n<h3>Results</h3>\n<p><img class=\"alignnone size-full wp-image-976\" src=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0666\u0660\u0660\u0660\u0664\u0660\u0663.png\" alt=\"\" width=\"455\" height=\"227\" srcset=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0666\u0660\u0660\u0660\u0664\u0660\u0663.png 455w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0666\u0660\u0660\u0660\u0664\u0660\u0663-300x150.png 300w\" sizes=\"(max-width: 455px) 100vw, 455px\" /></p>\n<p>As we can see cloning is the fastest way to create new instance of each type, and therefore we should create on instance for each type first and use this instance to clone it later, we may lose time for retrieving\u00a0 this saved instance , but we can manage this retrieving time with many ways.</p>\n<p>about the parameterized constructor we should allow a default\u00a0constructor without any arguments and later we can config the object.</p>\n<p>Also I found that Activator.CreateInstance perform well in small tests like the following</p>\n<p><img class=\"alignnone size-full wp-image-977\" src=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0666\u0660\u0660\u0662\u0666\u0662\u0664.png\" alt=\"\" width=\"451\" height=\"288\" srcset=\"https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0666\u0660\u0660\u0662\u0666\u0662\u0664.png 451w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0666\u0660\u0660\u0662\u0666\u0662\u0664-300x192.png 300w, https://emolike.net/wp-content/uploads/2018/09/DeepinScreenshot_select-area_\u0662\u0660\u0661\u0668\u0660\u0669\u0662\u0666\u0660\u0660\u0662\u0666\u0662\u0664-423x270.png 423w\" sizes=\"(max-width: 451px) 100vw, 451px\" /></p>\n<p>References :\u00a0<a href=\"https://stackoverflow.com/questions/752/get-a-new-object-instance-from-a-type\">https://stackoverflow.com/questions/752/get-a-new-object-instance-from-a-type</a></p>\n<p>Best Regards</p>\n<p> </p>\n<p> </p>\n<p> </p>\n", "slug": "fastest-way-to-create-instance-of-a-type-in-runtime-c", "date": 1537914756, "cats": [12, 13, 16]}