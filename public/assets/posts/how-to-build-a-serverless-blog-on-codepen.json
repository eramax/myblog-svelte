{"title": "How to Build a Serverless Blog on CodePen", "content": "<h2><strong>Serverless</strong>.</h2>\n<p>It\u2019s kind of a phenomenon. All sorts of web developers can make use of it, including front-end developers! Here\u2019s one way to think about it: they allow you to take your front-end skills and do things that typically only a back-end can do. Depending on what you all make use of, serverless is possibly more accurately referred to as\u00a0<em>Cloud Functions</em>\u00a0or\u00a0<em>Functions as a Service</em>.</p>\n<p>Here\u2019s a rather remarkable thing serverless can make possible on the client: saving and reading things from a database. That\u2019s right! It\u2019s possible to have a database and deal with it entirely through front-end code. Technically, the database still exists on a server, so the word\u00a0<em>serverless</em>\u00a0can feel a little disingenuous, but it\u2019s not a server that you need to buy and build and maintain and deal with directly.</p>\n<p>Why bother with doing a database this way? For one thing, it means you can host the rest of your site much more easily. Wanna build a React-powered blog on\u00a0<a href=\"https://pages.github.com/\">GitHub pages</a>? You totally can! Wanna use the super fast static file host\u00a0<a href=\"https://www.netlify.com/\">Netlify</a>\u00a0to build a Vue-based community-driven recipe site? Do it.</p>\n<p>I bet where you can see this is going: serverless opens up tons of possibilities for what you can build right here on CodePen! Let\u2019s dig into this and build ourselves a fully functional blog.</p>\n<figure id=\"post-9129 media-9129\" class=\"align-none\"><img class=\"alignnone size-full wp-image-465\" src=\"https://emolike.net/wp-content/uploads/2018/04/serverless.png\" alt=\"\" width=\"1067\" height=\"562\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/serverless.png 1067w, https://emolike.net/wp-content/uploads/2018/04/serverless-300x158.png 300w, https://emolike.net/wp-content/uploads/2018/04/serverless-768x405.png 768w, https://emolike.net/wp-content/uploads/2018/04/serverless-1024x539.png 1024w, https://emolike.net/wp-content/uploads/2018/04/serverless-513x270.png 513w\" sizes=\"(max-width: 1067px) 100vw, 1067px\" /></figure>\n<p> </p>\n<p>That\u2019s right, even though CodePen itself doesn\u2019t have data storage, you could use serverless technology to handle all that.</p>\n<p>COOL RIGHT?! I sure think so. Let\u2019s do this.</p>\n<p>Just looking for the final product and code?</p>\n<ul>\n<li><a href=\"https://github.com/CodePen/serverless-demos\">GitHub Repo</a>: For the cloud functions, sample data, and code snippets.</li>\n<li><a href=\"https://995efd87afaf43daaf9b410660395732.codepen.website/\">Final Demo</a></li>\n<li><a href=\"https://codepen.io/team/codepen/project/editor/DWQRjB\">CodePen Project</a></li>\n</ul>\n<p> </p>\n<p> </p>\n<p data-height=\"647\" data-theme-id=\"0\" data-slug-hash=\"MGJyJm\" data-default-tab=\"js,result\" data-user=\"eramax\" data-embed-version=\"2\" data-pen-title=\"A Serverless Blog\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/eramax/pen/MGJyJm/\">A Serverless Blog</a> by Ahmed Essam (<a href=\"https://codepen.io/eramax\">@eramax</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<p><script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script></p>\n<h3 id=\"toc-tools\">Tools of the Trade</h3>\n<p>From here on out, we\u2019re going to assume you know\u00a0<a href=\"https://abookapart.com/products/working-the-command-line\">the basics of the command line</a>and\u00a0<a href=\"http://blog.npmjs.org/post/85484771375/how-to-install-npm\">have npm installed</a>\u00a0on your machine.</p>\n<p>There are lots of possible tools in the world of serverless, but for this demo, in addition to building the front end on CodePen, we\u2019ll be doing the serverless stuff on\u00a0<a href=\"https://firebase.google.com/\">Firebase</a>, so you\u2019ll need a Google account.</p>\n<h3 id=\"toc-setup\"><a id=\"step-1-set-up-a-firebase-project-2\" class=\"article-headline-link\" href=\"https://blog.codepen.io/2018/01/15/build-serverless-blog-codepen/#step-1-set-up-a-firebase-project-2\">#</a>Step 1) Set up a Firebase project</h3>\n<p>Let\u2019s create a project and then import some placeholder data (literally: some fake blog posts) that we can use initially as we develop our API.</p>\n<ol>\n<li>Login to your Google account and navigate to\u00a0<a href=\"https://console.firebase.google.com/\">your Firebase console</a></li>\n<li>Select the big\u00a0<b>Add Project</b><br />\n<figure id=\"post-9055 media-9055\" class=\"align-none\"><img class=\"alignnone size-full wp-image-466\" src=\"https://emolike.net/wp-content/uploads/2018/04/add-project.png\" alt=\"\" width=\"674\" height=\"546\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/add-project.png 674w, https://emolike.net/wp-content/uploads/2018/04/add-project-300x243.png 300w, https://emolike.net/wp-content/uploads/2018/04/add-project-333x270.png 333w\" sizes=\"(max-width: 674px) 100vw, 674px\" /></figure>\n</li>\n<li>Create the project by providing a project name. The project ID is provided for you, but you can edit it, if you\u2019d like. The\u00a0<b>name</b>\u00a0is just for finding your project again in your list of projects, but the ID is used in your actual code.</li>\n</ol>\n<figure id=\"post-9056 media-9056\" class=\"align-none\"><img class=\"alignnone size-full wp-image-467\" src=\"https://emolike.net/wp-content/uploads/2018/04/adding-a-project.png\" alt=\"\" width=\"1098\" height=\"1038\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/adding-a-project.png 1098w, https://emolike.net/wp-content/uploads/2018/04/adding-a-project-300x284.png 300w, https://emolike.net/wp-content/uploads/2018/04/adding-a-project-768x726.png 768w, https://emolike.net/wp-content/uploads/2018/04/adding-a-project-1024x968.png 1024w, https://emolike.net/wp-content/uploads/2018/04/adding-a-project-286x270.png 286w\" sizes=\"(max-width: 1098px) 100vw, 1098px\" /></figure>\n<p>We\u2019re just working on the web here, but note that your Firebase projects can be used on both iOS and Android apps as well (like, simultaneously).</p>\n<h4><a id=\"lets-consider-the-data-for-a-blog-post-3\" class=\"article-headline-link\" href=\"https://blog.codepen.io/2018/01/15/build-serverless-blog-codepen/#lets-consider-the-data-for-a-blog-post-3\">#</a>Let\u2019s consider the data for a blog post.</h4>\n<p>We have to put our content hats on for a minute and consider the bits of data that a blog post might have. Let\u2019s keep it real simple and go with\u00a0<code>title</code>\u00a0,\u00a0<code>content</code>\u00a0,\u00a0<code>posted date</code>\u00a0, and\u00a0<code>author</code>. I\u2019m sure you can imagine a more elaborate data structure, but this\u2019ll do for now. You aren\u2019t locked to this, it can always be changed later.</p>\n<p>Given these, we can structure our first implementation data like this, with the\u00a0<code>created</code>\u00a0field being a\u00a0<a href=\"https://www.unixtimestamp.com/\" target=\"_blank\" rel=\"noopener\">Unix timestamp</a>:</p>\n<pre><code data-enlighter-language=\"json\">{ \r\n  \"posts\": {\r\n    \"101\": {\r\n      \"title\": \"Introduction to the Thesis of Theseus\",\r\n      \"content\": \"Lorem ipsum dolor sit amet, ...\",\r\n      \"created\": 1483355533000,\r\n      \"author\": \"Duncan\"\r\n    },\r\n    \"102\": {\r\n      ...\r\n    }\r\n  }\r\n}</code></pre>\n<h4>Let\u2019s import some fake data.</h4>\n<p>This will be easier for us to play around with some data in Firebase we can get our hands on.</p>\n<ol>\n<li>Download the\u00a0<code>posts.json</code>\u00a0file as raw from\u00a0<a href=\"https://github.com/CodePen/serverless-demos/blob/master/blog-project/step_00_setup_list_posts/data/posts.json\">here</a>, Or create your own JSON file with the fields you can see in that example.</li>\n<li>To initialize the data storage with our posts, select\u00a0<b>Database</b>\u00a0from the left side menu under the\u00a0<b>DEVELOP</b>\u00a0section.<br />\n<figure id=\"post-9063 media-9063\" class=\"align-none\"><img class=\"alignnone size-full wp-image-468\" src=\"https://emolike.net/wp-content/uploads/2018/04/firebase-menu.png\" alt=\"\" width=\"532\" height=\"828\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/firebase-menu.png 532w, https://emolike.net/wp-content/uploads/2018/04/firebase-menu-193x300.png 193w, https://emolike.net/wp-content/uploads/2018/04/firebase-menu-173x270.png 173w\" sizes=\"(max-width: 532px) 100vw, 532px\" /></figure>\n</li>\n<li>Click the \u201cGet Started\u201d button.<br />\n<figure id=\"post-9064 media-9064\" class=\"align-none\"><img class=\"alignnone size-full wp-image-469\" src=\"https://emolike.net/wp-content/uploads/2018/04/get-started-with-database.png\" alt=\"\" width=\"588\" height=\"682\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/get-started-with-database.png 588w, https://emolike.net/wp-content/uploads/2018/04/get-started-with-database-259x300.png 259w, https://emolike.net/wp-content/uploads/2018/04/get-started-with-database-233x270.png 233w\" sizes=\"(max-width: 588px) 100vw, 588px\" /></figure>\n</li>\n<li>Open up the\u00a0<b>&#8230;</b>\u00a0menu on the right side of the menus, above the dismiss button, for access to the import/export menus<br />\n<figure id=\"post-9065 media-9065\" class=\"align-none\"><img class=\"alignnone size-full wp-image-470\" src=\"https://emolike.net/wp-content/uploads/2018/04/open-import-export-window.png\" alt=\"\" width=\"914\" height=\"504\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/open-import-export-window.png 914w, https://emolike.net/wp-content/uploads/2018/04/open-import-export-window-300x165.png 300w, https://emolike.net/wp-content/uploads/2018/04/open-import-export-window-768x423.png 768w, https://emolike.net/wp-content/uploads/2018/04/open-import-export-window-490x270.png 490w\" sizes=\"(max-width: 914px) 100vw, 914px\" /></figure>\n</li>\n<li>Select\u00a0<b>Import JSON</b>\u00a0menu item and the\u00a0<b>Browse</b>\u00a0button, selecting the\u00a0<code>posts.json</code>\u00a0file downloaded to import.If you have an existing project you\u2019re reusing, this action will overwrite any data you currently have stored in your project, making a new project recommended for this tutorial.<br />\n<figure id=\"post-9066 media-9066\" class=\"align-none\"><img class=\"alignnone size-full wp-image-471\" src=\"https://emolike.net/wp-content/uploads/2018/04/import-json.png\" alt=\"\" width=\"1028\" height=\"706\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/import-json.png 1028w, https://emolike.net/wp-content/uploads/2018/04/import-json-300x206.png 300w, https://emolike.net/wp-content/uploads/2018/04/import-json-768x527.png 768w, https://emolike.net/wp-content/uploads/2018/04/import-json-1024x703.png 1024w, https://emolike.net/wp-content/uploads/2018/04/import-json-393x270.png 393w\" sizes=\"(max-width: 1028px) 100vw, 1028px\" /></figure>\n</li>\n<li>Select \u201cImport\u201d to save the initial data.</li>\n</ol>\n<p>We now have our Firebase project created, development data in our data storage, and are ready to start developing in earnest!</p>\n<h3 id=\"toc-cloud\"><a id=\"step-2-set-up-cloud-functions-5\" class=\"article-headline-link\" href=\"https://blog.codepen.io/2018/01/15/build-serverless-blog-codepen/#step-2-set-up-cloud-functions-5\">#</a>Step 2) Set Up Cloud Functions</h3>\n<p><strong>First, let\u2019s make something clear:</strong>\u00a0You don\u2019t\u00a0<em>need</em>\u00a0to work with Cloud Functions use Firebase realtime databases. We could make this project entirely through client-side JavaScript. We went the route of Cloud Functions because they are powerful and a big part of understanding the possibilities of **serverless*. Now let\u2019s get into what they are.</p>\n<p>Firebase Cloud Functions are (nominally) small pieces of code that run on discrete data. In our case, we want to start with a function that will provide a list of all posts.</p>\n<p>While the setup is slightly different for Cloud Functions than for many front-end libraries, developers comfortable with JavaScript on the front-end will feel at home with the Firebase Cloud Functions.</p>\n<p>On the command line, install the firebase tools globally:</p>\n<pre><code data-enlighter-language=\"shell\">npm install -g firebase-tools\r\n</code></pre>\n<p>Once installed, create and/or navigate to your project directory. This is where the back-end, serverless code resides locally. We\u2019ll develop, test, and deploy from this project directory.</p>\n<p>In the project directory, run:</p>\n<pre><code data-enlighter-language=\"shell\">firebase login\r\n</code></pre>\n<p>The login command will provide a URL and open your default browser, where you can log in to your google account, and grant access to the firebase command line tools.</p>\n<p>Of note, I find that the authentication process happens entirely in the browser particularly awesome. That the process can be done from other devices if you\u2019re on a headless server, say, is even more spectacular. You can, for example, confirm the tools in your phone\u2019s browser. Totally awesome.</p>\n<p>In the project directory, run:</p>\n<pre><code data-enlighter-language=\"shell\">firebase init functions\r\n</code></pre>\n<p>Then:</p>\n<pre><code data-enlighter-language=\"shell\">cd serverless-demos/blog-project/step_04_clean_input/firebase/functions\r\nnpm install\r\ncd ..\r\nfirebase use --add\r\nfirebase serve --only functions\r\nfirebase deploy --only functions\r\n\r\n#testing \r\ncurl -X POST -H \"Content-Type:application/json\" -d '{ \"title\" : \"this is the post title\", \"content\" : \"this is the development post content\"}' http://localhost:5000/PROJECT/REGION/posts\r\n</code></pre>\n<p>When everything is working, do the ol\u2019\u00a0<code>firebase deploy --only functions</code>\u00a0to deploy.</p>\n<p>With these changes, we\u2019ve done several things with our data:</p>\n<ol>\n<li>we\u2019ve ignored the\u00a0<code>author</code>\u00a0field</li>\n<li>we\u2019ve just opened up our application to a huge security hole.</li>\n</ol>\n<p>The former is part of the development iteration process, which test cases will help find. The last is a huge concern. We don\u2019t check or clean the incoming data for hacks, we don\u2019t check or clean the data we send back out, and we currently allow anyone to post to the URL, as we don\u2019t have any authentication on the POST endpoint.</p>\n<p>Let\u2019s fix that last one by adding authentication. The first thing we want to do is lock down the API by limiting access. Navigate to the project\u2019s Firebase console:</p>\n<figure id=\"post-9108 media-9108\" class=\"align-none\"><img class=\"alignnone size-full wp-image-472\" src=\"https://emolike.net/wp-content/uploads/2018/04/add-firebase.png\" alt=\"\" width=\"623\" height=\"395\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/add-firebase.png 623w, https://emolike.net/wp-content/uploads/2018/04/add-firebase-300x190.png 300w, https://emolike.net/wp-content/uploads/2018/04/add-firebase-426x270.png 426w\" sizes=\"(max-width: 623px) 100vw, 623px\" /></figure>\n<p>Selecting the\u00a0<b>Add Firebase to your web app</b>\u00a0will trigger a popup, with code that will handle authentication in the blog app.</p>\n<figure id=\"post-9109 media-9109\" class=\"align-none\"><img class=\"alignnone size-full wp-image-473\" src=\"https://emolike.net/wp-content/uploads/2018/04/firebase-snippet.png\" alt=\"\" width=\"1280\" height=\"867\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/firebase-snippet.png 1280w, https://emolike.net/wp-content/uploads/2018/04/firebase-snippet-300x203.png 300w, https://emolike.net/wp-content/uploads/2018/04/firebase-snippet-768x520.png 768w, https://emolike.net/wp-content/uploads/2018/04/firebase-snippet-1024x694.png 1024w, https://emolike.net/wp-content/uploads/2018/04/firebase-snippet-399x270.png 399w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /></figure>\n<p>Copy these values, and paste them at the bottom of the HTML in the Pen.</p>\n<p>Next, we\u2019ll select the sign-in methods allowed for the blog. In the Firebase console, under the Development tab on the left, select the\u00a0<b>Authentication</b>\u00a0menu.</p>\n<p>Select the big\u00a0<b>Set Up Sign-In Method</b>\u00a0button for a list of providers.</p>\n<figure id=\"post-9110 media-9110\" class=\"align-none\"><img class=\"alignnone size-full wp-image-474\" src=\"https://emolike.net/wp-content/uploads/2018/04/authenticate.png\" alt=\"\" width=\"1262\" height=\"472\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/authenticate.png 1262w, https://emolike.net/wp-content/uploads/2018/04/authenticate-300x112.png 300w, https://emolike.net/wp-content/uploads/2018/04/authenticate-768x287.png 768w, https://emolike.net/wp-content/uploads/2018/04/authenticate-1024x383.png 1024w, https://emolike.net/wp-content/uploads/2018/04/authenticate-604x226.png 604w\" sizes=\"(max-width: 1262px) 100vw, 1262px\" /></figure>\n<p>In the list, select the providers you\u2019d like to support. Firebase provides a fantastic list of providers.</p>\n<figure id=\"post-9111 media-9111\" class=\"align-none\"><img class=\"alignnone size-full wp-image-475\" src=\"https://emolike.net/wp-content/uploads/2018/04/list-of-auth-providers.png\" alt=\"\" width=\"709\" height=\"434\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/list-of-auth-providers.png 709w, https://emolike.net/wp-content/uploads/2018/04/list-of-auth-providers-300x184.png 300w, https://emolike.net/wp-content/uploads/2018/04/list-of-auth-providers-441x270.png 441w\" sizes=\"(max-width: 709px) 100vw, 709px\" /></figure>\n<p>Select at least one.</p>\n<p>Next, add \u201ccodepen.io\u201d to the list of authorized domains on the sign-in method page. If you\u2019re using Projects, add \u201ccodepen.plumbing\u201d and \u201ccodepen.website\u201d as well.</p>\n<figure id=\"post-9112 media-9112\" class=\"align-none\"><img class=\"alignnone size-full wp-image-476\" src=\"https://emolike.net/wp-content/uploads/2018/04/authorized-domains.png\" alt=\"\" width=\"716\" height=\"307\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/authorized-domains.png 716w, https://emolike.net/wp-content/uploads/2018/04/authorized-domains-300x129.png 300w, https://emolike.net/wp-content/uploads/2018/04/authorized-domains-604x259.png 604w\" sizes=\"(max-width: 716px) 100vw, 716px\" /></figure>\n<p> </p>\n<p>In a Pen here on CodePen, the preview displays in an iframe, which hides the URL. If we switch to a\u00a0<a href=\"https://codepen.io/team/codepen/project/editor/DWQRjB\">CodePen Project</a>\u00a0we can\u00a0<a href=\"https://995efd87afaf43daaf9b410660395732.codepen.website/\">deploy it</a>\u00a0to see the URL changes with the\u00a0<code>pushState</code>\u00a0and\u00a0<code>popState</code>\u00a0events.</p>\n<p>We\u2019re here!</p>\n<p> </p>\n<p>Lastly, we want to limit who can write data to our blog. Currently, the demo permissions are open: anyone authenticated with a Google account can read and write posts. We can change these access rules in the Firebase Console.</p>\n<p>Navigate to\u00a0<a href=\"https://console.firebase.google.com/\">your Firebase console</a></p>\n<p>Select the Database Tab under the Develop menu on the left side, then select the Rules tab in the main window.</p>\n<figure id=\"post-9200 media-9200\" class=\"align-none\"><img class=\"alignnone size-full wp-image-477\" src=\"https://emolike.net/wp-content/uploads/2018/04/firebase-rules.png\" alt=\"Show Database Rules location in Firebase Console\" width=\"764\" height=\"342\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/firebase-rules.png 764w, https://emolike.net/wp-content/uploads/2018/04/firebase-rules-300x134.png 300w, https://emolike.net/wp-content/uploads/2018/04/firebase-rules-604x270.png 604w\" sizes=\"(max-width: 764px) 100vw, 764px\" /></figure>\n<p>We can see the default rules are \u201cSite visitors are authenticated.\u201d We can update our rules so that anyone can access the API by changing the\u00a0<code>.read</code>\u00a0value:</p>\n<pre data-lang=\"JavaScript\"></code></pre>\n<pre><code data-enlighter-language=\"null\">{\r\n  \"rules\": {\r\n    \".read\": true,\r\n    \".write\": \"auth != null\"\r\n  }\r\n}</code></pre>\n<p>If we have different API endpoints, more than just our\u00a0<code>posts</code>\u00a0endpoint, we could limit who can read the endpoints, by specifying the endpoints in our rules:</p>\n<pre data-lang=\"JavaScript\"></code></pre>\n<pre><code data-enlighter-language=\"null\">{\r\n  \"rules\": {\r\n    \"posts\": {\r\n      \".read\": true,\r\n      \".write\": \"auth != null\"\r\n    },\r\n    \"admin\": {\r\n      \".read\": \"auth.uid === 'abcdef'\",\r\n      \".write\": \"auth.uid === 'abcdef'\"\r\n    }\r\n  }\r\n}</code></pre>\n<p>An easy example for a single user blog is to limit the write access to a single user:</p>\n<pre data-lang=\"JavaScript\"></code></pre>\n<pre><code data-enlighter-language=\"null\">{\r\n  \"rules\": {\r\n    \"posts\": {\r\n      \".read\": true,\r\n      \".write\": \"auth.uid === 'abcdef'\"\r\n    }\r\n  }\r\n}</code></pre>\n<p>A user\u2019s UID (<code>abcdef</code>\u00a0is an invalid UID) can be found in the Authentication section of the Develop menu, in the Users tab in the main window:</p>\n<figure id=\"post-9201 media-9201\" class=\"align-none\"><img class=\"alignnone size-full wp-image-478\" src=\"https://emolike.net/wp-content/uploads/2018/04/firebase-console-user-id.png\" alt=\"Copy User uid from the Firebase Console Develop Authentication pane\" width=\"1209\" height=\"377\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/firebase-console-user-id.png 1209w, https://emolike.net/wp-content/uploads/2018/04/firebase-console-user-id-300x94.png 300w, https://emolike.net/wp-content/uploads/2018/04/firebase-console-user-id-768x239.png 768w, https://emolike.net/wp-content/uploads/2018/04/firebase-console-user-id-1024x319.png 1024w, https://emolike.net/wp-content/uploads/2018/04/firebase-console-user-id-604x188.png 604w\" sizes=\"(max-width: 1209px) 100vw, 1209px\" /></figure>\n<p>This limits who can create a post to only a single authenticated account, which wraps up this serverless tutorial. We can view all our posts, view a single post, submit a new post, use the browser history, and authenticate users, all without spinning up a single server.</p>\n<h3 id=\"toc-end\">Keep on going!</h3>\n<p>While we now have the basics of a blog hosted on CodePen using Firebase, all serverless, in a production scenario, we would set up development, staging, and production versions, then keep iterating: improving the design and adding features. Here are some ideas:</p>\n<ul>\n<li>Loading icons indicating API calls are happening</li>\n<li>A Markdown editor for styling</li>\n<li>Comments on posts from authenticated guest users</li>\n<li>Voting or favoriting posts</li>\n<li>Editing of posts by implementing the PUT action in our API</li>\n<li>Communal blogs with multiple authors, including filtering by author</li>\n<li>Refactor the author field with unique IDs provided by Firebase authentication, along with their displayed name</li>\n<li>Pagination</li>\n<li>Use something like Angular, Vue, or React</li>\n</ul>\n<p>Again, we do all of this without having to spin up a traditional server. Awesome!</p>\n<div id=\"at_zurlpreview\">\n<h2>How to Build a Serverless Blog on CodePen - CodePen Blog</h2>\n<h3 style=\"display: none;\">How to Build a Serverless Blog on CodePen - CodePen Blog</h3>\n<p class=\"imgp\"><img class=\"alignnone size-full wp-image-465\" src=\"https://emolike.net/wp-content/uploads/2018/04/serverless.png\" alt=\"\" width=\"1067\" height=\"562\" srcset=\"https://emolike.net/wp-content/uploads/2018/04/serverless.png 1067w, https://emolike.net/wp-content/uploads/2018/04/serverless-300x158.png 300w, https://emolike.net/wp-content/uploads/2018/04/serverless-768x405.png 768w, https://emolike.net/wp-content/uploads/2018/04/serverless-1024x539.png 1024w, https://emolike.net/wp-content/uploads/2018/04/serverless-513x270.png 513w\" sizes=\"(max-width: 1067px) 100vw, 1067px\" /></p>\n<p class=\"imgd\">Serverless. It\u2019s kind of a phenomenon. All sorts of web developers can make use of it, including front-end developers! Here\u2019s one way to think about it: they allow you to take your front-end skills and do things that typically only a back-end can do. Depending on what you all make use of, serverless is possibly \u2026</p>\n<p class=\"imgs\">Source: <a href=\"https://blog.codepen.io/2018/01/15/build-serverless-blog-codepen/\" target=\"_blank\" rel=\"noopener\">blog.codepen.io/2018/01/15/build-serverless-blog-codepen/</a></p>\n</div>\n", "slug": "how-to-build-a-serverless-blog-on-codepen", "date": 1524943263, "cats": [0, 1, 24, 40]}