{"title": "How to Build Trust and Improve Communication Within Agile Teams", "content": "<p>What parallels can we draw between football and software development? You can hire stellar players that cost a fortune, but they will most likely lose as a team if they do not have a shared vision and strategy.</p>\n<p dir=\"ltr\">Before hiring new team members for your existing team or\u00a0<a href=\"https://8allocate.com/article/how-to-make-your-remote-software-team-work-like-a-well-oiled-machine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">building a new team from the ground up</a>, you must define your goals clearly.</p>\n<p dir=\"ltr\">Creating a new digital system or application requires certain technologies, which in turn requires certain competencies of specialists. That is, the abilities of hired engineers should correspond to the tasks. There is no point in keeping the team of developers whose potential exceeds the tasks by far: someone may simply be left without work, and this is very irrational and fundamentally contrary to the principles of any modern business.</p>\n<p dir=\"ltr\">So start with the thorough analysis and make a work plan that outlines all the functions, competencies and areas of responsibility. Take your time, sleep with your ideas and act. Believe me, all these preparation efforts will pay off in the future.</p>\n<h2 dir=\"ltr\">What\u2019s Behind Ineffective Software Development Teams?</h2>\n<p dir=\"ltr\">The team refers to a group of people united by motives and intentions to achieve a common goal. It sounds great, but in practice, there are many roadblocks. Ineffective software teams lack the following features:</p>\n<h3 dir=\"ltr\">The Ability to Understand Each Other and Speak the Same Language</h3>\n<p dir=\"ltr\">We are all different and we perceive things differently. Everyone has their own worldview. Let\u2019s say you ask your colleague to deploy a feature like, for instance, bulk data upload from Excel to the table, and you eventually get the outcome that\u2019s a far cry from what you\u2019d expected originally. No matter how simple the task looks like at first glance, there\u2019s always a chance it\u2019ll be misunderstood or misinterpreted. Therefore, it\u2019s critical to use a task tracking tool within the team to formalize tasks assignment and make sure it\u2019s understood clearly and unambiguously.</p>\n<h3 dir=\"ltr\">The Ability to Talk</h3>\n<p dir=\"ltr\">Let\u2019s assume your team is working on a very difficult task, and it needs to find the best solution or kludge to solve the issue. You sit together to brainstorm and figure out the solution. While some team members are active in sharing their vision and suggestions, the others have nothing to say. They don\u2019t really want to be bothered and all they\u2019re waiting for is a new task to be explained and assigned. Yet, if you, as a team lead, can encourage them to talk and share their ideas, you may arrive at a better conclusion at the end of the day (the more ideas, the better).</p>\n<h3 dir=\"ltr\">Motivation and Interests</h3>\n<p dir=\"ltr\">Are you sure your team lead and the team are driven by the same stimuli? As a team lead, your motivation is to make sure the team follows your work plan, and all featured are built and deployed on time and on budget. But your team members may have a different motivation: what if they want to use a new programming language or framework to see how it\u2019ll affect project development speed?</p>\n<h3 dir=\"ltr\">Hear and Listen</h3>\n<p dir=\"ltr\">Often, engineers do not quite understand why they have been pulled out and made to attend the meeting. As such, they hear you, but they don\u2019t listen to what you say. This is the first sign that you\u2019ll encounter issues as your project is underway because someone didn\u2019t listen to you before.</p>\n<h3 dir=\"ltr\">Involvement in The Process</h3>\n<p dir=\"ltr\">On many project development teams, especially those that are shuffled from project to project without having any strict attachment to the client and its business goals, programmers may simply complete tasks without having a clear understanding of how their work will affect the client\u2019s business. When your team members blindly write code without delving into the project goals and details (for the sake of closing a ticket in Jira), you\u2019re in big trouble. It means you have unmotivated and indifferent people on your team and such approaches rarely yield any good results.</p>\n<p dir=\"ltr\">If a group of people seemingly work on the same project, but everyone has own vision of the end goal, it can\u2019t be called the team! It\u2019s just a group of people, nothing more.</p>\n<h2 dir=\"ltr\">How to Unite People and Build a Strong Self-Organizing Team</h2>\n<p dir=\"ltr\">The main task of any technical manager, from tech lead to CTO, is to minimize the impact of all negative and distracting factors and to achieve maximum team productivity.</p>\n<p dir=\"ltr\">I believe that the key process in a good team is communication. Below I will list the main principles and tips for establishing a seamless and clear communication within your software team.</p>\n<ul>\n<li>\n<p dir=\"ltr\"><strong>Sit down and talk to each employee and ask about their skills and experience.</strong>\u00a0Try to find the strengths and weaknesses of each of your team members. Make sure that people complement each other by drawing on their strengths. This is the only way to achieve maximum efficiency in the end.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Keep your team informed of the project goals and mission.</strong>\u00a0If you need to implement a particular functionality, everyone should understand the reason behind this. Don\u2019t just throw tasks at them; instead, ask for their opinion and feedback to make them feel included and see how exactly this task will affect or contribute to the project success.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Explain everything in simple words so that everyone understands and has no doubts.\u00a0</strong>As Einstein said, \u201cIf you can&#8217;t explain it simply, you don&#8217;t understand it well enough.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Involve people in discussions.</strong>\u00a0This has been mentioned above. The objective is to make people feel appreciated by asking them to share opinions or feedback. The more often you hold brainstorming and discussion sessions within your team, the more dedicated to the teamwork success they\u2019ll become.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Forget the word \u201cmistake.\u201d\u00a0</strong>Demonstrate to your team that an error or failure is a search for a new solution. All team members should understand that this is a normal workflow and part of the daily routine. Who doesn\u2019t make mistakes? Only those who don\u2019t do anything! While almost everyone can ride a bike, I doubt there\u2019s anyone who never fell when riding.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Criticize the stuff but not the fluff</strong>. If you don\u2019t think a team member\u2019s suggestion or idea is right for your project, never say it\u2019s a bad idea. Learn to explain argumentatively why it won\u2019t work now, but don\u2019t clip their wings!</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Speak the same language.</strong>\u00a0Discuss the tasks and ask for a summary. One useful practice is to ask your software engineers to talk about the solution and how they understand it. You may unveil many interesting things this way. It&#8217;s better to take the time to discuss than to be surprised at the result down the road when you suddenly realize the solution is completely out of line with what you&#8217;re trying to accomplish.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Say thank you</strong>. If people do something well, be sure to thank them. This little thing is very important, everyone is happy when they feel appreciated. But don&#8217;t abuse it, as your gratitude will be quickly devalued.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Be transparent about each and every team achievement and failure.</strong>\u00a0As mentioned above, each team member should feel valued and when you talk to them openly and give a pat on the back for a good job or encourage to improve efficiency and productivity, they feel valued and become more cooperative. It&#8217;s good practice for Team Leads, CTOs or CEOs to gather people from time to time (e.g., once a quarter) and report on their achievements and areas of improvement.</p>\n</li>\n</ul>\n<p dir=\"ltr\">As you can see, most of the tips are related to communication and trust in one way or another. If you don&#8217;t build them properly within the team from the very beginning, there will be issues down the road. It is this communication that largely determines the efficiency of your software engineering endeavors.</p>\n<h2 dir=\"ltr\">Tips and Tricks of Successful Software Team Management</h2>\n<p>I once read an interesting theory about the optimal size of the team. Once upon a time, George Miller was involved in memory research, and as a result of his experiments, he made a conclusion that our short-term memory usually contains between five and nine incoherent elements. That is, we don\u2019t need to group them according to some principles and characteristics to remember them more easily. Jeff Sutherland, the father of\u00a0<a href=\"https://8allocate.com/article/scrum-or-huddle/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scrum</a>\u00a0who repeated the success of Toyota, believed that the team shouldn\u2019t include more than seven people, which resulted in the \u201cseven people per project\u201d rule. In his opinion, only teams of this size can achieve hyper-productivity, and they can be eight times more effective!</p>\n<p dir=\"ltr\">I was surprised, but this theory proved to work for me. I once had to manage a team of thirteen people. It was highly ineffective, so I divided it into two teams and the productivity increased noticeably! As the project scaled, we built a third team of six people, and the results improved threefold.</p>\n<p dir=\"ltr\">Below I will give you some tips on team management. There\u2019s nothing new in them, but they helped me a lot when I was involved in\u00a0<a href=\"https://8allocate.com/article/dedicated-software-team-as-a-value-based-and-personalized-outsourcing-engagement/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">distributed software development team</a>\u00a0management.</p>\n<ul>\n<li>\n<p dir=\"ltr\"><strong>Combine the teams so that they have a place to grow.</strong>\u00a0If you have a distributed team with one part being very strong and productive and the other one less experienced and slow-achieving, shuffle people so that you have a healthy mix of senior, middle and junior specialists who can complement each other\u2019s skills and expertise. After shuffling, productivity will increase.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Distribute tasks properly.</strong>\u00a0A programmer is an expensive employee for the company. You should always challenge them to drive forward. If you see they solve assigned tasks with ease, make sure to assign more complicated tasks or tasks they may not be familiar with. This will encourage them to research more and fine-tune and polish their problem-solving skills. In short, this will help them grow professionally and personally. An experienced senior developer should not sit over easy tasks, even if they perform\u00a0them faster than your mid-level developer.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Hire junior developers with little experience but with a huge zeal to work and learn</strong>. Let them work on non-critical tasks. This will help relieve the extra burden of your senior guys, keep them focused on complex and mission-critical tasks, and improve mentorship skills.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Motivate your employees according to their expectations</strong>. You need an individual approach: for some, it&#8217;s money, for others, it&#8217;s career growth, for the third\u00a0it can be an extended vacation. Learn everyone\u2019s motivation and make sure to give each what they want.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Do not micromanage or try to control each step.</strong>\u00a0People should be aware of their responsibility and accountability. The person who understands this is much more effective and independent. Remember \u2013 you don\u2019t hire expensive developers to tell them what to do and how to do it. You hire them to leverage their skills and experience, so they should tell you what to do and why.</p>\n</li>\n<li>\n<p dir=\"ltr\"><strong>Do not skimp on education</strong>. Send your team members to conferences, workshops, and other professional events. It is expensive, but it\u2019ll help your team members enhance skills and gain new knowledge which will pay off well at the end of the day. Moreover, on- and off-job training is one of the most sought-after benefits among software developer candidates, so you simply won\u2019t be able to attract good developers if you don\u2019t offer any self-development opportunities.</p>\n</li>\n</ul>\n<p dir=\"ltr\">At some point, the wagon you&#8217;re pushing has to go by itself. In a good team, when problems arise or new features are designed, people should sit down and discuss possible solutions and suggest their own options. Ideally, they should do it without a team lead at all. So, your goal is to build a self-organizing team where you\u2019ll encourage, facilitate and mediate rather than control and manage.</p>\n<h2 dir=\"ltr\">Conclusion</h2>\n<p dir=\"ltr\">A high-performing software development team is a team that learns from mistakes, grows, and is able to fix or predict those mistakes quickly. Everyone listens to each other and hears what they say. A team is a living organism that evolves continuously.</p>\n<p dir=\"ltr\">People who understand the purpose are more motivated and can offer solutions to issues that others will not see.</p>\n<p dir=\"ltr\">It is necessary to be engaged in building development processes within a team and to pay maximum attention to communication. I believe that a good team lead shouldn\u2019t spend more than 10-20% of the time coding: they should focus mostly on building trust and proper communication to ensure the best outcome ever.</p>\n<p dir=\"ltr\">People are your most important assets, so treat them the way you want to be treated. Create conditions for them to develop and grow, and your team will always be ready to go the extra mile to delight you or your client!</p>\n<p dir=\"ltr\">Source : <a href=\"https://dzone.com/articles/how-to-build-trust-and-improve-communication-withi?utm_medium=feed&amp;utm_source=feedpress.me&amp;utm_campaign=Feed:%20dzone%2Fagile\">https://dzone.com/articles/how-to-build-trust-and-improve-communication-withi?utm_medium=feed&amp;utm_source=feedpress.me&amp;utm_campaign=Feed:%20dzone%2Fagile</a></p>\n", "slug": "how-to-build-trust-and-improve-communication-within-agile-teams", "date": 1558020494, "cats": [28]}