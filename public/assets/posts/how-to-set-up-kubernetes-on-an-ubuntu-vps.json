{"title": "How to Set Up Kubernetes on an Ubuntu VPS", "content": "<p>Do you want to learn how to set up Kubernetes on Ubuntu? Keep reading this article!</p>\n<p>Kubernetes is a powerful open-source platform for automatic scaling, deployment, and management of containerized systems. It\u2019s a robust application that groups containers into logic units making it easy to discover and manage them across multiple clusters of hosts. Kubernetes has many pieces such as network transport drivers, various system components, and CLI utilities. The system also works with numerous container tools such as Docker and includes many moving parts and enormous workloads which makes its installation intricate.</p>\n<p>This tutorial will show you how to quickly install kubernetes on Ubuntu with minimal to no frustration.</p>\n<p>Additional reading: if you wish to research Kubernetes and container hosting further, we recommend the following articles:</p>\n<ul>\n<li><a href=\"https://hostadvice.com/hosting-guides/kubernetes-hosting/\">Kubernetes hosting guide</a></li>\n<li><a href=\"https://hostadvice.com/hosting-guides/container-hosting/\">Container Hosting guide\u00a0</a></li>\n</ul>\n<p>Let\u2019s get started.</p>\n<h2>Must Haves:</h2>\n<p>For our installation to succeed, you should have the following:</p>\n<ol>\n<li>At least two Ubuntu machines; one as the master and the other for worker. If you can get\u00a0<i>etcd\u00a0</i>and\u00a0<i>Apiserver</i>\u00a0on a single machine with one core and one GB RAM for clusters with at least 10s of nodes that will be enough for this installation. \u00a0On the other hand, if you intend to use more active and larger clusters consider getting more core.</li>\n</ol>\n<h3>Step 1: Install the dependencies</h3>\n<p>The first and the most important thing when setting up Kubernetes on Ubuntu is installing the required dependencies. The dependencies must be installed on all the machines that make your Kubernetes cluster.</p>\n<p>One of the dependencies you need to install is the\u00a0<b>apt-transport-https</b>. This package allows you to utilize the HTTP and HTTPS protocols in the apt repository resources. The package can be installed using the following command:</p>\n<pre><code data-enlighter-language=\"null\">sudo apt-get update &amp;&amp; apt-get install -y apt-transport-https\r\n</code></pre>\n<p>The second dependency is Docker.<a href=\"https://en.wikipedia.org/wiki/Docker_(software)\" target=\"_blank\" rel=\"noopener noreferrer\">\u00a0Docker</a>\u00a0is a reliable application that simplifies the creation and configuration of application processes in containerized systems. The Kubernetes installation\u00a0<a href=\"https://hostadvice.com/hosting-guides/container-hosting/#different-types-of-container-hosting_docker\">will rely on Docker</a>, and for this reason, it should be installed first. Use the following command to install Docker:</p>\n<div class=\"EnlighterJSWrapper enlighterEnlighterJSWrapper\">\n<pre><code data-enlighter-language=\"null\">sudo apt install docker.io\r\n</code></pre>\n<blockquote><p>Special Note:\u00a0Docker works best on the 64-bit Ubuntu or a kernel version greater than or equal to 3.10. For this reason, we\u2019ll install the kubernetes on the default 64-bit Ubuntu 16.04 server. The version meets the requirements.</p>\n<p>Once Docker is fully installed, run the following commands to start and enable the application:</p></blockquote>\n<pre><code data-enlighter-language=\"null\">sudo systemctl start docker\r\nsudo systemctl enable docker</code></pre>\n<h3>Step 2: Installing kubernetes components</h3>\n<p>Once the Docker is up and running, you are ready for the next step. As aforementioned, Kubernetes has many pieces and installing all the necessary components should be straightforward.</p>\n<blockquote><p>Special Note:\u00a0all the components should be configured on all the machine joining the clusters.</p></blockquote>\n<p>Download and incorporate the Key by running the following command at the terminal:</p>\n<div class=\"EnlighterJSWrapper enlighterEnlighterJSWrapper\">\n<pre><code data-enlighter-language=\"null\">sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add\r\n</code></pre>\n<p>Run the command below to install kubernetes apt repo:</p>\n<div class=\"EnlighterJSWrapper enlighterEnlighterJSWrapper\">\n<pre><code data-enlighter-language=\"null\">$ apt-get update &amp;&amp; apt-get install -y apt-transport-https \\\r\n &amp;&amp; curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\r\n$ echo \"deb http://apt.kubernetes.io/ kubernetes-xenial main\" &gt; /etc/apt/sources.list.d/kubernetes.list</code></pre>\n<p>Next, you need to update the package list using the following command:</p>\n<div class=\"EnlighterJSWrapper enlighterEnlighterJSWrapper\">\n<pre><code data-enlighter-language=\"null\">apt-get update\r\n</code></pre>\n<p>Now, we install three components\u00a0<b><i>Kubeadm</i></b>,\u00a0<b><i>kubelet</i></b>, and\u00a0<b><i>kubernetes-cni</i></b>. The kubeadm is a great utility that helps you configure the multiple components that form a working cluster; the Kubelet makes it easy to run the containers on the hosts, whereas the Kubernetes-cni defines the networking components. CNI or Container Networking Interface is a robust spec that dictates how network drivers interact with kubernetes.</p>\n<p>Use the following command to install the three components:</p>\n<pre><code data-enlighter-language=\"null\">$ apt-get update \\\r\n &amp;&amp; apt-get install -y kubelet kubeadm kubernetes-cni</code></pre>\n<p>Run\u00a0<b><i>kubeadm</i></b>\u00a0to initialize your server. Kubeadm provides a secure cluster using mechanisms such as RBAC.</p>\n<h3>Step 3: Initialize the master</h3>\n<p>Once you have installed the three components, you can proceed to initialize your master. Go to the machine you intend to use as the master and run the following command:</p>\n<div class=\"EnlighterJSWrapper enlighterEnlighterJSWrapper\">\n<pre><code data-enlighter-language=\"null\">sudo kubeadm init --ignore-preflight-errors=NumCPU</code></pre>\n<p>When the initialization is complete, you will get the command below which is required to join your nodes to the master:</p>\n<p><img class=\"alignnone size-full wp-image-1278\" src=\"https://emolike.net/wp-content/uploads/2019/05/image1-6.jpg\" width=\"586\" height=\"344\" alt=\"\" srcset=\"https://emolike.net/wp-content/uploads/2019/05/image1-6.jpg 586w, https://emolike.net/wp-content/uploads/2019/05/image1-6-300x176.jpg 300w\" sizes=\"(max-width: 586px) 100vw, 586px\" /></p>\n<p>The command above indicates your kubernetes master is ready for the nodes. But, just before you join any node to the master, run this command:</p>\n<pre><code data-enlighter-language=\"null\">mkdir -p $HOME/.kube\r\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\r\nsudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre>\n<h3>STEP 4: Deploy a pod network</h3>\n<p>Next, you must install and configure a pod network for everything to function properly. Here we will install a Flannel pod network. Flannel offers a reliable Software Defined Network (SDN) via ipvlan modules and kernel\u2019s overlay. Deploying Flannel can be achieved through two commands applied on the Kubernetes master. The first command:</p>\n<pre><code data-enlighter-language=\"null\">sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\r\n</code></pre>\n<p>The second command is:</p>\n<div class=\"EnlighterJSWrapper enlighterEnlighterJSWrapper\">\n<pre><code data-enlighter-language=\"null\">sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml\r\n</code></pre>\n<p>Confirm the pod network is properly configured by running the following command: sudo kubectl get pods. If the Flannel pod network is properly installed, you will get the output below:</p>\n<p><img class=\"alignnone size-full wp-image-1279\" src=\"https://emolike.net/wp-content/uploads/2019/05/image2-3.jpg\" width=\"593\" height=\"154\" alt=\"\" srcset=\"https://emolike.net/wp-content/uploads/2019/05/image2-3.jpg 593w, https://emolike.net/wp-content/uploads/2019/05/image2-3-300x78.jpg 300w\" sizes=\"(max-width: 593px) 100vw, 593px\" /></p>\n<h3>Step 5: Join a node</h3>\n<p>By now all the components are ready, and your kubernetes master is ready for node joining. Navigate to the terminal (of the node) and run the following command:</p>\n<div class=\"EnlighterJSWrapper enlighterEnlighterJSWrapper\">\n<pre><code data-enlighter-language=\"null\">sudo kubeadm join --token TOKEN MASTER_IP:6443\r\n</code></pre>\n<p>This helps confirm the nodes have joined the master successfully;</p>\n<p><img class=\"alignnone size-full wp-image-1280\" src=\"https://emolike.net/wp-content/uploads/2019/05/image3-2.jpg\" width=\"557\" height=\"120\" alt=\"\" srcset=\"https://emolike.net/wp-content/uploads/2019/05/image3-2.jpg 557w, https://emolike.net/wp-content/uploads/2019/05/image3-2-300x65.jpg 300w\" sizes=\"(max-width: 557px) 100vw, 557px\" /></p>\n<h3>Step 6: Deploy a service</h3>\n<p>At this point, everything is properly configured, and you can easily deploy a service on the kubernetes cluster. Run the command below from your Kubernetes master:</p>\n<pre><code data-enlighter-language=\"null\">sudo kubectl run --image=nginx nginx-app --port=80 --env=\"DOMAIN=cluster\"\r\nsudo kubectl expose deployment nginx-app --port=80 --name=nginx-http</code></pre>\n<p>The command will help you deploy NGINX service exposed on port 80. Navigate to the node and issue the following command:</p>\n<div class=\"EnlighterJSWrapper enlighterEnlighterJSWrapper\">\n<pre><code data-enlighter-language=\"null\">$sudo docker ps -a\r\n</code></pre>\n<p>The command will give you an output of the services deployed</p>\n<p><img class=\"alignnone size-full wp-image-1281\" src=\"https://emolike.net/wp-content/uploads/2019/05/image4.jpg\" width=\"587\" height=\"415\" alt=\"\" srcset=\"https://emolike.net/wp-content/uploads/2019/05/image4.jpg 587w, https://emolike.net/wp-content/uploads/2019/05/image4-300x212.jpg 300w\" sizes=\"(max-width: 587px) 100vw, 587px\" /></p>\n<p>Your Kubernetes is successfully installed on Ubuntu. The cluster comprises a single node and a master. However, it\u2019s easy to scale the cluster by deploying more nodes using our instructions.</p>\n<p>source: <a href=\"https://hostadvice.com/how-to/how-to-set-up-kubernetes-in-ubuntu/\">https://hostadvice.com/how-to/how-to-set-up-kubernetes-in-ubuntu/</a></p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n", "slug": "how-to-set-up-kubernetes-on-an-ubuntu-vps", "date": 1557610785, "cats": [0, 8, 1, 9, 2, 5, 10]}