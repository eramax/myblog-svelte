{"title": "How we built Hamiltix.net for less than $1 a month on AWS", "content": "<header>The details of running a complex ticket ranking site for under a dollar a month on AWS</header>\n<div class=\"m-clearfix-l\"></div>\n<aside class=\"m-note m-warning\">\n<h3>Ok not quite $1&#8230;</h3>\n<p>After the free-tier expires it will be less than $5, but the fact remains: it&#8217;s crazy cheap.</p>\n</aside>\n<section id=\"background\">\n<h2>Background</h2>\n<p>Hamilton the musical is hot.\u00a0<a href=\"http://variety.com/2017/legit/news/hamilton-ticket-prices-1202648756/\">Really hot</a>. With crazy high ticket prices, finding the best deal should be easy, especially if you live in New York City, Chicago, or a city on the US Tour. You just go to a major ticket resale site, and search across all the dates you are able to attend and&#8230; wait&#8230; no site supports ranking tickets across dates? And their \u201cdeal rankings\u201d don&#8217;t take into account the intricacies of each theatre (viewing obstructions, etc)!? I guess we&#8217;ll have to build it ourselves!</p>\n<p>For a full background on the motivations behind\u00a0<a href=\"https://www.hamiltix.net/\">hamiltix.net</a>\u00a0checkout the\u00a0<a href=\"https://blog.hamiltix.net/welcome-to-hamiltix.html\">hamiltix.net blog</a>.</p>\n</section>\n<section id=\"from-simple-script-to-legitimate-website\">\n<h2>From simple script to legitimate website</h2>\n<p>Being a python programmer it didn&#8217;t take long to scrape the major ticket sites and rank all the tickets with a custom algorithm. This turned up some interesting results, and it was easy to compare the best tickets for any dates, sections, and theaters we wanted. This was great for personal use, but not very accessible to an average Hamilton-goer (and despite\u00a0<a href=\"https://arstechnica.com/tech-policy/2017/08/court-rejects-linkedin-claim-that-unauthorized-scraping-is-hacking/\">being perfectly legal</a>\u00a0it may draw the irk of the sites we are scraping). Time to legitimize our data collection and make it presentable.</p>\n<p>This lead to a long slog through the secondary ticket market, which was actually quite interesting, and will be detailed on the hamiltix.net blog. The end state was we connected with a \u201cticket broker\u201d network and are able to access their inventory (spoiler: nearly all secondary ticket sites share the same inventory). With live tickets at our fingertips the question became how do we process all the data and present it on the cheap?</p>\n</section>\n<section id=\"aws-power-complexity-affordability\">\n<h2>AWS - Power, Complexity, Affordability</h2>\n<p>Enter Amazon Web Services (AWS). AWS is the cloud service provider that powers may of the biggest names on the internet so lets see how it does with a simple static site and backend.</p>\n<aside class=\"m-note m-danger\">\n<h3>Warning!</h3>\n<p>The following architecture design choices were made for the purposes of cost savings as well as a chance to learn new technologies. I make no claim they are the best choices for the given tasks. In many cases, there are much better technologies that make more sense!</p>\n</aside>\n<p>Normally, the first step for this kind of project is to start up a linux server, but\u00a0<a href=\"https://www.cloudtp.com/doppler/rise-of-serverless-computing-operational-security-financial-considerations/\">serverless computing is on the rise</a>. We&#8217;ve never dealt with Lambda or any other \u201cserverless\u201d technology before so lets give it a shot.</p>\n<p>The overall design of hamiltix looks like this:</p>\n<figure class=\"m-figure\"><img class=\"aligncenter wp-image-26 size-full\" src=\"https://emolike.net/wp-content/uploads/2018/03/hamiltix-aws.png\" alt=\"Hamiltix AWS Diagram\" width=\"1280\" height=\"881\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/hamiltix-aws.png 1280w, https://emolike.net/wp-content/uploads/2018/03/hamiltix-aws-300x206.png 300w, https://emolike.net/wp-content/uploads/2018/03/hamiltix-aws-768x529.png 768w, https://emolike.net/wp-content/uploads/2018/03/hamiltix-aws-1024x705.png 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /><figcaption>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0The Hamiltix.net AWS stack</figcaption></figure>\n<p>As you can see, Lambda is the star of the show. If you haven&#8217;t heard of Lambda before, you can think of it as a service that will run a function (however complex) on a trigger (there are too many to list, basically any AWS service can trigger a lambda). Lambda offers Node.js, Python (2.7 and 3.6), Java (8+), C# (.NET Core), and Go environments. Since we already had the ranking module in Python, we stuck with Python (3 of course) for the rest of the functions as well.</p>\n<p>Cloudwatch event rules kick off any Lambdas that need to run on intervals (getting and ranking tickets), and API Gateway fires any \u201cdynamic\u201d content for the website like advanced search, or the actual ticket purchasing.</p>\n<p>We also made the decision to not use a javascript framework for the front end, mostly because they are incredebly complex and some people suggest\u00a0<a href=\"https://medium.com/@mattburgess/all-javascript-frameworks-are-terrible-e68d8865183e\">they are all terrible</a>\u00a0(or\u00a0<a href=\"https://medium.com/@mattburgess/javascript-frameworks-are-great-2df4a3f0b24d\">maybe great?</a>). Could be use React with a static site? Sure, but that also means dealing with animated routes, custom routing, GraphQL, Redux, Sass or Less, JSX&#8230; I&#8217;m already exhausted. We just want to present tickets cleanly to users, not build the next Facebook.\u00a0<a href=\"https://jquery.com/\">jQuery</a>,\u00a0<a href=\"https://sweetalert2.github.io/\">SweetAlert2</a>,\u00a0<a href=\"https://semantic-ui.com/\">Semantic-ui</a>,\u00a0<a href=\"https://momentjs.com/\">Moment.js</a>, and\u00a0<a href=\"https://dubrox.github.io/Multiple-Dates-Picker-for-jQuery-UI/\">MutliDatesPicker</a>\u00a0are the only external javascript libraries used on hamiltix.net.</p>\n<p>Without the need for a server hosting the site, it can be stored on S3 and distributed by Cloudfront. Setting up a static site with AWS\u00a0<a href=\"https://medium.com/@sbuckpesch/setup-aws-s3-static-website-hosting-using-ssl-acm-34d41d32e394\">is fairly simple</a>. Any<code>ajax</code>calls in the site&#8217;s javascript are sent to the API Gateway which in turn calls the correct lambda function to handle whatever task is requested. With hamilton ticket prices as high as they are, we set up a staging environment that uses our ticket broker&#8217;s sandbox API to test all functions on each commit to master. For this to work, you need two separate environments in API Gateway, and the corresponding aliases for your lambda functions (don&#8217;t forget to publish the changes in API Gateway!).</p>\n<p><img class=\"alignnone size-full wp-image-73\" src=\"https://emolike.net/wp-content/uploads/2018/03/api-stages-1.png\" alt=\"The two API Gateway stages for hamiltix\" width=\"420\" height=\"200\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/api-stages-1.png 420w, https://emolike.net/wp-content/uploads/2018/03/api-stages-1-300x143.png 300w\" sizes=\"(max-width: 420px) 100vw, 420px\" />While in the API Gateway, you have to point the lambda handler to the function alias that corresponds to either staging or prod. This can be done with a<code>stageVariable</code>when setting up the endpoint in the Resources screen of API Gateway. You&#8217;ll need to allow API Gateway permissions to access each alias you use, but AWS provides a nice aws-cli command for you when you set up the Lambda proxy integration.</p>\n<p><img class=\"alignnone size-full wp-image-74\" src=\"https://emolike.net/wp-content/uploads/2018/03/stage-variable-1.png\" alt=\"The stageVariable setup on the Resources screen\" width=\"1112\" height=\"278\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/stage-variable-1.png 1112w, https://emolike.net/wp-content/uploads/2018/03/stage-variable-1-300x75.png 300w, https://emolike.net/wp-content/uploads/2018/03/stage-variable-1-768x192.png 768w, https://emolike.net/wp-content/uploads/2018/03/stage-variable-1-1024x256.png 1024w\" sizes=\"(max-width: 1112px) 100vw, 1112px\" />Then in the Stages screen, ensure that each stage as an appropriate Stage Variable.</p>\n<p><img class=\"alignnone size-full wp-image-75\" src=\"https://emolike.net/wp-content/uploads/2018/03/actual-stage-variables-1.png\" alt=\"The stageVariable setup on the Stages screen\" width=\"1046\" height=\"516\" srcset=\"https://emolike.net/wp-content/uploads/2018/03/actual-stage-variables-1.png 1046w, https://emolike.net/wp-content/uploads/2018/03/actual-stage-variables-1-300x148.png 300w, https://emolike.net/wp-content/uploads/2018/03/actual-stage-variables-1-768x379.png 768w, https://emolike.net/wp-content/uploads/2018/03/actual-stage-variables-1-1024x505.png 1024w\" sizes=\"(max-width: 1046px) 100vw, 1046px\" />Now the staging and prod APIs will call the<code>Staging</code>and<code>Prod</code>lambda aliases respectively. Setting up staging and prod lambda aliases is not difficult, and is handled by Gitlab&#8217;s CI/CD pipeline.</p>\n<section id=\"ci-cd\">\n<h3>CI/CD</h3>\n<p>If you&#8217;ve read\u00a0<a href=\"https://blog.badsectorlabs.com/pelican-gitlab-cicd-docker-aws-awesome-static-site.html\">my first post</a>\u00a0you know I&#8217;m a big fan of Gitlab and its built in CI/CD. The hamiltix repo is set up with each lambda as a\u00a0<a href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\">submodule</a>\u00a0because Gitlab currently\u00a0<a href=\"https://gitlab.com/gitlab-org/gitlab-ce/issues/18157\">does not support</a>\u00a0more than one<code>.gitlab-ci.yml</code>file for a repo. The<code>gitlab-ci.yml</code>files for each lambda are nearly identical (on purpose!), only the variables section at the top and the additional<code>cp</code>statements for custom directories (if needed) change between lambda functions. Strict\u00a0<a href=\"https://12factor.net/build-release-run\">twelve-factor</a>\u00a0followers will notice that the build and release stages are combined. It is certianlly possible to break the build step out and pass the zip as an artifact, but the stage is so fast we haven&#8217;t done this yet.</p>\n<pre class=\"m-code\"><span class=\"l l-Scalar l-Scalar-Plain\">\r\nvariables</span><span class=\"p p-Indicator\">:</span>\r\n  <span class=\"c1\">#  Set git strategy</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">GIT_STRATEGY</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">clone</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">GIT_SUBMODULE_STRATEGY</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">recursive</span>\r\n  <span class=\"c1\"># Keys and secrets are defined in the project CI settings and exposed as env variables</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">AWS_ACCESS_KEY_ID</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">$AWS_ACCESS_KEY_ID</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">AWS_SECRET_ACCESS_KEY</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">$AWS_SECRET_ACCESS_KEY</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">AWS_DEFAULT_REGION</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"us-east-1\"</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">NAME</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"MyFunction\"</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">FILENAME</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"MyFunction.py\"</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">HANDLER</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"MyFunction.lambda_handler\"</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">RUNTIME</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"python3.6\"</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">ROLE</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"arn:aws:iam::XXXXXXXXXXXXX:role/XXXXXXXXXX\"</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">FILE</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"fileb://deploy_$CI_COMMIT_REF_NAME.zip\"</span>\r\n\r\n<span class=\"l l-Scalar l-Scalar-Plain\">stages</span><span class=\"p p-Indicator\">:</span>\r\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">test</span>\r\n  <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">deploy</span>\r\n\r\n<span class=\"l l-Scalar l-Scalar-Plain\">test</span><span class=\"p p-Indicator\">:</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">stage</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">image</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">badsectorlabs/code-checking:latest</span> <span class=\"c1\"># This is a docker image that contains a lot of code checking tools</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">script</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cpd --minimum-tokens 100 --language python --files .</span>\r\n    <span class=\"c1\"># pylint output is good to look at, but not worth breaking the build over</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pylint -d bad-continuation -d line-too-long -d import-error -d missing-docstring $FILENAME || true</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">flake8 --max-line-length 120 --ignore=E722,W503 .</span> <span class=\"c1\"># You must pass flake8 (W503 is wrong, pep8 changed)</span>\r\n\r\n<span class=\"l l-Scalar l-Scalar-Plain\">deploy-staging</span><span class=\"p p-Indicator\">:</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">stage</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">deploy</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">image</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">badsectorlabs/aws-compress-and-deploy:latest</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">variables</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"l l-Scalar l-Scalar-Plain\">ALIAS</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"Staging\"</span>\r\n    <span class=\"l l-Scalar l-Scalar-Plain\">DESC</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"Staging</span> <span class=\"s\">build,</span> <span class=\"s\">commit:</span> <span class=\"s\">$CI_COMMIT_SHA\"</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">script</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">virtualenv -p /usr/bin/python3.6 env</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">source env/bin/activate</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pip install -r requirements.txt</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">mkdir dist</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cp $FILENAME dist</span> <span class=\"c1\"># copy all files needed to dist</span>\r\n    <span class=\"c1\"># Copy any other directories (modules, etc) here</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cp -rf env/lib/python3.6/site-packages/* dist</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cd dist</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">zip -r9 ../deploy_$CI_COMMIT_REF_NAME.zip .</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cd ..</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">deactivate</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">ls -lart</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo Creating or updating $NAME</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"p p-Indicator\">&gt;</span> <span class=\"c1\"># This captures the code hash for the updated/created lambda function; -r is needed with jq to strip the quotes</span>\r\n      <span class=\"no\">CODE_SHA_256=$(aws lambda update-function-code --function-name $NAME --zip-file $FILE | jq -r .\"CodeSha256\" || aws lambda create-function</span>\r\n      <span class=\"no\">--function-name $NAME --runtime $RUNTIME --role $ROLE --handler $HANDLER --zip-file $FILE | jq -r .\"CodeSha256\")</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo Publishing LATEST, CodeSha256=$CODE_SHA_256, as 'Staging'</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">VERSION=$(aws lambda publish-version --function-name $NAME --description \"$DESC\" --code-sha-256 $CODE_SHA_256 | jq -r .\"Version\")</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo \"Published LATEST as version $VERSION\"</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"p p-Indicator\">&gt;</span>\r\n      <span class=\"no\">aws lambda update-alias --function-name $NAME --name $ALIAS --function-version $VERSION || aws lambda create-alias</span>\r\n      <span class=\"no\">--function-name $NAME --name $ALIAS --description \"Staging\" --function-version $VERSION</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo Successfully updated $NAME:$ALIAS</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">environment</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"l l-Scalar l-Scalar-Plain\">name</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">master-staging</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">only</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">master</span>\r\n\r\n<span class=\"l l-Scalar l-Scalar-Plain\">deploy-prod</span><span class=\"p p-Indicator\">:</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">stage</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">deploy</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">image</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">badsectorlabs/aws-compress-and-deploy:latest</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">variables</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"l l-Scalar l-Scalar-Plain\">ALIAS</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"Prod\"</span>\r\n    <span class=\"l l-Scalar l-Scalar-Plain\">DESC</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"Prod</span> <span class=\"s\">build,</span> <span class=\"s\">commit:</span> <span class=\"s\">$CI_COMMIT_SHA\"</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">script</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">virtualenv -p /usr/bin/python3.6 env</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">source env/bin/activate</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pip install -r requirements.txt</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">mkdir dist</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cp $FILENAME dist</span> <span class=\"c1\"># copy all files needed to dist</span>\r\n    <span class=\"c1\"># Copy any other directories (modules, etc) here</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cp -rf env/lib/python3.6/site-packages/* dist</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cd dist</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">touch PROD</span> <span class=\"c1\"># This is the canary that will tell the lambda function to use the PROD secrets</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">zip -r9 ../deploy_$CI_COMMIT_REF_NAME.zip .</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">cd ..</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">deactivate</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">ls -lart</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo Creating or updating $NAME</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"p p-Indicator\">&gt;</span> <span class=\"c1\"># This captures the code hash for the updated/created lambda function; -r is needed with jq to strip the quotes</span>\r\n      <span class=\"no\">CODE_SHA_256=$(aws lambda update-function-code --function-name $NAME --zip-file $FILE | jq -r .\"CodeSha256\" || aws lambda create-function</span>\r\n      <span class=\"no\">--function-name $NAME --runtime $RUNTIME --role $ROLE --handler $HANDLER --zip-file $FILE | jq -r .\"CodeSha256\")</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo Publishing LATEST, CodeSha256=$CODE_SHA_256, as 'Prod'</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">VERSION=$(aws lambda publish-version --function-name $NAME --description \"$DESC\" --code-sha-256 $CODE_SHA_256 | jq -r .\"Version\")</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo \"Published LATEST as version $VERSION\"</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"p p-Indicator\">&gt;</span>\r\n      <span class=\"no\">aws lambda update-alias --function-name $NAME --name $ALIAS --function-version $VERSION || aws lambda create-alias</span>\r\n      <span class=\"no\">--function-name $NAME --name $ALIAS --description \"Prod\" --function-version $VERSION</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo Successfully updated $NAME:$ALIAS</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">environment</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"l l-Scalar l-Scalar-Plain\">name</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">master-prod</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">only</span><span class=\"p p-Indicator\">:</span>\r\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">master</span>\r\n  <span class=\"l l-Scalar l-Scalar-Plain\">when</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">manual\r\n\r\n</span></code></pre>\n<p>Using this CI setup, the lambda can check for<code>PROD</code>with<code>if os.path.exists('PROD'):</code>and if so read in env variables for the production environment, and otherwise use staging variables. Note that both staging and production variables must be defined in the lambda settings (aliases take a snapshot of the lambda settings to prevent a setting change from breaking aliases that already exist).</p>\n<p>The CI setup for pushing the static site assets looks nearly identical to the\u00a0<a href=\"https://gitlab.com/badsectorlabs/blog/blob/master/.gitlab-ci.yml\">setup for this blog</a>.</p>\n</section>\n<section id=\"logging-and-monitoring\">\n<h3>Logging and Monitoring</h3>\n<p>Once you have some lambdas working away for you, it becomes necessary to monitor them. By default the lambdas will log any standard out to Cloudwatch, which is nice if you need to go back and see what caused an issue, but doesn&#8217;t help alert you when an issue occurs. There are many ways to solve this issue, including many that would leverage AWS services but I already had a lifetime\u00a0<a href=\"https://pushover.net/\">Pushover</a>\u00a0account, so decided to use it for instant push notifications on any unhandled lambda error.</p>\n<pre class=\"m-code\"><span class=\"k\">\r\ndef</span> <span class=\"nf\">send_pushover</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"s1\">'pushover'</span><span class=\"p\">):</span>\r\n    <span class=\"sd\">\"\"\"</span>\r\n<span class=\"sd\">    Send a pushover message</span>\r\n<span class=\"sd\">    :param message: string; the message to send</span>\r\n<span class=\"sd\">    :param title: string; the title of the message</span>\r\n<span class=\"sd\">    :param sound: string; one of the keys of {'pushover': 'Pushover (default)', 'bike': 'Bike', 'bugle': 'Bugle',</span>\r\n<span class=\"sd\">                          'cashregister': 'Cash Register', 'classical': 'Classical', 'cosmic': 'Cosmic',</span>\r\n<span class=\"sd\">                          'falling': 'Falling', 'gamelan': 'Gamelan', 'incoming': 'Incoming',</span>\r\n<span class=\"sd\">                          'intermission': 'Intermission', 'magic': 'Magic', 'mechanical': 'Mechanical',</span>\r\n<span class=\"sd\">                          'pianobar': 'Piano Bar', 'siren': 'Siren', 'spacealarm': 'Space Alarm', 'tugboat': 'Tug Boat',</span>\r\n<span class=\"sd\">                          'alien': 'Alien Alarm (long)', 'climb': 'Climb (long)', 'persistent': 'Persistent (long)',</span>\r\n<span class=\"sd\">                          'echo': 'Pushover Echo (long)', 'updown': 'Up Down (long)', 'none': 'None (silent)'}</span>\r\n<span class=\"sd\">    :return: None</span>\r\n<span class=\"sd\">    \"\"\"</span>\r\n    <span class=\"kn\">from</span> <span class=\"nn\">pushover</span> <span class=\"kn\">import</span> <span class=\"n\">init</span> <span class=\"k\">as</span> <span class=\"n\">pushover_init</span> <span class=\"c1\"># install with `pip3 install python-pushover`</span>\r\n    <span class=\"kn\">from</span> <span class=\"nn\">pushover</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\r\n    <span class=\"c1\"># Send Pushover notification via the API (this is the hamiltix key)</span>\r\n    <span class=\"n\">pushover_init</span><span class=\"p\">(</span><span class=\"s1\">'XXXXXXXXXXXXXXXXXXXXXXXXXXXXX'</span><span class=\"p\">)</span>\r\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'XXXXXXXXXXXXXXXXXXXXXXXXXXXXX'</span><span class=\"p\">)</span>\r\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"n\">sound</span><span class=\"p\">)</span>\r\n\r\n\r\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\r\n    <span class=\"k\">try</span><span class=\"p\">:</span>\r\n        <span class=\"k\">return</span> <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\r\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\r\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">'[FATAL] Caught exception: {}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\r\n        <span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\r\n        <span class=\"n\">error_trace</span> <span class=\"o\">=</span> <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">format_exc</span><span class=\"p\">()</span>\r\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">error_trace</span><span class=\"p\">)</span>\r\n        <span class=\"n\">error_title</span> <span class=\"o\">=</span> <span class=\"s1\">'Error in [LambdaFunctionName]'</span>\r\n        <span class=\"n\">send_pushover</span><span class=\"p\">(</span><span class=\"n\">error_trace</span><span class=\"p\">,</span> <span class=\"n\">error_title</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"s1\">'falling'</span><span class=\"p\">)</span>\r\n        <span class=\"k\">raise</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>  <span class=\"c1\"># Make sure the lambda function returns a 500\r\n\r\n</span></code></pre>\n<p>Getting a push alert any time there is an error helps us respond to issues as soon as they come up. The same<code>send_pushover()</code>is used to alert on other things as well, like any time a ticket is purchaced (with the cash register sound naturally).</p>\n</section>\n</section>\n<section id=\"cost\">\n<h2>Cost</h2>\n<p>So how much does it cost to run hamiltix.net? Right now we are still in the 12 month AWS \u201cfree-tier\u201d and monthly cost is stable at around $0.60, of which $0.50 is Route53 (one hosted zone) and the rest is S3 and taxes. After the \u201cfree-tier\u201d expires our S3 costs will increase slightly, API Gateway will be $0.09 per GB of data transferred out, and Cloudfront will be $0.085 for the first 10TB a month but Lambda, DynamoDB, and Cloudwatch will remain free (unless we get really popular!), and\u00a0<span class=\"strike\">costs should remain under $1</span>.\u00a0<a href=\"https://www.reddit.com/r/programming/comments/816mbu/how_we_built_hamiltixnet_for_less_than_1_a_month/dv17bbj/\">Reddit</a>\u00a0has correced my error, and API Gateway has a base fee of $3.50 for the first 1 million requests. After the free-tier expires costs should remain under $5. If we wanted to bring this down even more, moving the domain to Google Domains (or similar) would reduce our current costs by 80%!</p>\n<aside class=\"m-block m-success\">\n<h3>TLDR</h3>\n<p>The combination of AWS and Gitlab allows for incredibly inexpensive yet powerful hosting solution with CI/CD and monitoring that enables quick response to issues and automated building and deployment; all for under $1 a month!</p>\n<p>Questions or comments? blog (at) badsectorlabs.com</p>\n<p>source :\u00a0https://blog.badsectorlabs.com/how-we-built-hamiltixnet-for-less-than-1-a-month-on-aws.html</p>\n</aside>\n</section>\n", "slug": "how-we-built-hamiltix-net-for-less-than-1-a-month-on-aws", "date": 1520148274, "cats": [7, 10]}