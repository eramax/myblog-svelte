{"title": "Moving back from Node 10.5.0 to Node 8.11.3", "content": "<p>I faced many dependency issues due to the upgrade in my Linux machine (Manjaro - arch) so I decided to go back to the last stable version 8.11.3</p>\n<h2>Delete Old NodeJS</h2>\n<pre><code data-enlighter-language=\"null\">sudo pacman -Rsc -n nodejs</code></pre>\n<h2>Install nvm for managing Node.js versions</h2>\n<p>The reason for using\u00a0<a href=\"https://github.com/creationix/nvm\">nvm</a>\u00a0instead of other install types is mainly in how easy it is to have multiple versions of Node.js (if needed) without too much of extra complexity. Sometimes applications might require a certain version of Node.js to work, so having the flexibility of using specific versions can save a lot of time from you.</p>\n<ol>\n<li>Open new Terminal window.</li>\n<li>Run\u00a0<a href=\"https://github.com/creationix/nvm\">nvm</a>\u00a0installer\n<ul>\n<li>&#8230;with\u00a0<em>either</em>\u00a0curl\u00a0<em>or</em>\u00a0wget.\n<ul>\n<li><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</code></li>\n<li><code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</code></li>\n</ul>\n</li>\n<li>The script clones the nvm repository to\u00a0<code>~/.nvm</code>\u00a0and adds the source line to your profile (<code>~/.bash_profile</code>,\u00a0<code>~/.zshrc,</code>\u00a0<code>~/.profile,</code>\u00a0or\u00a0<code>~/.bashrc</code>). (You might want/need to add the source loading line by yourself, if the automated install tool does not add it for you.)</li>\n<li>\n<pre><code data-enlighter-language=\"null\">export NVM_DIR=\"$HOME/.nvm\"\r\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\r\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\r\n\r\n</code></pre>\n</li>\n</ul>\n</li>\n<li>If everything went well, you should now be able to reload the shell by running\n<ul>\n<li><code>source ~/.bashrc</code></li>\n<li>(Another option is to open a new Terminal window/tab.)</li>\n</ul>\n</li>\n<li>Verify installation\n<ul>\n<li>To verify that nvm has been installed, do:\u00a0<code>command -v nvm</code></li>\n</ul>\n</li>\n<li>List what versions of Node are currently installed (probably none).\n<ul>\n<li><code>nvm ls</code></li>\n</ul>\n</li>\n<li>Install latest\u00a0<a href=\"https://nodejs.org/en/\" rel=\"nofollow\">Node.js</a>\u00a0LTS release (recommended for production usage).\n<ul>\n<li><code>nvm install v8.11.3</code></li>\n</ul>\n</li>\n<li>Install Current\u00a0<a href=\"https://nodejs.org/en/\" rel=\"nofollow\">Node.js</a>\u00a0release with latest features (for testing the future features of Node).\n<ul>\n<li><code>nvm install v10.4.1</code></li>\n</ul>\n</li>\n<li>Set a default Node version for nvm (enabling you to actually use it in a new Terminal session windows).\n<ul>\n<li><code>nvm alias default v8.11.3</code>\u00a0(when you work with production quality projects)</li>\n<li><code>nvm alias default v10.4.1</code>\u00a0(ONLY if you want to test the latest features of Node.js. Please note that some packages are broken with the latest Node v10.)</li>\n</ul>\n</li>\n</ol>\n<p>It is also possible to select what Node.js version is used per project basis, by running\u00a0<code>nvm use v10.4.1</code>\u00a0(or another version number) on the directory where the individual project is located. One way to do that is to create small Bash shell script for enabling the right environment when needed, so you would not have to remember what exact version was needed. Now you have it.</p>\n<p>You can find a lot of packages from the\u00a0<a href=\"https://www.npmjs.com/\" rel=\"nofollow\">npm</a>\u00a0website. Have a good time with the tools.</p>\n<h2><a id=\"user-content-upgrading-from-previous-version-of-nodejs\" class=\"anchor\" href=\"https://gist.github.com/d2s/372b5943bce17b964a79#upgrading-from-previous-version-of-nodejs\" aria-hidden=\"true\"></a>Upgrading from previous version of Node.js</h2>\n<p>If you already have previous version of Node.js installed with nvm, you can upgrade to a different version with these steps.</p>\n<ul>\n<li>Open new Terminal window (to make sure you have latest Node.js version active in your command line environment).</li>\n<li>Linking global packages from previous version (at this example,\u00a0<code>v8._._</code>).\n<ul>\n<li><code>nvm reinstall-packages v8.11.2</code></li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"user-content-updating-outdated-packages\" class=\"anchor\" href=\"https://gist.github.com/d2s/372b5943bce17b964a79#updating-outdated-packages\" aria-hidden=\"true\"></a>Updating outdated packages</h3>\n<h4><a id=\"user-content-list-what-top-level-packages-are-installed-globally\" class=\"anchor\" href=\"https://gist.github.com/d2s/372b5943bce17b964a79#list-what-top-level-packages-are-installed-globally\" aria-hidden=\"true\"></a>List what (top level) packages are installed globally</h4>\n<div class=\"highlight highlight-source-shell\">\n<pre><code data-enlighter-language=\"null\">npm ls -g --depth=0.</code></pre>\n<p><strong>List what packages are outdated</strong></p>\n</div>\n<div class=\"highlight highlight-source-shell\">\n<pre><code data-enlighter-language=\"null\">npm outdated -g --depth=0.</code></pre>\n</div>\n<h4><a id=\"user-content-update-outdated-globally-installed-npm-packages\" class=\"anchor\" href=\"https://gist.github.com/d2s/372b5943bce17b964a79#update-outdated-globally-installed-npm-packages\" aria-hidden=\"true\"></a>Update outdated globally installed npm packages</h4>\n<div class=\"highlight highlight-source-shell\">\n<pre><code data-enlighter-language=\"null\">npm update -g</code></pre>\n</div>\n<h4><a id=\"user-content-fixing-old-package-versions\" class=\"anchor\" href=\"https://gist.github.com/d2s/372b5943bce17b964a79#fixing-old-package-versions\" aria-hidden=\"true\"></a>Fixing old package versions</h4>\n<p>After installation of Node v10.x (or similar), it can be a good idea to recompile old packages (that have compiled native extensions) to make sure that they work with the new version of Node. That can be done easily by going to a project\u2019s root directory, and running\u00a0<code>npm rebuild</code>:</p>\n<div class=\"highlight highlight-source-shell\">\n<pre><code data-enlighter-language=\"null\">cd PROJECT_NAME\r\nnpm rebuild</code></pre>\n</div>\n<h2><a id=\"user-content-deleting-old-nodejs-versions\" class=\"anchor\" href=\"https://gist.github.com/d2s/372b5943bce17b964a79#deleting-old-nodejs-versions\" aria-hidden=\"true\"></a>Deleting old Node.js versions</h2>\n<ul>\n<li>Look what versions are installed:\n<ul>\n<li><code>nvm ls</code></li>\n</ul>\n</li>\n<li>Delete an older version (if it is no longer used in some of your projects):\n<ul>\n<li><code>nvm uninstall v8.11.</code></li>\n</ul>\n</li>\n</ul>\n<div id=\"at_zurlpreview\">\n<p class=\"imgp\">Installing Node.js for Linux &amp; macOS with nvm</p>\n<p class=\"imgs\">Source: <a href=\"https://gist.github.com/d2s/372b5943bce17b964a79\" target=\"_blank\" rel=\"noopener\">gist.github.com/d2s/372b5943bce17b964a79</a></p>\n</div>\n", "slug": "moving-back-from-node-10-5-0-to-node-8-11-3", "date": 1531311923, "cats": [3]}