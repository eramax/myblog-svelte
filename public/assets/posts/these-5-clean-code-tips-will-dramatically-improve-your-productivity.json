{"title": "These 5 \u201cclean code\u201d tips will dramatically improve your productivity", "content": "<figure id=\"4d2e\" class=\"graf graf--figure graf-after--h3\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n</div>\n</figure>\n<p id=\"eeab\" class=\"graf graf--p graf-after--p\">Most people who code naturally know what quality code should look or\u00a0<em class=\"markup--em markup--p-em\">feel\u00a0</em>like. It should be very easy to read and understand quickly, there shouldn\u2019t be any major faults, edge cases should be handled, and it should be \u201cself documenting\u201d. Still, many people miss the mark when trying (hopefully) to write quality code.</p>\n<p id=\"9c7a\" class=\"graf graf--p graf-after--p\">The cause of the mistakes are understandable in many cases. It can be challenging to predict how people will interpret your code, whether they will find it easy to read or an absolute nightmare. Not only that, once your project gets very big even\u00a0<strong class=\"markup--strong markup--p-strong\">you</strong>\u00a0might not be able to read it!</p>\n<p id=\"9257\" class=\"graf graf--p graf-after--p\">In such a case, it\u2019s always good to establish some principals that you can rely on. Some go-to rules that you can always reference whenever you\u2019re designing or writing code.</p>\n<p id=\"8ac8\" class=\"graf graf--p graf-after--p\">The following 5 clean coding principals are the ones I code by! They\u2019ve given me a massive productivity boost in my work and helped both myself and my colleagues be able to easily interpret and expand the code base which I\u2019ve worked on. Hopefully they help you code faster and better too!</p>\n<h3 id=\"cff7\" class=\"graf graf--h3 graf-after--p\"><strong class=\"markup--strong markup--h3-strong\">If it isn\u2019t tested, it\u2019s\u00a0broken</strong></h3>\n<p id=\"8e4d\" class=\"graf graf--p graf-after--h3\">Test, test, test. We know we should always do it, but sometimes we cut corners so we can push the project out faster. But without thorough testing, how will you\u00a0<strong class=\"markup--strong markup--p-strong\">100%</strong>\u00a0fully know that the code works? Yes there are very simple pieces of code, but one is always surprised when that crazy edge case comes up that you thought you didn\u2019t need to test for!</p>\n<p id=\"28c2\" class=\"graf graf--p graf-after--p\">Do yourself and everyone on your team a favour and regularly test the code you write. You\u2019ll want to test in a\u00a0<em class=\"markup--em markup--p-em\">coarse to fine\u00a0</em>style. Start small with unit tests to make sure every small part works on its own. Then slowly start testing the different subsystems together working your way up towards testing the whole new system end to end. Testing in this way allows you to easily track where the system breaks, since you can easily verify each individual component or the small subsystems as the source of any issues.</p>\n<h3 id=\"13b1\" class=\"graf graf--h3 graf-after--p\">Choose meaningful names</h3>\n<p id=\"7cc4\" class=\"graf graf--p graf-after--h3\">This is what makes code self-documenting. When you read over your old code, you shouldn\u2019t have to look over every little comment and run every small piece of code to figure out what it all does!</p>\n<p id=\"b5bc\" class=\"graf graf--p graf-after--p\">The code should\u00a0<em class=\"markup--em markup--p-em\">roughly</em>\u00a0read like plain English. This is especially true for variable names, classes, and functions. Those three items should always have names that are self-explanatory. Rather than use a default name like \u201cx\u201d for example, call it \u201cwidth\u201d or \u201cdistance\u201d or whatever the variable is supposed to represent in \u201cread-world\u201d terms. Coding in \u201creal-world\u201d terms will help make your code read in that way</p>\n<h3 id=\"a792\" class=\"graf graf--h3 graf-after--p\"><strong class=\"markup--strong markup--h3-strong\">Classes and functions should be small and obey the Single Responsibility Principle (SRP)</strong></h3>\n<p id=\"86ba\" class=\"graf graf--p graf-after--h3\">Small classes and functions make code approximately 9832741892374 times easier to read\u2026.</p>\n<p id=\"a107\" class=\"graf graf--p graf-after--p\">But seriously they really do. First off, they allow for very isolated unit testing. If the piece of code you are testing is small, it\u2019s easy to source and debug any issues that come up in the test or during deployment. Small classes and functions also allow for better readability. Instead of having a giant block of code with many loops and variables, you can reduce that block to a function that runs several\u00a0<em class=\"markup--em markup--p-em\">smaller</em>\u00a0functions. You can then name each of those functions according to what they do and voila, human readable code!</p>\n<p id=\"a5ab\" class=\"graf graf--p graf-after--p\">SRP gives you similar benefits. One responsibility means you only have to test a handful of edge cases and those cases are quite easy to debug. In addition it\u2019s quite easy to name the function so it has real-world meaning. Since it only has one single purpose, it\u2019ll just be named after it\u2019s purpose, rather than trying to name a function that\u2019s trying to accomplish so many different things.</p>\n<h3 id=\"3dae\" class=\"graf graf--h3 graf-after--p\">Catch and handle exceptions, even if you don\u2019t think you need\u00a0to</h3>\n<p id=\"0448\" class=\"graf graf--p graf-after--h3\">Exceptions in code are usually edges case or errors that we would like to handle in our own specific way. For example, normally when an error is raised the program will stop; this definitely will not work for code we have deployed to production that is serving users! We\u2019ll want to handle that error separately, perhaps try to see if it\u2019s super critical or if we should just pass over it.</p>\n<p id=\"4284\" class=\"graf graf--p graf-after--p\">You should always be catching and handling exceptions specifically, even if you don\u2019t think you need to. Better to be safe than sorry. Exception handling will give you a better sense of order and control over your code, since you know\u00a0<em class=\"markup--em markup--p-em\">specifically</em>\u00a0what will happen if a certain exception is triggered or a piece of code fails. Having a deeper understand of your code like this makes it easier to debug and makes your code more fault tolerant.</p>\n<h3 id=\"6b26\" class=\"graf graf--h3 graf-after--p\">Logs, logs,\u00a0logs</h3>\n<p id=\"bc59\" class=\"graf graf--p graf-after--h3\">Log it. What you may ask?\u00a0\u2026. Everything that\u2019s what! There\u2019s no such thing as too much logs!</p>\n<p id=\"81fa\" class=\"graf graf--p graf-after--p\">Logs are your absolute number 1 source for debugging your code and monitoring your application when it\u2019s in production. You should be logging every major \u201cstep\u201d your program takes, any important calculations it makes, any errors, exceptions, or out of the ordinary results. It may also be useful to log the date and time that these events occur for easy tracking. All of this will make it easy to trace exactly which\u00a0<em class=\"markup--em markup--p-em\">step in the pipeline the program failed</em>.</p>\n<p id=\"076b\" class=\"graf graf--p graf-after--p\">Many common programming languages such as Python come with their own logging libraries that have some very useful functions you can play with. If your application is to run as a SaaS app, then you may want to consider off-device, centralised logging. This way if one of your servers dies you can easily recover the logs!</p>\n<h3 id=\"0fa7\" class=\"graf graf--h3 graf-after--p\">TL;DR</h3>\n<p id=\"0e2f\" class=\"graf graf--p graf-after--h3\">(1) If it isn\u2019t tested, it\u2019s broken</p>\n<p id=\"9e19\" class=\"graf graf--p graf-after--p\">(2) Choose meaningful names</p>\n<p id=\"0175\" class=\"graf graf--p graf-after--p\">(3) Classes and functions should be small and obey the Single Responsibility Principle (SRP)</p>\n<p id=\"20d8\" class=\"graf graf--p graf-after--p\">(4) Catch and handle exceptions, even if you don\u2019t think you need to</p>\n<p id=\"5c6c\" class=\"graf graf--p graf-after--p graf--trailing\">(5) Logs, logs, logs</p>\n<hr />\n<p>Source :\u00a0<a href=\"https://medium.com/@george.seif94/these-5-clean-code-tips-will-dramatically-improve-your-productivity-b20c152783b\">https://medium.com/@george.seif94/these-5-clean-code-tips-will-dramatically-improve-your-productivity-b20c152783b</a></p>\n", "slug": "these-5-clean-code-tips-will-dramatically-improve-your-productivity", "date": 1536422572, "cats": [0, 17]}