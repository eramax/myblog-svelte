{"title": "Web Architecture 101", "content": "<h2 id=\"9767\" class=\"graf graf--h4 graf-after--h3 graf--subtitle\">The basic architecture concepts I wish I knew when I was getting started as a web developer</h2>\n<figure id=\"afbf\" class=\"graf graf--figure graf-after--h4\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*K6M-x-6e39jMq_c-2xqZIQ.png\" data-width=\"665\" data-height=\"421\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"75\" height=\"46\"></canvas><img class=\"alignnone size-full wp-image-752\" src=\"https://emolike.net/wp-content/uploads/2018/08/1K6M-x-6e39jMq_c-2xqZIQ.png\" width=\"665\" height=\"421\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/1K6M-x-6e39jMq_c-2xqZIQ.png 665w, https://emolike.net/wp-content/uploads/2018/08/1K6M-x-6e39jMq_c-2xqZIQ-300x190.png 300w, https://emolike.net/wp-content/uploads/2018/08/1K6M-x-6e39jMq_c-2xqZIQ-426x270.png 426w\" sizes=\"(max-width: 665px) 100vw, 665px\" /></div>\n</div><figcaption class=\"imageCaption\">Modern web application architecture overview</figcaption></figure>\n<p id=\"ca90\" class=\"graf graf--p graf-after--figure\">The above diagram is a fairly good representation of our architecture at Storyblocks. If you\u2019re not an experienced web developer, you\u2019ll likely find it complicated. The walk through below should make it more approachable before we dive into the details of each component.</p>\n<blockquote id=\"df77\" class=\"graf graf--blockquote graf-after--p\"><p>A user searches on Google for \u201cStrong Beautiful Fog And Sunbeams In The Forest\u201d. The\u00a0<a class=\"markup--anchor markup--blockquote-anchor\" href=\"https://www.graphicstock.com/stock-image/strong-beautiful-fog-and-sunbeams-in-the-forest-246703\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.graphicstock.com/stock-image/strong-beautiful-fog-and-sunbeams-in-the-forest-246703\">first result</a>\u00a0happens to be from Storyblocks, our leading stock photo and vectors site. The user clicks the result which redirects their browser to the image details page. Underneath the hood the user\u2019s browser sends a request to a DNS server to lookup how to contact Storyblocks, and then sends the request.</p></blockquote>\n<blockquote id=\"ac55\" class=\"graf graf--blockquote graf-after--blockquote\"><p>The request hits our load balancer, which randomly chooses one of the 10 or so web servers we have running the site at the time to process the request. The web server looks up some information about the image from our caching service and fetches the remaining data about it from the database. We notice that the color profile for the image has not been computed yet, so we send a \u201ccolor profile\u201d job to our job queue, which our job servers will process asynchronously, updating the database appropriately with the results.</p></blockquote>\n<blockquote id=\"219c\" class=\"graf graf--blockquote graf-after--blockquote\"><p>Next, we attempt to find similar photos by sending a request to our full text search service using the title of the photo as input. The user happens to be a logged into Storyblocks as a member so we look up his account information from our account service. Finally, we fire off a page view event to our data firehose to be recorded on our cloud storage system and eventually loaded into our data warehouse, which analysts use to help answer questions about the business.</p></blockquote>\n<blockquote id=\"25e6\" class=\"graf graf--blockquote graf-after--blockquote\"><p>The server now renders the view as HTML and sends it back to the user\u2019s browser, passing first through the load balancer. The page contains Javascript and CSS assets that we load into our cloud storage system, which is connected to our CDN, so the user\u2019s browser contacts the CDN to retrieve the content. Lastly, the browser visibly renders the page for the user to see.</p></blockquote>\n<p id=\"ffc5\" class=\"graf graf--p graf-after--blockquote\">Next I\u2019ll walk you through each component, providing a \u201c101\u201d introduction to each that should give you a good mental model for thinking through web architecture going forward. I\u2019ll follow up with another series of articles providing specific implementation recommendations based on what I\u2019ve learned in my time at Storyblocks.</p>\n<h3 id=\"9d0a\" class=\"graf graf--h3 graf-after--p\">1. DNS</h3>\n<p id=\"f960\" class=\"graf graf--p graf-after--h3\">DNS stands for \u201cDomain Name Server\u201d and it\u2019s a backbone technology that makes the world wide web possible. At the most basic level DNS provides a key/value lookup from a domain name (e.g., google.com) to an IP address (e.g., 85.129.83.120), which is required in order for your computer to route a request to the appropriate server. Analogizing to phone numbers, the difference between a domain name and IP address is the difference between \u201ccall John Doe\u201d and \u201ccall 201-867\u20135309.\u201d Just like you needed a phone book to look up John\u2019s number in the old days, you need DNS to look up the IP address for a domain. So you can think of DNS as the phone book for the internet.</p>\n<p id=\"6fe5\" class=\"graf graf--p graf-after--p\">There\u2019s a lot more detail we could go into here but we\u2019ll skip over it because it\u2019s not critical for our 101-level intro.</p>\n<h3 id=\"cccb\" class=\"graf graf--h3 graf-after--p\">2. Load\u00a0Balancer</h3>\n<p id=\"88bb\" class=\"graf graf--p graf-after--h3\">Before diving into details on load balancing, we need to take a step back to discuss horizontal vs. vertical application scaling. What are they and what\u2019s the difference? Very simply put in\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://stackoverflow.com/questions/11707879/difference-between-scaling-horizontally-and-vertically-for-databases\" target=\"_blank\" rel=\"noopener\" data-href=\"https://stackoverflow.com/questions/11707879/difference-between-scaling-horizontally-and-vertically-for-databases\">this StackOverflow post</a>,\u00a0<span class=\"markup--quote markup--p-quote is-other\" data-creator-ids=\"anon\">horizontal scaling means that you scale by adding more machines into your pool of resources whereas \u201cvertical\u201d scaling means that you scale by adding more power (e.g., CPU, RAM) to an existing machine.</span></p>\n<p id=\"9f4c\" class=\"graf graf--p graf-after--p\">In web development, you (almost) always want to scale horizontally because, to keep it simple, stuff breaks. Servers crash randomly. Networks degrade. Entire data centers occasionally go offline. Having more than one server allows you to plan for outages so that your application continues running. In other words, your app is \u201cfault tolerant.\u201d Secondly, horizontal scaling allows you to minimally couple different parts of your application backend (web server, database, service X, etc.) by having each of them run on different servers. Lastly, you may reach a scale where it\u2019s not possible to vertically scale any more. There is no computer in the world big enough to do all your app\u2019s computations. Think Google\u2019s search platform as a quintessential example though this applies to companies at much smaller scales. Storyblocks, for example, runs 150 to 400 AWS EC2 instances at any given point in time. It would be challenging to provide that entire compute power via vertical scaling.</p>\n<p id=\"930a\" class=\"graf graf--p graf-after--p\">Ok, back to load balancers. They\u2019re the magic sauce that makes scaling horizontally possible. They route incoming requests to one of many application servers that are typically clones / mirror images of each other and send the response from the app server back to the client. Any one of them should process the request the same way so it\u2019s just a matter of distributing the requests across the set of servers so none of them are overloaded.</p>\n<p id=\"bf2b\" class=\"graf graf--p graf-after--p\">That\u2019s it. Conceptually load balancers are fairly straight forward. Under the hood there are certainly complications but no need to dive in for our 101 version.</p>\n<h3 id=\"8cdc\" class=\"graf graf--h3 graf-after--p\">3. Web Application Servers</h3>\n<p id=\"8b38\" class=\"graf graf--p graf-after--h3\">At a high level web application servers are relatively simple to describe. They execute the core business logic that handles a user\u2019s request and sends back HTML to the user\u2019s browser. To do their job, they typically communicate with a variety of backend infrastructure such as databases, caching layers, job queues, search services, other microservices, data/logging queues, and more. As mentioned above, you typically have at least two and often times many more, plugged into a load balancer in order to process user requests.</p>\n<p id=\"8c8c\" class=\"graf graf--p graf-after--p\">You should know that app server implementations require choosing a specific language (Node.js, Ruby, PHP, Scala, Java, C#\u00a0.NET, etc.) and a web MVC framework for that language (Express for Node.js, Ruby on Rails, Play for Scala, Laravel for PHP, etc.). However, diving into the details of these languages and frameworks is beyond the scope of this article.</p>\n<h3 id=\"b1f1\" class=\"graf graf--h3 graf-after--p\">4. Database\u00a0Servers</h3>\n<p id=\"51eb\" class=\"graf graf--p graf-after--h3\">Every modern web application leverages one or more databases to store information. Databases provide ways of defining your data structures, inserting new data, finding existing data, updating or deleting existing data, performing computations across the data, and more. In most cases the web app servers talk directly to one, as will the job servers. Additionally, each backend service may have it\u2019s own database that\u2019s isolated from the rest of the application.</p>\n<p id=\"e7dc\" class=\"graf graf--p graf-after--p\">While I\u2019m avoiding a deep dive on particular technologies for each architecture component, I\u2019d be doing you a disservice not to mention the next level of detail for databases: SQL and NoSQL.</p>\n<p id=\"1be9\" class=\"graf graf--p graf-after--p\">SQL stands for \u201cStructured Query Language\u201d and was invented in the 1970s to provide a standard way of querying relational data sets that was accessible to a wide audience. SQL databases store data in tables that are linked together via common IDs, typically integers. Let\u2019s walk through a simple example of storing historical address information for users. You might have two tables, users and user_addresses, linked together by the user\u2019s id. See the image below for a simplistic version. The tables are linked because the user_id column in user_addresses is a \u201cforeign key\u201d to the id column in the users table.</p>\n<figure id=\"e002\" class=\"graf graf--figure graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*Ln39QPggpJVMAScUBsrcCQ.png\" data-width=\"451\" data-height=\"171\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"75\" height=\"27\"></canvas><img class=\"alignnone size-full wp-image-753\" src=\"https://emolike.net/wp-content/uploads/2018/08/1Ln39QPggpJVMAScUBsrcCQ.png\" width=\"451\" height=\"171\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/1Ln39QPggpJVMAScUBsrcCQ.png 451w, https://emolike.net/wp-content/uploads/2018/08/1Ln39QPggpJVMAScUBsrcCQ-300x114.png 300w\" sizes=\"(max-width: 451px) 100vw, 451px\" /></div>\n</div>\n</figure>\n<p id=\"6d1e\" class=\"graf graf--p graf-after--figure\">If you don\u2019t know much about SQL, I highly recommend walking through a tutorial like you can find on Khan Academy\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://www.khanacademy.org/computing/computer-programming/sql\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.khanacademy.org/computing/computer-programming/sql\">here</a>. It\u2019s ubiquitous in web development so you\u2019ll at least want to know the basics in order to properly architect an application.</p>\n<p id=\"ea83\" class=\"graf graf--p graf-after--p\">NoSQL, which stands for \u201cNon-SQL\u201d, is a newer set of database technologies that has emerged to handle the massive amounts of data that can be produced by large scale web applications (most variants of SQL don\u2019t scale horizontally very well and can only scale vertically to a certain point). If you don\u2019t know anything about NoSQL, I recommend starting with some high level introductions like these:</p>\n<ul class=\"postList\">\n<li id=\"7c41\" class=\"graf graf--li graf-after--p\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://www.w3resource.com/mongodb/nosql.php\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://www.w3resource.com/mongodb/nosql.php\">https://www.w3resource.com/mongodb/nosql.php</a></li>\n<li id=\"c923\" class=\"graf graf--li graf-after--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"http://www.kdnuggets.com/2016/07/seven-steps-understanding-nosql-databases.html\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"http://www.kdnuggets.com/2016/07/seven-steps-understanding-nosql-databases.html\">http://www.kdnuggets.com/2016/07/seven-steps-understanding-nosql-databases.html</a></li>\n<li id=\"ebd3\" class=\"graf graf--li graf-after--li\"><a class=\"markup--anchor markup--li-anchor\" href=\"https://resources.mongodb.com/getting-started-with-mongodb/back-to-basics-1-introduction-to-nosql\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://resources.mongodb.com/getting-started-with-mongodb/back-to-basics-1-introduction-to-nosql\">https://resources.mongodb.com/getting-started-with-mongodb/back-to-basics-1-introduction-to-nosql</a></li>\n</ul>\n<p id=\"e54c\" class=\"graf graf--p graf-after--li\">I would also keep in mind that, by and large,\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a\" target=\"_blank\" rel=\"noopener\" data-href=\"https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a\">the industry is aligning on SQL as an interface even for NoSQL databases</a>\u00a0so you really should learn SQL if you don\u2019t know it. There\u2019s almost no way to avoid it these days.</p>\n<h3 id=\"d933\" class=\"graf graf--h3 graf-after--p\">5. Caching\u00a0Service</h3>\n<p id=\"9a2d\" class=\"graf graf--p graf-after--h3\">A caching service provides a simple key/value data store that makes it possible to save and lookup information in close to O(1) time. Applications typically leverage caching services to save the results of expensive computations so that it\u2019s possible to retrieve the results from the cache instead of recomputing them the next time they\u2019re needed. An application might cache results from a database query, calls to external services, HTML for a given URL, and many more. Here are some examples from real world applications:</p>\n<ul class=\"postList\">\n<li id=\"82ec\" class=\"graf graf--li graf-after--p\">Google caches search results for common search queries like \u201cdog\u201d or \u201cTaylor Swift\u201d rather than re-computing them each time</li>\n<li id=\"14d1\" class=\"graf graf--li graf-after--li\">Facebook caches much of the data you see when you log in, such as post data, friends, etc. Read a detailed article on Facebook\u2019s caching tech\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://medium.com/@shagun/scaling-memcache-at-facebook-1ba77d71c082\" target=\"_blank\" rel=\"noopener\" data-href=\"https://medium.com/@shagun/scaling-memcache-at-facebook-1ba77d71c082\">here</a>.</li>\n<li id=\"1ba4\" class=\"graf graf--li graf-after--li\">Storyblocks caches the HTML output from server-side React rendering, search results, typeahead results, and more.</li>\n</ul>\n<p id=\"eb61\" class=\"graf graf--p graf-after--li\">The two most widespread caching server technologies are Redis and Memcache. I\u2019ll go into more detail here in another post.</p>\n<h3 id=\"c0b3\" class=\"graf graf--h3 graf-after--p\">6. Job Queue &amp;\u00a0Servers</h3>\n<p id=\"73ca\" class=\"graf graf--p graf-after--h3\">Most web applications need to do some work asynchronously behind the scenes that\u2019s not directly associated with responding to a user\u2019s request. For instance, Google needs to crawl and index the entire internet in order to return search results. It does not do this every time you search. Instead, it crawls the web asynchronously, updating the search indexes along the way.</p>\n<p id=\"f4f0\" class=\"graf graf--p graf-after--p\">While there are different architectures that enable asynchronous work to be done, the most ubiquitous is what I\u2019ll call the \u201cjob queue\u201d architecture. It consists of two components: a queue of \u201cjobs\u201d that need to be run and one or more job servers (often called \u201cworkers\u201d) that run the jobs in the queue.</p>\n<p id=\"d0c2\" class=\"graf graf--p graf-after--p\">Job queues store a list of jobs that need to be run asynchronously. The simplest are first-in-first-out (FIFO) queues though most applications end up needing some sort of priority queuing system. Whenever the app needs a job to be run, either on some sort of regular schedule or as determined by user actions, it simply adds the appropriate job to the queue.</p>\n<p id=\"fc7f\" class=\"graf graf--p graf-after--p\">Storyblocks, for instance, leverages a job queue to power a lot of the behind-the-scenes work required to support our marketplaces. We run jobs to encode videos and photos, process CSVs for metadata tagging, aggregate user statistics, send password reset emails, and more. We started with a simple FIFO queue though we upgraded to a priority queue to ensure that time-sensitive operations like sending password reset emails were completed ASAP.</p>\n<p id=\"6ae4\" class=\"graf graf--p graf-after--p\">Job servers process jobs. They poll the job queue to determine if there\u2019s work to do and if there is, they pop a job off the queue and execute it. The underlying languages and frameworks choices are as numerous as for web servers so I won\u2019t dive into detail in this article.</p>\n<h3 id=\"a34f\" class=\"graf graf--h3 graf-after--p\">7. Full-text Search\u00a0Service</h3>\n<p id=\"593e\" class=\"graf graf--p graf-after--h3\">Many if not most web apps support some sort of search feature where a user provides a text input (often called a \u201cquery\u201d) and the app returns the most \u201crelevant\u201d results. The technology powering this functionality is typically referred to as \u201c<a class=\"markup--anchor markup--p-anchor\" href=\"https://en.wikipedia.org/wiki/Full-text_search\" target=\"_blank\" rel=\"noopener\" data-href=\"https://en.wikipedia.org/wiki/Full-text_search\">full-text search</a>\u201d, which leverages an\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://en.wikipedia.org/wiki/Inverted_index\" target=\"_blank\" rel=\"noopener\" data-href=\"https://en.wikipedia.org/wiki/Inverted_index\">inverted index</a>\u00a0to quickly look up documents that contain the query keywords.</p>\n<figure id=\"4131\" class=\"graf graf--figure graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*gun_BpdDH9KrNna1NnaocA.png\" data-width=\"561\" data-height=\"189\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"75\" height=\"25\"></canvas><img class=\"alignnone size-full wp-image-754\" src=\"https://emolike.net/wp-content/uploads/2018/08/1gun_BpdDH9KrNna1NnaocA.png\" width=\"561\" height=\"189\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/1gun_BpdDH9KrNna1NnaocA.png 561w, https://emolike.net/wp-content/uploads/2018/08/1gun_BpdDH9KrNna1NnaocA-300x101.png 300w\" sizes=\"(max-width: 561px) 100vw, 561px\" /></div>\n</div><figcaption class=\"imageCaption\">Example showing how three document titles are converted into an inverted index to facilitate fast lookup from a specific keyword to the documents with that keyword in the title. Note, common words such as \u201cin\u201d, \u201cthe\u201d, \u201cwith\u201d, etc. (called stop words), are typically not included in an inverted\u00a0index.</figcaption></figure>\n<p id=\"17b8\" class=\"graf graf--p graf-after--figure\">While it\u2019s possible to do full-text search directly from some databases (e.g.,\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html\" target=\"_blank\" rel=\"noopener\" data-href=\"https://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html\">MySQL supports full-text search</a>), it\u2019s typical to run a separate \u201csearch service\u201d that computes and stores the inverted index and provides a query interface. The most popular full-text search platform today is\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://www.elastic.co/products/elasticsearch\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.elastic.co/products/elasticsearch\">Elasticsearch</a>though there are other options such as\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"http://sphinxsearch.com/\" target=\"_blank\" rel=\"noopener\" data-href=\"http://sphinxsearch.com/\">Sphinx</a>\u00a0or\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"http://lucene.apache.org/solr/features.html\" target=\"_blank\" rel=\"noopener\" data-href=\"http://lucene.apache.org/solr/features.html\">Apache Solr</a>.</p>\n<h3 id=\"32fd\" class=\"graf graf--h3 graf-after--p\">8. Services</h3>\n<p id=\"90f1\" class=\"graf graf--p graf-after--h3\">Once an app reaches a certain scale, there will likely be certain \u201cservices\u201d that are carved out to run as separate applications. They\u2019re not exposed to the external world but the app and other services interact with them. Storyblocks, for example, has several operational and planned services:</p>\n<ul class=\"postList\">\n<li id=\"c8f9\" class=\"graf graf--li graf-after--p\"><strong class=\"markup--strong markup--li-strong\">Account service</strong>\u00a0stores user data across all our sites, which allows us to easily offer cross-sell opportunities and create a more unified user experience</li>\n<li id=\"4282\" class=\"graf graf--li graf-after--li\"><strong class=\"markup--strong markup--li-strong\">Content service\u00a0</strong>stores metadata for all of our video, audio, and image content. It also provides interfaces for downloading the content and viewing download history.</li>\n<li id=\"5144\" class=\"graf graf--li graf-after--li\"><strong class=\"markup--strong markup--li-strong\">Payment service\u00a0</strong>provides an interface for billing customer credit cards.</li>\n<li id=\"7f9f\" class=\"graf graf--li graf-after--li\"><strong class=\"markup--strong markup--li-strong\">HTML \u2192 PDF service</strong>\u00a0provides a simple interface that accepts HTML and returns a corresponding PDF document.</li>\n</ul>\n<h3 id=\"e18c\" class=\"graf graf--h3 graf-after--li\">9. Data</h3>\n<p id=\"4d99\" class=\"graf graf--p graf-after--h3\">Today, companies live and die based on how well they harness data. Almost every app these days, once it reaches a certain scale, leverages a data pipeline to ensure that data can be collected, stored, and analyzed. A typical pipeline has three main stages:</p>\n<ol class=\"postList\">\n<li id=\"d07b\" class=\"graf graf--li graf-after--p\">The app sends data, typically events about user interactions, to the data \u201cfirehose\u201d which provides a streaming interface to ingest and process the data. Often times the raw data is transformed or augmented and passed to another firehose. AWS Kinesis and Kafka are the two most common technologies for this purpose.</li>\n<li id=\"4bc3\" class=\"graf graf--li graf-after--li\">The raw data as well as the final transformed/augmented data are saved to cloud storage. AWS Kinesis provides a setting called \u201cfirehose\u201d that makes saving the raw data to it\u2019s cloud storage (S3) extremely easy to configure.</li>\n<li id=\"f705\" class=\"graf graf--li graf-after--li\">The transformed/augmented data is often loaded into a data warehouse for analysis. We use AWS Redshift, as does a large and growing portion of the startup world, though larger companies will often use Oracle or other proprietary warehouse technologies. If the data sets are large enough, a Hadoop-like NoSQL MapReduce technology may be required for analysis.</li>\n</ol>\n<p id=\"f1e9\" class=\"graf graf--p graf-after--li\">Another step that\u2019s not pictured in the architecture diagram: loading data from the app and services\u2019 operational databases into the data warehouse. For example at Storyblocks we load our VideoBlocks, AudioBlocks, Storyblocks, account service, and contributor portal databases into Redshift every night. This provides our analysts a holistic dataset by co-locating the core business data alongside our user interaction event data.</p>\n<h3 id=\"9811\" class=\"graf graf--h3 graf-after--p\">10. Cloud\u00a0storage</h3>\n<p id=\"0346\" class=\"graf graf--p graf--startsWithDoubleQuote graf-after--h3\">\u201cCloud storage is a simple and scalable way to store, access, and share data over the Internet\u201d\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://aws.amazon.com/what-is-cloud-storage/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://aws.amazon.com/what-is-cloud-storage/\">according to AWS</a>. You can use it to store and access more or less anything you\u2019d store on a local file system with the benefits of being able to interact with it via a RESTful API over HTTP. Amazon\u2019s S3 offering is by far the most popular cloud storage available today and the one we rely on extensively here at Storyblocks to store our video, photo, and audio assets, our CSS and Javascript, our user event data and much more.</p>\n<h3 id=\"311c\" class=\"graf graf--h3 graf-after--p\">11. CDN</h3>\n<p id=\"7402\" class=\"graf graf--p graf-after--h3\">CDN stands for \u201cContent Delivery Network\u201d and the technology provides a way of serving assets such as static HTML, CSS, Javascript, and images over the web much faster than serving them from a single origin server. It works by distributing the content across many \u201cedge\u201d servers around the world so that users end up downloading assets from the \u201cedge\u201d servers instead of the origin server. For instance in the image below, a user in Spain requests a web page from a site with origin servers in NYC, but the static assets for the page are loaded from a CDN \u201cedge\u201d server in England, preventing many slow cross-Atlantic HTTP requests.</p>\n<figure id=\"d2c4\" class=\"graf graf--figure graf-after--p\">\n<div class=\"aspectRatioPlaceholder is-locked\">\n<div class=\"aspectRatioPlaceholder-fill\"></div>\n<div class=\"progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded\" data-image-id=\"1*ZkC_5865Hx-Cgph3iPJghw.png\" data-width=\"918\" data-height=\"411\" data-action=\"zoom\" data-action-value=\"1*ZkC_5865Hx-Cgph3iPJghw.png\" data-scroll=\"native\"><canvas class=\"progressiveMedia-canvas js-progressiveMedia-canvas\" width=\"75\" height=\"32\"></canvas><img class=\"alignnone size-full wp-image-755\" src=\"https://emolike.net/wp-content/uploads/2018/08/1ZkC_5865Hx-Cgph3iPJghw.png\" width=\"918\" height=\"411\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/1ZkC_5865Hx-Cgph3iPJghw.png 918w, https://emolike.net/wp-content/uploads/2018/08/1ZkC_5865Hx-Cgph3iPJghw-300x134.png 300w, https://emolike.net/wp-content/uploads/2018/08/1ZkC_5865Hx-Cgph3iPJghw-768x344.png 768w, https://emolike.net/wp-content/uploads/2018/08/1ZkC_5865Hx-Cgph3iPJghw-604x270.png 604w\" sizes=\"(max-width: 918px) 100vw, 918px\" /></div>\n</div><figcaption class=\"imageCaption\"><a class=\"markup--anchor markup--figure-anchor\" href=\"https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/\">Source</a></figcaption></figure>\n<p id=\"402e\" class=\"graf graf--p graf-after--figure\"><a class=\"markup--anchor markup--p-anchor\" href=\"https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/\" target=\"_blank\" rel=\"noopener\" data-href=\"https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/\">Check out this article</a>\u00a0for a more thorough introduction. In general a web app should always use a CDN to serve CSS, Javascript, images, videos and any other assets. Some apps might also be able to leverage a CDN to serve static HTML pages.</p>\n<h3 id=\"0532\" class=\"graf graf--h3 graf-after--p\">Parting thoughts</h3>\n<p id=\"1777\" class=\"graf graf--p graf-after--h3 graf--trailing\">And that\u2019s a wrap on Web Architecture 101. I hope you found this useful. I\u2019ll hopefully post a series of 201 articles that provide deep dives into some of these components over the course of the next year or two.</p>\n<div id=\"at_zurlpreview\">\n<p> </p>\n<p class=\"imgd\">The basic architecture concepts I wish I knew when I was getting started as a web developer</p>\n<p class=\"imgs\">Source: <a href=\"https://engineering.videoblocks.com/web-architecture-101-a3224e126947\" target=\"_blank\" rel=\"noopener\">engineering.videoblocks.com/web-architecture-101-a3224e126947</a></p>\n</div>\n", "slug": "web-architecture-101", "date": 1534505111, "cats": [0, 10, 16, 5, 14]}