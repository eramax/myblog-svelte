{"title": "Web Developer Security Checklist", "content": "<section class=\"section section--body section--first\">\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<p id=\"90ea\" class=\"graf graf--p graf-after--figure\">Developing secure, robust web applications in the cloud is\u00a0<strong class=\"markup--strong markup--p-strong\">hard, very hard</strong>. If you think it is easy, you are either a higher form of life or you have a painful awakening ahead of you.</p>\n<p id=\"56b1\" class=\"graf graf--p graf-after--p\">If you have drunk the\u00a0<a class=\"markup--anchor markup--p-anchor\" href=\"https://en.wikipedia.org/wiki/Minimum_viable_product\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://en.wikipedia.org/wiki/Minimum_viable_product\">MVP</a>\u00a0cool-aid and believe that you can create a product in one month that is both valuable and secure\u200a\u2014\u200athink twice before you launch your \u201cproto-product\u201d. After you review the checklist below, acknowledge that you are skipping many of these critical security issues. At the very minimum, be\u00a0<em class=\"markup--em markup--p-em\">honest</em>\u00a0with your potential users and let them know that you don\u2019t have a complete product yet and are offering a prototype without full security.</p>\n<p id=\"81d7\" class=\"graf graf--p graf-after--p\">This checklist is simple, and by no means complete. I\u2019ve been developing secure web applications for over 14 years and this list contains some of the more important issues that I\u2019ve painfully learned over this period. I hope you will consider them seriously when creating a web application.</p>\n<p id=\"1f7f\" class=\"graf graf--p graf-after--p\">Please comment if you have an item I can add to the list.</p>\n<h3 id=\"f20d\" class=\"graf graf--h3 graf-after--p\"><strong class=\"markup--strong markup--h3-strong\">Database</strong></h3>\n<ul class=\"postList\">\n<li id=\"79ea\" class=\"graf graf--li graf-after--h3\">[ ] Use encryption for data identifying users and sensitive data like access tokens, email addresses or billing details if possible (this will restrict queries to exact match lookups).</li>\n<li id=\"6717\" class=\"graf graf--li graf-after--li\">[ ] If your database supports low cost encryption at rest (like\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://aws.amazon.com/about-aws/whats-new/2015/12/amazon-aurora-now-supports-encryption-at-rest/\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"https://aws.amazon.com/about-aws/whats-new/2015/12/amazon-aurora-now-supports-encryption-at-rest/\">AWS Aurora</a>), then enable that to secure data on disk. Make sure all backups are stored encrypted as well.</li>\n<li id=\"bf94\" class=\"graf graf--li graf-after--li\">[ ] Use minimal privilege for the database access user account. Don\u2019t use the database root account and check for unused accounts and accounts with bad passwords.</li>\n<li id=\"e390\" class=\"graf graf--li graf-after--li\">[ ] Store and distribute secrets using a key store designed for the purpose such as\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://www.vaultproject.io/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://www.vaultproject.io/\">Vault</a>\u00a0or\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://aws.amazon.com/secrets-manager/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://aws.amazon.com/secrets-manager/\">AWS Secret Manager</a>. Don\u2019t hard code secrets in your applications and NEVER check secrets into GitHub.</li>\n<li id=\"8441\" class=\"graf graf--li graf-after--li\">[ ] Fully prevent SQL injection by only using SQL prepared statements. For example: if using NPM, don\u2019t use npm-mysql, use npm-mysql2 which supports prepared statements.</li>\n</ul>\n<h3 id=\"ec7d\" class=\"graf graf--h3 graf-after--li\">Development</h3>\n<ul class=\"postList\">\n<li id=\"9132\" class=\"graf graf--li graf-after--h3\">[ ] Ensure that all components of your software are scanned for vulnerabilities for every version pushed to production. This means O/S, libraries and packages. This should be automated into the\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://en.wikipedia.org/wiki/CI/CD\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://en.wikipedia.org/wiki/CI/CD\">CI-CD</a>\u00a0process.</li>\n<li id=\"f7bd\" class=\"graf graf--li graf-after--li\">[ ] Secure development systems with equal vigilance to what you use for production systems. Build the software from secured, isolated development systems.</li>\n</ul>\n<h3 id=\"9169\" class=\"graf graf--h3 graf-after--li\">Authentication</h3>\n<ul class=\"postList\">\n<li id=\"55ee\" class=\"graf graf--li graf-after--h3\">[ ] Ensure all passwords are hashed using appropriate crypto such as\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://en.wikipedia.org/wiki/Bcrypt\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://en.wikipedia.org/wiki/Bcrypt\">bcrypt</a>. Never write your own crypto and correctly initialize crypto with good random data.</li>\n<li id=\"773b\" class=\"graf graf--li graf-after--li\">Use best-practices and proven components for login, forgot password and other password reset. Don\u2019t invent your own\u200a\u2014\u200ait is hard to get it right in all scenarios.</li>\n<li id=\"bd5c\" class=\"graf graf--li graf-after--li\">[ ] Implement simple but adequate password rules that encourage users to have long, random passwords.</li>\n<li id=\"d7ed\" class=\"graf graf--li graf-after--li\">[ ] Use multi-factor authentication for your logins to all your service providers.</li>\n</ul>\n<h3 id=\"9bac\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Denial of Service Protection</strong></h3>\n<ul class=\"postList\">\n<li id=\"9321\" class=\"graf graf--li graf-after--h3\">[ ] Make sure that DOS attacks on your APIs won\u2019t cripple your site. At a minimum, have rate limiters on your slower API paths and authentication related APIs like login and token generation routines. Consider CAPTCHA on front-end APIs to protect back-end services against DOS.</li>\n<li id=\"dcca\" class=\"graf graf--li graf-after--li\">[ ] Enforce sanity limits on the size and structure of user submitted data and requests.</li>\n<li id=\"d211\" class=\"graf graf--li graf-after--li\">[ ] Consider using\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://en.wikipedia.org/wiki/Denial-of-service_attack\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"https://en.wikipedia.org/wiki/Denial-of-service_attack\">Distributed Denial of Service</a>\u00a0(DDOS) mitigation via a global caching proxy service like\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"https://www.cloudflare.com/\">CloudFlare</a>. This can be turned on if you suffer a DDOS attack and otherwise function as your DNS lookup.</li>\n</ul>\n<h3 id=\"f1d4\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Web Traffic</strong></h3>\n<ul class=\"postList\">\n<li id=\"5698\" class=\"graf graf--li graf-after--h3\">[ ] Use TLS for the entire site, not just login forms and responses. Never use TLS for just the login form. Transitionally, use the strict-transport-security header to force HTTPS on all requests.</li>\n<li id=\"eb88\" class=\"graf graf--li graf-after--li\">[ ] Cookies must be httpOnly and secure and be scoped by path and domain.</li>\n<li id=\"68be\" class=\"graf graf--li graf-after--li\">[ ] Use\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://en.wikipedia.org/wiki/Content_Security_Policy\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"https://en.wikipedia.org/wiki/Content_Security_Policy\">CSP</a>\u00a0without allowing unsafe-* backdoors. It is a pain to configure, but worthwhile. Use CSP\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\">Subresource Integrity</a>\u00a0for CDN content.</li>\n<li id=\"6342\" class=\"graf graf--li graf-after--li\">[ ] Use X-Frame-Option, X-XSS-Protection headers in client responses. Use\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://observatory.mozilla.org/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://observatory.mozilla.org\">https://observatory.mozilla.org</a>\u00a0to score your site.</li>\n<li id=\"f060\" class=\"graf graf--li graf-after--li\">[ ] Use HSTS responses to force TLS only access. Redirect all HTTP request to HTTPS on the server as backup.</li>\n<li id=\"988f\" class=\"graf graf--li graf-after--li\">[ ] Use CSRF tokens in all forms and use the new\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://scotthelme.co.uk/csrf-is-dead/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://scotthelme.co.uk/csrf-is-dead/\">SameSite Cookie</a>response header which fixes CSRF once and for all newer browsers.</li>\n</ul>\n<h3 id=\"b353\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">APIs</strong></h3>\n<ul class=\"postList\">\n<li id=\"b2f3\" class=\"graf graf--li graf-after--h3\">[ ] Ensure that no resources are enumerable in your public APIs.</li>\n<li id=\"621f\" class=\"graf graf--li graf-after--li\">[ ] Ensure that users are fully authenticated and authorized appropriately when using your APIs.</li>\n<li id=\"9bd4\" class=\"graf graf--li graf-after--li\">[ ] Use canary checks in APIs to detect illegal or abnormal requests that indicate attacks.</li>\n</ul>\n<h3 id=\"274e\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Validation and\u00a0Encoding</strong></h3>\n<ul class=\"postList\">\n<li id=\"9e6d\" class=\"graf graf--li graf-after--h3\">[ ] Do client-side input validation for quick user feedback, but never trust it. Always validate and encode user input before displaying.</li>\n<li id=\"ae65\" class=\"graf graf--li graf-after--li\">[ ] Validate every last bit of user input using white lists on the server. Never directly inject user content into responses. Never use untrusted user input in SQL statements or other server-side logic.</li>\n</ul>\n<h3 id=\"cf24\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Cloud Configuration</strong></h3>\n<ul class=\"postList\">\n<li id=\"9312\" class=\"graf graf--li graf-after--h3\">[ ] Ensure all services have minimum ports open. While security through obscurity is no protection, using non-standard ports will make it a little bit harder for attackers.</li>\n<li id=\"cbc3\" class=\"graf graf--li graf-after--li\">[ ] Host backend database and services on private VPCs that are not visible on any public network. Be very careful when configuring AWS security groups and peering VPCs which can inadvertently make services visible to the public.</li>\n<li id=\"39e3\" class=\"graf graf--li graf-after--li\">[ ] Isolate logical services in separate VPCs and peer VPCs to provide inter-service communication.</li>\n<li id=\"a1a7\" class=\"graf graf--li graf-after--li\">[ ] Ensure all services only accept data from a minimal set of IP addresses.</li>\n<li id=\"8905\" class=\"graf graf--li graf-after--li\">[ ] Restrict outgoing IP and port traffic to minimize APTs and \u201cbotification\u201d.</li>\n<li id=\"6ff0\" class=\"graf graf--li graf-after--li\">[ ] Always use AWS IAM users and roles and not root credentials. Invest in learning to use IAM effectively.</li>\n<li id=\"ad28\" class=\"graf graf--li graf-after--li\">[ ] Use minimal access privilege for all ops and developer staff. Give IAM users and roles the minimum capabilities required to complete the task.</li>\n<li id=\"e718\" class=\"graf graf--li graf-after--li\">[ ] Regularly rotate passwords and access keys according to a schedule.</li>\n</ul>\n<h3 id=\"3810\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Infrastructure</strong></h3>\n<ul class=\"postList\">\n<li id=\"bfb3\" class=\"graf graf--li graf-after--h3\">[ ] Ensure you can do upgrades without downtime. Ensure you can quickly update software in a fully automated manner.</li>\n<li id=\"c8dd\" class=\"graf graf--li graf-after--li\">[ ] Create all infrastructure using a tool such as Terraform, and not via the cloud console. Infrastructure should be defined as \u201ccode\u201d and be able to be recreated at the push of a button. Have zero tolerance for any resource created in the cloud by hand\u200a\u2014\u200aTerraform can then audit your configuration.</li>\n<li id=\"4720\" class=\"graf graf--li graf-after--li\">[ ] Use centralized logging for all services. You should never need SSH to access or retrieve logs.</li>\n<li id=\"f040\" class=\"graf graf--li graf-after--li\">[ ]\u00a0<span class=\"markup--quote markup--li-quote is-other\" data-creator-ids=\"anon\">Don\u2019t SSH into services except for one-off diagnosis. Using SSH regularly, typically means you have not automated an important task.</span></li>\n<li id=\"518f\" class=\"graf graf--li graf-after--li\">[ ] Don\u2019t keep port 22 open on any AWS service groups on a permanent basis. If you must use SSH, only use public key authentication and not passwords.</li>\n<li id=\"67e4\" class=\"graf graf--li graf-after--li\">[ ] Create\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"http://chadfowler.com/2013/06/23/immutable-deployments.html\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"http://chadfowler.com/2013/06/23/immutable-deployments.html\">immutable hosts</a>\u00a0instead of long-lived servers that you patch and upgrade. (See\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://simplesecurity.sensedeep.com/immutable-infrastructure-can-be-dramatically-more-secure-238f297eca49\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://simplesecurity.sensedeep.com/immutable-infrastructure-can-be-dramatically-more-secure-238f297eca49\">Immutable Infrastructure Can Be More Secure</a>).</li>\n<li id=\"70fb\" class=\"graf graf--li graf-after--li\">[ ] Use an\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://en.wikipedia.org/wiki/Intrusion_detection_system\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"https://en.wikipedia.org/wiki/Intrusion_detection_system\">Intrusion Detection System</a>\u00a0to minimize\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://en.wikipedia.org/wiki/Advanced_persistent_threat\" target=\"_blank\" rel=\"noopener nofollow\" data-href=\"https://en.wikipedia.org/wiki/Advanced_persistent_threat\">APTs</a>.</li>\n</ul>\n<h3 id=\"929e\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Operation</strong></h3>\n<ul class=\"postList\">\n<li id=\"9ca4\" class=\"graf graf--li graf-after--h3\">[ ] Power off unused services and servers. The most secure server is one that is powered down. Schedule dev servers to be\u00a0<a class=\"markup--anchor markup--li-anchor\" href=\"https://www.powerdown.io/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://www.powerdown.io\">powered down</a>\u00a0after hours when not required.</li>\n</ul>\n<h3 id=\"70f4\" class=\"graf graf--h3 graf-after--li\">Test</h3>\n<ul class=\"postList\">\n<li id=\"83c9\" class=\"graf graf--li graf-after--h3\">[ ] Audit your design and implementation.</li>\n<li id=\"4ce0\" class=\"graf graf--li graf-after--li\">[ ] Do penetration testing\u200a\u2014\u200ahack yourself, but also have someone other than you pen testing as well.</li>\n</ul>\n<h3 id=\"8e09\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Train</strong></h3>\n<ul class=\"postList\">\n<li id=\"7846\" class=\"graf graf--li graf-after--h3\">Train staff (especially senior staff) as to the dangers and techniques used in security social engineering.</li>\n</ul>\n<h3 id=\"dfc6\" class=\"graf graf--h3 graf-after--li\"><strong class=\"markup--strong markup--h3-strong\">Finally, have a\u00a0plan</strong></h3>\n<ul class=\"postList\">\n<li id=\"62ec\" class=\"graf graf--li graf-after--h3\">[ ] Have a threat model that describes what you are defending against. It should list and prioritize the possible threats and actors.</li>\n<li id=\"5deb\" class=\"graf graf--li graf-after--li graf--trailing\">[ ] Have a practiced security incident plan. One day, you will need it.</li>\n</ul>\n</div>\n</div>\n</section>\n<section class=\"section section--body section--last\">\n<div class=\"section-divider\">\n<hr class=\"section-divider\" />\n</div>\n<div class=\"section-content\">\n<div class=\"section-inner sectionLayout--insetColumn\">\n<div id=\"at_zurlpreview\">\n<p class=\"imgd\">Developing secure, robust web applications in the cloud is hard, very hard. If you think it is easy, you are either a higher form of life\u2026</p>\n<p class=\"imgs\">Source: <a href=\"https://medium.com/simple-security/web-developer-security-checklist-f2e4f43c9c56\" target=\"_blank\" rel=\"noopener\">medium.com/simple-security/web-developer-security-checklist-f2e4f43c9c56</a></p>\n</div>\n</div>\n</div>\n</section>\n", "slug": "web-developer-security-checklist", "date": 1534682624, "cats": [0, 17, 15]}