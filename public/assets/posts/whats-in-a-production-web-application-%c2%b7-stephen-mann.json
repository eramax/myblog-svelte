{"title": "What&#8217;s in a Production Web Application?", "content": "<ul>\n<li>Getting Started</li>\n<li>Launch Day</li>\n<li>Performance Problems</li>\n<li>Growing the Team</li>\n<li>Smooth Sailing</li>\n<li>Outro</li>\n</ul>\n<p>Early in my career, I worked at a company that built web content management systems. Their product helped marketing departments self-manage their own websites, instead of relying on developers to make every change. This product helped their customers reduce operational expenses, and it helped me learn how to build web applications.</p>\n<p>While the product itself had a very general purpose, its customers tended to use it to solve very specific problems. These problems pushed the product to its limits in every imaginable way, and engineering ultimately had to provide solutions. Working in this environment for oven ten years gave me a thorough appreciation for the wide variety of ways a production web application can break, some of which we\u2019ll discuss in this post.</p>\n<p>One of the lessons I learned during these years was that individual engineers tend to learn very deeply what interests them, and learn just enough of the supporting pieces to be dangerous. This works out well for a team of engineers with good communication, since that combined knowledge will overlap to fill in any individual\u2019s gaps. For teams with little experience in the industry or for individual engineers, this isn\u2019t possible.</p>\n<p>If you started in an environment like this and then set out to build and deploy an entire web application from scratch, you might find out very quickly what I mean by \u201cdangerous.\u201d</p>\n<p>The industry has provided a number of solutions aimed at addressing this problem: managed web applications (Beanstalk, AppEngine, etc\u2026), hosted container management (Kubernetes, ECS, etc\u2026), and many others. These work well once you get them up and running, and I think they do an excellent job at solving the problem. They hide a lot of the complexity required to get a web application up and running, and they tend to \u201cjust work\u201d.</p>\n<p>Unfortunately, when it doesn\u2019t \u201cjust work,\u201d or when it comes time to make a nuanced decision around a specific production issue, you may find yourself wishing you understood a bit more about that ominous black box.</p>\n<p>In this post, I\u2019m going to take an unreliable system and evolve it into one with a reasonable level of reliability. Each step along the way will use a real world problem as motivation to move onto the next step. Rather than discussing each piece of the final design, I find that this incremental approach helps provide better context for when and in which order to make certain decisions. At the end, we\u2019ll have built from scratch the basic structure of what a managed web application hosting service provides, and hopefully will have provided ample context around why each piece exists.</p>\n<h2 id=\"getting-started\">Getting Started</h2>\n<p>Let\u2019s pretend that you have a $500 hosting budget for the year, so you\u2019ve decided to rent a single t2.medium server from Amazon AWS. At the time of writing, this costs just about $400 per year.</p>\n<p>You know up front that you\u2019ll have login sessions and that you\u2019ll need to store user information, so you\u2019ll need a database. Due to a constrained budget, let\u2019s host this on our only server. You end up with infrastructure that looks like this:</p>\n<figure><img class=\"alignnone size-full wp-image-797\" src=\"https://emolike.net/wp-content/uploads/2018/08/fig1.png\" width=\"858\" height=\"490\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/fig1.png 858w, https://emolike.net/wp-content/uploads/2018/08/fig1-300x171.png 300w, https://emolike.net/wp-content/uploads/2018/08/fig1-768x439.png 768w, https://emolike.net/wp-content/uploads/2018/08/fig1-473x270.png 473w\" sizes=\"(max-width: 858px) 100vw, 858px\" /><figcaption>\n<h4>Figure 1</h4>\n</figcaption></figure>\n<p>This should suffice for now. In fact, it will probably work for quite a while. You\u2019re small. At this point, you probably only have to handle up to 10 visits per day. A small instance may have sufficed, but since you\u2019re optimistic about your company\u2019s growth, you made a good choice with the t2.medium instance.</p>\n<p>The value of your business is stored in that database, so it\u2019s pretty important. You should make sure if the server goes down, you don\u2019t lose the data. It\u2019s probably a good time to make sure you haven\u2019t stored the database contents on an ephemeral disk. If the instance gets deleted, you\u2019re going to lose all of your data. That\u2019s a scary thought.</p>\n<p>You should also make sure you have backups going to external storage. S3 seems like a good place to put these, and it\u2019s relatively cheap, so let\u2019s set that up as well. And you should definitely test that it\u2019s working by restoring a backup every once in a while.</p>\n<p>Your setup should now look something like this:</p>\n<figure><img class=\"alignnone size-full wp-image-798\" src=\"https://emolike.net/wp-content/uploads/2018/08/fig2.png\" width=\"1188\" height=\"540\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/fig2.png 1188w, https://emolike.net/wp-content/uploads/2018/08/fig2-300x136.png 300w, https://emolike.net/wp-content/uploads/2018/08/fig2-768x349.png 768w, https://emolike.net/wp-content/uploads/2018/08/fig2-1024x465.png 1024w, https://emolike.net/wp-content/uploads/2018/08/fig2-594x270.png 594w\" sizes=\"(max-width: 1188px) 100vw, 1188px\" /><figcaption>\n<h4>Figure 2</h4>\n</figcaption></figure>\n<p>Now that you\u2019ve increased the reliability of your database, you decide to prepare for your massive Hacker News traffic spike by running a load test against your server. Everything seems to be going well until the 500 errors start showing up, followed by a stream of 404s, so you investigate to figure out what happened.</p>\n<p>It turns out you have no clue what failed because you were writing your logs to the console, and you weren\u2019t piping the console output into a log file. You also see that the process isn\u2019t running, so you safely assume that\u2019s why you got 404s. A mild wave of relief washes over you that you had the forsight to run a local load test instead of using Hacker News as a load test.</p>\n<p>You fix the autorestart issue by creating a\u00a0<code>systemd</code>\u00a0service that runs your web server, which ends up solving your logging problem as well. Then you run another load test to make sure you\u2019ve solved everything.</p>\n<p>Once again, you see 500 errors (thankfully with no 404s), and you check the logs to see what went wrong. You discover that you\u2019ve saturated your database connection pool, which was set to the unfortunately low limit of 10 connections. You update the limit, restart the database, and then run your load test again. Everything goes well, so you decide to promote your site on Hacker News.</p>\n<h2 id=\"launch-day\">Launch Day</h2>\n<p>Great Scott! Your service is an instant hit. You hit the front page of Hacker News. You get 5,000 hits in the first 30 minutes, and you see comments pouring in. What do they say?</p>\n<blockquote><p>I\u2019m getting a 404, so I had to check the archived version of the page. Here\u2019s the link if anyone needs it: \u2026</p></blockquote>\n<p>\u2026</p>\n<blockquote><p>Nothing shows up for me. Also, I have Javascript disabled. Why do people assume I want your 2 MB Javascript \u2026</p></blockquote>\n<p>\u2026</p>\n<blockquote><p>Your homepage takes 4 seconds to load. Traceroute from where I live in Australia shows the server\u2019s hosted somewhere in Texas. Also, why does your landing page require 2 MB of Javascript?</p></blockquote>\n<p>In a mad scramble, you set up Nginx on your server as a reverse proxy to your application, and you configure it to server a static 404 page. You also update your deployment process to push static files to S3, which is necessary for the CloudFront CDN to help reduce the load time in Australia.</p>\n<figure><img class=\"alignnone size-full wp-image-799\" src=\"https://emolike.net/wp-content/uploads/2018/08/fig3.png\" width=\"1184\" height=\"946\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/fig3.png 1184w, https://emolike.net/wp-content/uploads/2018/08/fig3-300x240.png 300w, https://emolike.net/wp-content/uploads/2018/08/fig3-768x614.png 768w, https://emolike.net/wp-content/uploads/2018/08/fig3-1024x818.png 1024w, https://emolike.net/wp-content/uploads/2018/08/fig3-338x270.png 338w\" sizes=\"(max-width: 1184px) 100vw, 1184px\" /><figcaption>\n<h4>Figure 3</h4>\n</figcaption></figure>\n<p>Now that you\u2019ve addressed your immediate problem, you go onto your server and check the logs. Your SSH connection is curiously laggy. After some inspection, you discover that your log files have completely used up your disk space, which crashed your process and prevented it from starting again. You create a much larger disk and mount your logs on it. You also setup\u00a0<code>logrotate</code>\u00a0to prevent your log files from getting so huge again.</p>\n<h2 id=\"performance-problems\">Performance Problems</h2>\n<p>Months pass. Your userbase grow. Your site begins to slow down. You notice in your CloudWatch monitoring that this seems to happen only between the hours of midnight and noon UTC. Due to the consistent start and end times of the slowdown, you guess that it\u2019s due to a scheduled task on your server. You check your crontab and realize that you have one job scheduled at midnight: backups. Sure enough, your backups take twelve hours, and they overload the database causing a significant site slowdown.</p>\n<p>Having read about this before, you decide that you should run backups on your slave database. Then you remember: you don\u2019t have a slave database, so you need to create one. It doesn\u2019t make much sense to run your slave database on the same server, so you decide it\u2019s time to expand. You create two new servers: one for the master database,and one for the slave database. You change your backups to run against the slave database.</p>\n<figure><img class=\"alignnone size-full wp-image-800\" src=\"https://emolike.net/wp-content/uploads/2018/08/fig4.png\" width=\"1163\" height=\"1280\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/fig4.png 1163w, https://emolike.net/wp-content/uploads/2018/08/fig4-273x300.png 273w, https://emolike.net/wp-content/uploads/2018/08/fig4-768x845.png 768w, https://emolike.net/wp-content/uploads/2018/08/fig4-930x1024.png 930w, https://emolike.net/wp-content/uploads/2018/08/fig4-245x270.png 245w\" sizes=\"(max-width: 1163px) 100vw, 1163px\" /><figcaption>\n<h4>Figure 4</h4>\n</figcaption></figure>\n<h2 id=\"growing-the-team\">Growing the Team</h2>\n<p>Everything runs smoothly for quite some time. Months pass. You hire a larger development team. One of the new developers checks in a bug. It takes down your production server. The developer blames it on his environment differing from production. There\u2019s some truth in what he said. Since you\u2019re an understanding person with a good temperament, you treat this occasion as a learning opportunity.</p>\n<p>It\u2019s time to build more environments: staging, QA, and development. Fortunately, you\u2019ve automated the creation of your infrastructure from day one, so this is easy. You\u2019ve also used good continuous delivery practices from day one, so you easily build pipelines from your new branches.</p>\n<p>Marketing wants to launch v2.0. You\u2019re not sure what v2.0 is, but you go with it anyway. Time to prepare for another traffic spike. You\u2019ve been running close to peak utilization on your web server, so you decide it\u2019s time to start load balancing the traffic. Amazon ELB makes this easy for you. Around this time, you also discover that layered diagrams in blog posts should show layers top to bottom instead of left to right.</p>\n<figure><img class=\"alignnone size-full wp-image-801\" src=\"https://emolike.net/wp-content/uploads/2018/08/fig5.png\" width=\"1172\" height=\"1234\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/fig5.png 1172w, https://emolike.net/wp-content/uploads/2018/08/fig5-285x300.png 285w, https://emolike.net/wp-content/uploads/2018/08/fig5-768x809.png 768w, https://emolike.net/wp-content/uploads/2018/08/fig5-973x1024.png 973w, https://emolike.net/wp-content/uploads/2018/08/fig5-256x270.png 256w\" sizes=\"(max-width: 1172px) 100vw, 1172px\" /><figcaption>\n<h4>Figure 5</h4>\n</figcaption></figure>\n<p>Confident that you\u2019ll be able to handle the load, you post your site to Hacker News again. Lo and behold, it holds up to the traffic. Great success!</p>\n<p>All seems to be well, until you go to check your logs. This takes you an hour due to having twelve servers to check (four in each environment). That\u2019s a hassle. Fortunately you\u2019re making enough money at this point to implement an ELK stack (ElasticSearch, LogStash, Kibana). You build one and point all environments at it.</p>\n<figure><img class=\"alignnone size-full wp-image-802\" src=\"https://emolike.net/wp-content/uploads/2018/08/fig6.png\" width=\"1280\" height=\"956\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/fig6.png 1280w, https://emolike.net/wp-content/uploads/2018/08/fig6-300x224.png 300w, https://emolike.net/wp-content/uploads/2018/08/fig6-768x574.png 768w, https://emolike.net/wp-content/uploads/2018/08/fig6-1024x765.png 1024w, https://emolike.net/wp-content/uploads/2018/08/fig6-362x270.png 362w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /><figcaption>\n<h4>Figure 6</h4>\n</figcaption></figure>\n<p>Now that you can read your logs again, you take a look at them and notice something odd. They\u2019re full of this</p>\n<pre><code data-enlighter-language=\"null\">GET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\r\nGET /wp-login.php HTTP/1.1\" 404 169 \"-\" \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1</code></pre>\n<p> </p>\n<p>You aren\u2019t running PHP, or WordPress for that matter, so this is pretty concerning. You notice similar suspect logs on your database servers, and wonder why you ever had them exposed to the internet. It\u2019s time for public and private subnets.</p>\n<figure><img class=\"alignnone size-full wp-image-803\" src=\"https://emolike.net/wp-content/uploads/2018/08/fig7.png\" width=\"1280\" height=\"980\" srcset=\"https://emolike.net/wp-content/uploads/2018/08/fig7.png 1280w, https://emolike.net/wp-content/uploads/2018/08/fig7-300x230.png 300w, https://emolike.net/wp-content/uploads/2018/08/fig7-768x588.png 768w, https://emolike.net/wp-content/uploads/2018/08/fig7-1024x784.png 1024w, https://emolike.net/wp-content/uploads/2018/08/fig7-353x270.png 353w\" sizes=\"(max-width: 1280px) 100vw, 1280px\" /><figcaption>\n<h4>Figure 7</h4>\n</figcaption></figure>\n<p>Once again, you check your logs. You still have the hacking attempts, but they\u2019re now limited to port 80 on your load balancer, which eases your mind a bit, since your application servers, database servers, and ELK stack are no longer exposed to the internet.</p>\n<p>Despite having centralized logging, you tire of having to discover outages by manually checking logs. You use Amazon CloudWatch to setup disk, CPU, and network alarms that send you an email when they hit 80% capacity. Wonderful!</p>\n<h2 id=\"smooth-sailing\">Smooth Sailing</h2>\n<p>Just kidding! There\u2019s no such thing as smooth sailing in software. Something will go wrong. Fortunately, you have a lot of tooling in place to make handling these problems easier.</p>\n<p>We\u2019ve built a scalable web application with backups, rollbacks (using blue/green deployments between production and staging), centralized logging, monitoring, and alerting. This is a good point to stop, since growth from here tends to depend on application-specific needs.</p>\n<p>The industry has provided a number of hosted options that handle most of this for you. Instead of building all of this yourself, you can rely on Beanstalk, AppEngine, GKE, ECS, etc. Most of these services setup sensible permissions, load balancers, subnets, etc\u2026 automatically. They take a lot of the hassle out of getting an application up and running quickly that has the reliability your site needs to run for a long time.</p>\n<p>Regardless, I think it\u2019s useful to understand what functionality each of these platforms provides and why they provide it. It makes it easier to select a platform based on your own needs. Once you have everything running in the platform, you\u2019ve already figured out how these important aspects of the tool work. When something goes wrong, it helps to know you have the necessary tools to solve the problem.</p>\n<h2 id=\"outro\">Outro</h2>\n<p>This post omits a lot of details. It doesn\u2019t cover how to automate the creation of infrastructure, or how to provision servers, or how to configure servers. It doesn\u2019t cover how to create development environments, or how to setup continuous delivery pipelines, or how to execute deployments or rollbacks. It doesn\u2019t cover network security, or secret sharing, or the principle of least privilege. It doesn\u2019t cover the importance of immutable infrastructure, or stateless servers, or migrations. Each of these topics requires posts of their own.</p>\n<p>This article\u2019s purpose is mostly to provide a high level overview of what a reasonable production web application ought to look like. Future posts may reference this one and expand on it.</p>\n<p>That\u2019s all for now.</p>\n<p>Thanks for reading, and happy coding!</p>\n<blockquote><p>Edit: Don\u2019t take the exact numbers used in this illustrative story literally. Individually, these events have all happened to me at different times, but they were in completely different environments under different types of load.</p></blockquote>\n<div id=\"at_zurlpreview\">\n<h2></h2>\n<h2>What&#8217;s in a Production Web Application? \u00b7 Stephen Mann</h2>\n<h3 style=\"display: none;\">What&#8217;s in a Production Web Application? \u00b7 Stephen Mann</h3>\n<p class=\"imgd\">This is Stephen Mann&#8217;s personal blog about building production applications. Code at your own risk.</p>\n<p class=\"imgs\">Source: <a href=\"https://stephenmann.io/post/whats-in-a-production-web-application/\" target=\"_blank\" rel=\"noopener\">stephenmann.io/post/whats-in-a-production-web-application/</a></p>\n</div>\n", "slug": "whats-in-a-production-web-application-%c2%b7-stephen-mann", "date": 1535370076, "cats": [0, 8, 16, 4, 5, 14]}