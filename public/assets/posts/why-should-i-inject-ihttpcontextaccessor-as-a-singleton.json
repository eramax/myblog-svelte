{"title": "Why should I inject IHttpContextAccessor as a Singleton", "content": "<p>According to comments associated with an issue raised on GitHub</p>\n<p><a href=\"https://github.com/aspnet/Hosting/issues/793#issuecomment-224828588\" rel=\"noreferrer\">https://github.com/aspnet/Hosting/issues/793#issuecomment-224828588</a></p>\n<blockquote><p>In that sample, you are registering it as a singleton. Shouldn\u2019t it be a scoped instance?</p>\n<p>It\u2019s fine being a singleton because the backing store is async local.</p></blockquote>\n<p>Which got a later reply</p>\n<p><a href=\"https://github.com/aspnet/Hosting/issues/793#issuecomment-224924030\" rel=\"noreferrer\">https://github.com/aspnet/Hosting/issues/793#issuecomment-224924030</a></p>\n<blockquote><p>Actually if you register it as a Transient on .NET Core then it doesn\u2019t work properly since the implementation for .NET Core is using a AsyncLocal which relies upon the instance variable to track the TLS storage slot. So it has to be registered as a singleton on .NET Core.</p></blockquote>\n", "slug": "why-should-i-inject-ihttpcontextaccessor-as-a-singleton", "date": 1558721521, "cats": [0, 13, 14]}